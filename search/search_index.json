{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Anaplan SDK       Streamlined Python Interface for the Anaplan API.  <p>Streamlined Python Interface for the Anaplan API. Get up and running with the Anaplan API in minutes.</p> <p>Anaplan SDK is an independent, unofficial project providing pythonic access to Anaplan. It delivers high-level abstractions over all parts of the Anaplan API, allowing you to focus on business requirements rather than implementation details.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Pythonic Interface: Clean, intuitive access to Anaplan functionality</li> <li>Simplified API Interactions: Automatic handling of authentication, error handling, and data formatting</li> <li>Performance Optimizations: Built-in chunking and compression techniques</li> <li>Multiple API Support: Supports all Anaplan API categories</li> <li>Flexible Client Options: Both synchronous and asynchronous implementations</li> <li>Developer-Friendly: Designed to reduce boilerplate code and accelerate development</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Head over to the Quick Start for basic usage instructions and examples.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are appreciated, from reporting bugs to implementing new features. Pull requests are welcome. For large changes, please open an issue first to discuss what you would like to change. Please ensure your code adheres to the existing style and includes appropriate tests.</p> <p>If you encounter any issues or have feature requests, please open an issue on GitHub.</p>"},{"location":"concepts/","title":"Anaplan API Concepts","text":"<p>This guide explains key Anaplan concepts for developers working with the Bulk API. You can think of the flow of uploading data to Anaplan with the Bulk API like so:</p>"},{"location":"concepts/#quick-overview","title":"Quick Overview","text":"<ul> <li>You upload data to files in Anaplan. The only supported file formats are <code>csv</code> and <code>xlsx</code>.</li> <li>Import Actions move data from files to Lists &amp; Modules</li> <li>Export Actions move data from Lists &amp; Modules to files</li> <li>You download these files to retrieve data</li> <li>Processes are sequences of actions</li> <li>Never run concurrent operations that reference the same file.</li> </ul>"},{"location":"concepts/#files","title":"Files","text":"<ul> <li>Files are user-specific. Your colleagues will see the same files as you, and - if the setting is enabled - the default content of the file. If they upload content to that same file, they will see their content under that file, and you will still see your content under that file. This means that the role used to upload must also be the role to run imports against that file. Using a different role will result in an error or wrong data being imported.</li> <li>Files have a 48-hour lifetime. After this period, files will show the default content set for the file if given, else nothing.</li> <li>Files are not safe for concurrent access. You can override the content of a file while another import is reading   from it. Anaplan does not acquire locks and will not queue the task.</li> </ul>"},{"location":"concepts/#actions","title":"Actions","text":"<p>All data is exchanged through files. When uploading data, you are uploading the data to a file previously registered with Anaplan. When downloading data, you are downloading a file either registered with Anaplan or produced by an export action. Anaplan does not use (S)FTP, you will reference these files only by their ID and send or receive their content in the body of HTTP Requests.</p> <ul> <li>Anaplan has the following type of actions:<ul> <li>Imports - 112000000000 IDs.</li> <li>Exports - 116000000000 IDs.</li> <li>Processes - 118000000000 IDs.</li> <li>Other Actions - 117000000000 IDs.</li> </ul> </li> </ul> <p>Imports read data from a file and load it into a module. Exports conversely load data from a module to a file. The file id of the resulting file is identical to the export id. \"Other Actions\" move things around in Anaplan and can also delete data etc. Processes are simply a sequence of the other three.</p> <p>Invoking any Action will spawn a Task. You can then query the status of this task.</p> <p>Files are NOT Safe for concurrent access. If you want to override the content of a file while an import is being run against it, you can. Import and Export Actions, however, are. If you run an Export while an Import into a module that will affect the data of the module you are trying to export from, Anaplan will queue this task. No dirty reads.</p>"},{"location":"concepts/#imports","title":"Imports","text":"<p>Imports read data from a file and load it into a list or module. Only after running an Import against the file you just uploaded is the data actually \"in\" Anaplan. Only uploading a file will do nothing and after 48h - the lifetime for files in Anaplan - the content will simply vanish. Import Actions are quite powerful and can incur mapping of columns from i.e. a csv structure to dimensions in Anaplan, type conversion, date parsing and more. They are also quite easy to get wrong and very sensitive to change.</p>"},{"location":"concepts/#exports","title":"Exports","text":"<p>When you want to get some data from Anaplan, you will have to do the reverse of an Import, in two similar steps. First, you run an export and wait for the spawned task to complete. Then you can download the content of the file that was populated by the export action. The File will have the same ID as the Export Action that produced it.</p>"},{"location":"concepts/#processes","title":"Processes","text":"<p>A Process is just an arbitrary sequence of any kind of actions. These are useful for grouping actions that must only be run together or just represent some logical grouping. Processes can include import an export actions. When loading data to or from Anaplan with a process, you will have to find the Import or Export contained in the process, and the referenced data source in the case of an Import.</p>"},{"location":"installation/","title":"Installation","text":"<p>Anaplan SDK requires Python 3.10.4 or higher.</p> pipuvPoetry <pre><code>pip install anaplan-sdk</code></pre> <pre><code>uv add anaplan-sdk</code></pre> <pre><code>poetry add anaplan-sdk</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>By default, Anaplan SDK has just two dependencies:</p> <ul> <li>httpx: HTTP Client.</li> <li>pydantic: Data Models and validation.</li> </ul>"},{"location":"installation/#certificate-authentication","title":"Certificate Authentication","text":"<p>If you want to use certificate authentication, you need to install the <code>cert</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[cert]</code></pre> <pre><code>uv add anaplan-sdk[cert]</code></pre> <pre><code>poetry add anaplan-sdk[cert]</code></pre> <p>This will install cryptography to securely construct the authentication request.</p>"},{"location":"installation/#oauth2-authentication","title":"Oauth2 Authentication","text":"<p>If you want to use Oauth2 authentication, you need to install the <code>oauth</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[oauth]</code></pre> <pre><code>uv add anaplan-sdk[oauth]</code></pre> <pre><code>poetry add anaplan-sdk[oauth]</code></pre> <p>This will install OAuthLib to securely construct the authentication request.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>This Quickstart focuses on the Bulk endpoints of the Anaplan API, which are most commonly used for data import and export. If you are looking for different APIs, such as the Transactional APIs or CloudWork APIs, please refer to the respective  Guides.</p> <p>To get started, you can use basic authentication. Refer to the Bulk API Guide to understand why this is not a good idea for production use.</p> Prerequisites <p>The Quickstart assumes you already have both valid credentials for your tenant, and the <code>workspace_id</code> and  <code>model_id</code> of the Model you want to work with. If you don't: You can find both of these either in the URL displayed  in the browser or by instantiating a client with Authentication information only and then calling the  <code>get_workspaces</code> and <code>get_models</code> methods. Alternatively, you can use an HTTP Client like Postman, Insomnia,  or Paw.</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    user_email=\"admin@company.com\",\n    password=\"my_super_secret_password\",\n)</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    user_email=\"admin@company.com\",\n    password=\"my_super_secret_password\",\n)</code></pre>"},{"location":"quickstart/#importing-data","title":"Importing Data","text":"<p>Start by listing available assets in your model. Typically, these will have already been created, and you will be searching for a specific name provided by your Model Builder. Here, we will use one file and one process, which is common practice.</p> SynchronousAsynchronous <pre><code>file = anaplan.get_files()\nprocesses = anaplan.get_processes()</code></pre> <pre><code>from asyncio import gather\n\nfiles, processes = await gather(anaplan.get_files(), anaplan.get_processes())</code></pre> Output <p>Models used in this Example: File, Process. <pre><code>[\n    File(\n        id=113000000000,\n        name=\"Quickstart.csv\",\n        chunk_count=0,\n        delimiter='\"',\n        encoding=\"UTF-8\",\n        first_data_row=2,\n        format=\"txt\",\n        header_row=1,\n        separator=\",\",\n    )\n]\n[Process(id=118000000000, name=\"Quickstart\")]</code></pre></p> <p>With these two, you're ready to run your first import.</p> SynchronousAsynchronous <pre><code>anaplan.upload_and_import(\n    file_id=113000000000, action_id=118000000000, content=b\"Hello, Anaplan!\"\n)</code></pre> <pre><code>await anaplan.upload_and_import(\n    file_id=113000000000, action_id=118000000000, content=b\"Hello, Anaplan!\"\n)</code></pre> <p>This will upload the file to Anaplan, trigger the process task, wait for the completion of the task and validate the task result. You can see the details of the task by inspecting the TaskResult.</p>"},{"location":"quickstart/#exporting-data","title":"Exporting Data","text":"<p>Conversely, for exporting data, we start by listing the available exports.</p> SynchronousAsynchronous <pre><code>exports = anaplan.get_exports()</code></pre> <pre><code>exports = await anaplan.get_exports()</code></pre> Output <p>Models used in this Example: Export. <pre><code>[\n    Export(\n        id=116000000000,\n        name=\"Quickstart Export\",\n        type=\"GRID_CURRENT_PAGE\",\n        format=\"text/csv\",\n        encoding=\"UTF-8\",\n        layout=\"GRID_CURRENT_PAGE\",\n    )\n]</code></pre></p> SynchronousAsynchronous <pre><code>content = anaplan.export_and_download(116000000000)</code></pre> <pre><code>content = await anaplan.export_and_download(116000000000)</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>To gain a better understanding of how Anaplan handles data, head over to the Anaplan Explained section.</p> <p>For a more detailed guide on how to use both the Bulk APIs and Transactional APIs, refer to the Guides.</p>"},{"location":"api/exceptions/","title":"Exceptions","text":""},{"location":"api/exceptions/#anaplan_sdk.exceptions.AnaplanException","title":"AnaplanException","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all Anaplan SDK Exceptions.</p>"},{"location":"api/exceptions/#anaplan_sdk.exceptions.InvalidCredentialsException","title":"InvalidCredentialsException","text":"<p>               Bases: <code>AnaplanException</code></p> <p>Exception raised when the provided credentials are invalid.</p>"},{"location":"api/exceptions/#anaplan_sdk.exceptions.InvalidPrivateKeyException","title":"InvalidPrivateKeyException","text":"<p>               Bases: <code>InvalidCredentialsException</code></p> <p>Exception raised when the provided private key is invalid.</p>"},{"location":"api/exceptions/#anaplan_sdk.exceptions.InvalidIdentifierException","title":"InvalidIdentifierException","text":"<p>               Bases: <code>AnaplanException</code></p> <p>Exception raised when the provided identifier is invalid.</p>"},{"location":"api/exceptions/#anaplan_sdk.exceptions.AnaplanActionError","title":"AnaplanActionError","text":"<p>               Bases: <code>AnaplanException</code></p> <p>Exception raised when an Anaplan Action fails.</p>"},{"location":"api/exceptions/#anaplan_sdk.exceptions.AnaplanTimeoutException","title":"AnaplanTimeoutException","text":"<p>               Bases: <code>AnaplanException</code></p> <p>Exception raised when Anaplan produces a Timeout.</p>"},{"location":"api/async/async_alm_client/","title":"ALM","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>alm</code> Property on an instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.change_model_status","title":"change_model_status  <code>async</code>","text":"<pre><code>change_model_status(status: Literal['online', 'offline']) -&gt; None</code></pre> <p>Use this call to change the status of a model.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>Literal['online', 'offline']</code> <p>The status of the model. Can be either \"online\" or \"offline\".</p> required"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_revisions","title":"get_revisions  <code>async</code>","text":"<pre><code>get_revisions(\n    sort_by: Literal[\"id\", \"name\", \"applied_on\", \"created_on\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Revision]</code></pre> <p>Use this call to return a list of revisions for a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['id', 'name', 'applied_on', 'created_on'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Revision]</code> <p>A list of revisions for a specific model.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_latest_revision","title":"get_latest_revision  <code>async</code>","text":"<pre><code>get_latest_revision() -&gt; Revision | None</code></pre> <p>Use this call to return the latest revision for a specific model. The response is in the same format as in Getting a list of syncable revisions between two models.</p> <p>If a revision exists, the return list should contain one element only which is the latest revision.</p> <p>Returns:</p> Type Description <code>Revision | None</code> <p>The latest revision for a specific model, or None if no revisions exist.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_syncable_revisions","title":"get_syncable_revisions  <code>async</code>","text":"<pre><code>get_syncable_revisions(source_model_id: str) -&gt; list[Revision]</code></pre> <p>Use this call to return the list of revisions from your source model that can be synchronized to your target model.</p> <p>The returned list displays in descending order, by creation date and time. This is consistent with how revisions are displayed in the user interface (UI).</p> <p>Parameters:</p> Name Type Description Default <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <p>Returns:</p> Type Description <code>list[Revision]</code> <p>A list of revisions that can be synchronized to the target model.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.create_revision","title":"create_revision  <code>async</code>","text":"<pre><code>create_revision(name: str, description: str) -&gt; Revision</code></pre> <p>Create a new revision for the model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name (title) of the revision.</p> required <code>description</code> <code>str</code> <p>The description of the revision.</p> required <p>Returns:</p> Type Description <code>Revision</code> <p>The created Revision Info.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_sync_tasks","title":"get_sync_tasks  <code>async</code>","text":"<pre><code>get_sync_tasks() -&gt; list[TaskSummary]</code></pre> <p>List the sync tasks for a target mode. The returned the tasks are either in progress, or they completed within the last 48 hours.</p> <p>Returns:</p> Type Description <code>list[TaskSummary]</code> <p>A list of sync tasks in descending order of creation time.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_sync_task","title":"get_sync_task  <code>async</code>","text":"<pre><code>get_sync_task(task_id: str) -&gt; SyncTask</code></pre> <p>Get the information for a specific sync task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the sync task.</p> required <p>Returns:</p> Type Description <code>SyncTask</code> <p>The sync task information.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.sync_models","title":"sync_models  <code>async</code>","text":"<pre><code>sync_models(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; SyncTask</code></pre> <p>Create a synchronization task between two revisions. This will synchronize the source revision of the source model to the target revision of the target model. This will fail if the source revision is incompatible with the target revision.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>SyncTask</code> <p>The created sync task.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_models_for_revision","title":"get_models_for_revision  <code>async</code>","text":"<pre><code>get_models_for_revision(revision_id: str) -&gt; list[ModelRevision]</code></pre> <p>Use this call when you need a list of the models that had a specific revision applied to them.</p> <p>Parameters:</p> Name Type Description Default <code>revision_id</code> <code>str</code> <p>The ID of the revision.</p> required <p>Returns:</p> Type Description <code>list[ModelRevision]</code> <p>A list of models that had a specific revision applied to them.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.create_comparison_report","title":"create_comparison_report  <code>async</code>","text":"<pre><code>create_comparison_report(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; ReportTask</code></pre> <p>Generate a full comparison report between two revisions. This will list all the changes made to the source revision compared to the target revision.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>ReportTask</code> <p>The created report task summary.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_comparison_report_task","title":"get_comparison_report_task  <code>async</code>","text":"<pre><code>get_comparison_report_task(task_id: str) -&gt; ReportTask</code></pre> <p>Get the task information for a comparison report task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the comparison report task.</p> required <p>Returns:</p> Type Description <code>ReportTask</code> <p>The report task information.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_comparison_report","title":"get_comparison_report  <code>async</code>","text":"<pre><code>get_comparison_report(task: ReportTask) -&gt; bytes</code></pre> <p>Get the report for a specific task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>ReportTask</code> <p>The report task object containing the task ID.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The binary content of the comparison report.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.create_comparison_summary","title":"create_comparison_summary  <code>async</code>","text":"<pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: Literal[True] = True,\n) -&gt; SummaryReport</code></pre><pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: Literal[False] = False,\n) -&gt; ReportTask</code></pre> <pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; ReportTask | SummaryReport</code></pre> <p>Generate a comparison summary between two revisions.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>ReportTask | SummaryReport</code> <p>The created summary task or the summary report, if <code>wait_for_completion</code> is True.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_comparison_summary_task","title":"get_comparison_summary_task  <code>async</code>","text":"<pre><code>get_comparison_summary_task(task_id: str) -&gt; ReportTask</code></pre> <p>Get the task information for a comparison summary task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the comparison summary task.</p> required <p>Returns:</p> Type Description <code>ReportTask</code> <p>The report task information.</p>"},{"location":"api/async/async_alm_client/#anaplan_sdk._async_clients._AsyncAlmClient.get_comparison_summary","title":"get_comparison_summary  <code>async</code>","text":"<pre><code>get_comparison_summary(task: ReportTask) -&gt; SummaryReport</code></pre> <p>Get the comparison summary for a specific task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>ReportTask</code> <p>The summary task object containing the task ID.</p> required <p>Returns:</p> Type Description <code>SummaryReport</code> <p>The binary content of the comparison summary.</p>"},{"location":"api/async/async_audit_client/","title":"Audit","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>audit</code> Property on an instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_audit_client/#anaplan_sdk._async_clients._AsyncAuditClient.get_users","title":"get_users  <code>async</code>","text":"<pre><code>get_users(\n    search_pattern: str | None = None,\n    sort_by: UserSortBy = None,\n    descending: bool = False,\n) -&gt; list[User]</code></pre> <p>Lists all the Users in the authenticated users default tenant.</p> <p>Parameters:</p> Name Type Description Default <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific users. When provided, case-insensitive matches users with emails or names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all users.</p> <code>None</code> <code>sort_by</code> <code>UserSortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[User]</code> <p>The List of Users.</p>"},{"location":"api/async/async_audit_client/#anaplan_sdk._async_clients._AsyncAuditClient.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_id: str = 'me') -&gt; User</code></pre> <p>Retrieves information about the specified user, or the authenticated user if none specified.</p> <p>Returns:</p> Type Description <code>User</code> <p>The requested or currently authenticated User.</p>"},{"location":"api/async/async_audit_client/#anaplan_sdk._async_clients._AsyncAuditClient.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(\n    days_into_past: int = 30, event_type: Event = \"all\"\n) -&gt; list[dict[str, Any]]</code></pre> <p>Get audit events from Anaplan Audit API.</p> <p>Parameters:</p> Name Type Description Default <code>days_into_past</code> <code>int</code> <p>The nuber of days into the past to get events for. The API provides data for up to 30 days.</p> <code>30</code> <code>event_type</code> <code>Event</code> <p>The type of events to get.</p> <code>'all'</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>A list of log entries, each containing a dictionary with event details.</p>"},{"location":"api/async/async_client/","title":"Bulk API Client (<code>AsyncClient</code>)","text":"<p>Asynchronous Anaplan Client. For guides and examples refer to https://vinzenzklass.github.io/anaplan-sdk.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.__init__","title":"__init__","text":"<pre><code>__init__(\n    workspace_id: str | None = None,\n    model_id: str | None = None,\n    user_email: str | None = None,\n    password: str | None = None,\n    certificate: str | bytes | None = None,\n    private_key: str | bytes | None = None,\n    private_key_password: str | bytes | None = None,\n    token: str | None = None,\n    auth: Auth | None = None,\n    timeout: float | Timeout = 30,\n    retry_count: int = 2,\n    backoff: float = 1.0,\n    backoff_factor: float = 2.0,\n    page_size: int = 5000,\n    status_poll_delay: int = 1,\n    upload_chunk_size: int = 25000000,\n    allow_file_creation: bool = False,\n    **httpx_kwargs,\n) -&gt; None</code></pre> <p>Asynchronous Anaplan Client. For guides and examples refer to https://vinzenzklass.github.io/anaplan-sdk.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The Anaplan workspace Id. You can copy this from the browser URL or find them using an HTTP Client like Postman, Paw, Insomnia etc.</p> <code>None</code> <code>model_id</code> <code>str | None</code> <p>The identifier of the model.</p> <code>None</code> <code>user_email</code> <code>str | None</code> <p>A valid email registered with the Anaplan Workspace you are attempting to access.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>Password for the given <code>user_email</code> for basic Authentication.</p> <code>None</code> <code>certificate</code> <code>str | bytes | None</code> <p>The certificate content or the absolute path to the certificate file.</p> <code>None</code> <code>private_key</code> <code>str | bytes | None</code> <p>The private key content or the absolute path to the private key file.</p> <code>None</code> <code>private_key_password</code> <code>str | bytes | None</code> <p>The password to access the private key file. This is only considered if you provided a private key file and it password-protected.</p> <code>None</code> <code>token</code> <code>str | None</code> <p>An Anaplan API Token. This will be used to authenticate the client. If sufficient other authentication parameters are provided, the token will be used until it expires, after which a new one will be created. If you provide only this parameter, the client will raise an error upon first authentication failure. For short-lived instances, such as in web applications where user specific clients are created, this is the recommended way to authenticate, since this has the least overhead.</p> <code>None</code> <code>auth</code> <code>Auth | None</code> <p>You can provide a subclass of <code>httpx.Auth</code> to use for authentication. You can provide an instance of one of the classes provided by the SDK, or an instance of your own subclass of <code>httpx.Auth</code>. This will give you full control over the authentication process, but you will need to implement the entire authentication logic yourself.</p> <code>None</code> <code>timeout</code> <code>float | Timeout</code> <p>The timeout in seconds for the HTTP requests. Alternatively, you can pass an instance of <code>httpx.Timeout</code> to set the timeout for the HTTP requests.</p> <code>30</code> <code>retry_count</code> <code>int</code> <p>The number of times to retry an HTTP request if it fails. Set this to 0 to never retry. Defaults to 2, meaning each HTTP Operation will be tried a total number of 2 times.</p> <code>2</code> <code>backoff</code> <code>float</code> <p>The initial backoff time in seconds for the retry mechanism. This is the time to wait before the first retry.</p> <code>1.0</code> <code>backoff_factor</code> <code>float</code> <p>The factor by which the backoff time is multiplied after each retry. For example, if the initial backoff is 1 second and the factor is 2, the second retry will wait 2 seconds, the third retry will wait 4 seconds, and so on.</p> <code>2.0</code> <code>page_size</code> <code>int</code> <p>The number of items to return per page when paginating through results. Defaults to 5000. This is the maximum number of items that can be returned per request. If you pass a value greater than 5000, it will be capped to 5000.</p> <code>5000</code> <code>status_poll_delay</code> <code>int</code> <p>The delay between polling the status of a task.</p> <code>1</code> <code>upload_chunk_size</code> <code>int</code> <p>The size of the chunks to upload. This is the maximum size of each chunk. Defaults to 25MB.</p> <code>25000000</code> <code>allow_file_creation</code> <code>bool</code> <p>Whether to allow the creation of new files. Defaults to False since this is typically unintentional and may well be unwanted behaviour in the API altogether. A file that is created this way will not be referenced by any action in anaplan until manually assigned so there is typically no value in dynamically creating new files and uploading content to them.</p> <code>False</code> <code>httpx_kwargs</code> <p>Additional keyword arguments to pass to the <code>httpx.AsyncClient</code>. This can be used to set additional options such as proxies, headers, etc. See https://www.python-httpx.org/api/#asyncclient for the full list of arguments.</p> <code>{}</code>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.with_model","title":"with_model","text":"<pre><code>with_model(\n    model_id: str | None = None, workspace_id: str | None = None\n) -&gt; Self</code></pre> <p>Create a new instance of the Client with the given model and workspace Ids. This creates a copy of the current client. The current instance remains unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The workspace Id to use or None to use the existing workspace Id.</p> <code>None</code> <code>model_id</code> <code>str | None</code> <p>The model Id to use or None to use the existing model Id.</p> <code>None</code> <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of the Client.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.audit","title":"audit  <code>property</code>","text":"<pre><code>audit: _AsyncAuditClient</code></pre> <p>The Audit Client provides access to the Anaplan Audit API. For details, see https://vinzenzklass.github.io/anaplan-sdk/guides/audit/.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.cw","title":"cw  <code>property</code>","text":"<pre><code>cw: _AsyncCloudWorksClient</code></pre> <p>The Cloud Works Client provides access to the Anaplan Cloud Works API. For details, see https://vinzenzklass.github.io/anaplan-sdk/guides/cloud_works/.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.tr","title":"tr  <code>property</code>","text":"<pre><code>tr: _AsyncTransactionalClient</code></pre> <p>The Transactional Client provides access to the Anaplan Transactional API. This is useful for more advanced use cases where you need to interact with the Anaplan Model in a more granular way.</p> <p>If you instantiated the client without the field <code>model_id</code>, this will raise a <code>ValueError</code>, since none of the endpoints can be invoked without the model Id.</p> <p>Returns:</p> Type Description <code>_AsyncTransactionalClient</code> <p>The Transactional Client.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.alm","title":"alm  <code>property</code>","text":"<pre><code>alm: _AsyncAlmClient</code></pre> <p>To use the Application Lifecycle Management (ALM) API, you need a Professional or Enterprise subscription.</p> <p>The ALM Client provides access to the Anaplan ALM API. This is useful for more advanced use cases where you need retrieve Meta Information for yours models, read or create revisions, spawn sync tasks or generate comparison reports.</p> <p>Returns:</p> Type Description <code>_AsyncAlmClient</code> <p>The ALM Client.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.scim","title":"scim  <code>property</code>","text":"<pre><code>scim: _AsyncScimClient</code></pre> <p>To use the SCIM API, you must be User Admin. The SCIM API allows managing internal users. Visiting users are excluded from the SCIM API.</p> <p>Returns:</p> Type Description <code>_AsyncScimClient</code> <p>The SCIM Client.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_workspace","title":"get_workspace  <code>async</code>","text":"<pre><code>get_workspace(workspace_id: str | None = None) -&gt; Workspace</code></pre> <p>Retrieves the Workspace with the given Id, or the Workspace of the current instance if no Id is given. If no Id is given and the instance has no workspace Id, this will raise a ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The identifier of the Workspace to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>Workspace</code> <p>The Workspace.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_workspaces","title":"get_workspaces  <code>async</code>","text":"<pre><code>get_workspaces(\n    search_pattern: str | None = None,\n    sort_by: Literal[\"size_allowance\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Workspace]</code></pre> <p>Lists all the Workspaces the authenticated user has access to.</p> <p>Parameters:</p> Name Type Description Default <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific workspaces. When provided, case-insensitive matches workspaces with names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all users.</p> <code>None</code> <code>sort_by</code> <code>Literal['size_allowance', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Workspace]</code> <p>The List of Workspaces.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id: str | None = None) -&gt; ModelWithTransactionInfo</code></pre> <p>Retrieves the Model with the given Id, or the Model of the current instance if no Id is given. If no Id is given and the instance has no model Id, this will raise a ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str | None</code> <p>The identifier of the Model to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>ModelWithTransactionInfo</code> <p>The Model.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_models","title":"get_models  <code>async</code>","text":"<pre><code>get_models(\n    only_in_workspace: bool | str = False,\n    search_pattern: str | None = None,\n    sort_by: Literal[\"active_state\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Model]</code></pre> <p>Lists all the Models the authenticated user has access to.</p> <p>Parameters:</p> Name Type Description Default <code>only_in_workspace</code> <code>bool | str</code> <p>If True, only lists models in the workspace provided when instantiating the client. If a string is provided, only lists models in the workspace with the given Id. If False (default), lists models in all workspaces the user</p> <code>False</code> <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific models. When provided, case-insensitive matches model names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all models.</p> <code>None</code> <code>sort_by</code> <code>Literal['active_state', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>The List of Models.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.delete_models","title":"delete_models  <code>async</code>","text":"<pre><code>delete_models(model_ids: list[str]) -&gt; ModelDeletionResult</code></pre> <p>Delete the given Models. Models need to be closed before they can be deleted. If one of the deletions fails, the other deletions will still be attempted and may complete.</p> <p>Parameters:</p> Name Type Description Default <code>model_ids</code> <code>list[str]</code> <p>The list of Model identifiers to delete.</p> required <p>Returns:</p> Type Description <code>ModelDeletionResult</code>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_files","title":"get_files  <code>async</code>","text":"<pre><code>get_files(sort_by: SortBy = None, descending: bool = False) -&gt; list[File]</code></pre> <p>Lists all the Files in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[File]</code> <p>The List of Files.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_actions","title":"get_actions  <code>async</code>","text":"<pre><code>get_actions(sort_by: SortBy = None, descending: bool = False) -&gt; list[Action]</code></pre> <p>Lists all the Actions in the Model. This will only return the Actions listed under <code>Other Actions</code> in Anaplan. For Imports, exports, and processes, see their respective methods instead.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Action]</code> <p>The List of Actions.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_processes","title":"get_processes  <code>async</code>","text":"<pre><code>get_processes(\n    sort_by: SortBy = None, descending: bool = False\n) -&gt; list[Process]</code></pre> <p>Lists all the Processes in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Process]</code> <p>The List of Processes.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_imports","title":"get_imports  <code>async</code>","text":"<pre><code>get_imports(sort_by: SortBy = None, descending: bool = False) -&gt; list[Import]</code></pre> <p>Lists all the Imports in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Import]</code> <p>The List of Imports.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_exports","title":"get_exports  <code>async</code>","text":"<pre><code>get_exports(sort_by: SortBy = None, descending: bool = False) -&gt; list[Export]</code></pre> <p>Lists all the Exports in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Export]</code> <p>The List of Exports.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.run_action","title":"run_action  <code>async</code>","text":"<pre><code>run_action(action_id: int, wait_for_completion: bool = True) -&gt; TaskStatus</code></pre> <p>Runs the Action and validates the spawned task. If the Action fails or completes with errors, this will raise an AnaplanActionError. Failed Tasks are often not something you can recover from at runtime and often require manual changes in Anaplan, i.e. updating the mapping of an Import or similar.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the Action to run. Can be any Anaplan Invokable; Processes, Imports, Exports, Other Actions.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_file","title":"get_file  <code>async</code>","text":"<pre><code>get_file(file_id: int) -&gt; bytes</code></pre> <p>Retrieves the content of the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to retrieve.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the file.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_file_stream","title":"get_file_stream  <code>async</code>","text":"<pre><code>get_file_stream(file_id: int, batch_size: int = 1) -&gt; AsyncIterator[bytes]</code></pre> <p>Retrieves the content of the specified file as a stream of chunks. The chunks are yielded one by one, so you can process them as they arrive. This is useful for large files where you don't want to or cannot load the entire file into memory at once.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to retrieve.</p> required <code>batch_size</code> <code>int</code> <p>Number of chunks to fetch concurrently. If &gt; 1, n chunks will be fetched concurrently. This still yields each chunk individually, only the requests are batched. If 1 (default), each chunk is fetched sequentially.</p> <code>1</code> <p>Returns:</p> Type Description <code>AsyncIterator[bytes]</code> <p>A generator yielding the chunks of the file.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.upload_file","title":"upload_file  <code>async</code>","text":"<pre><code>upload_file(file_id: int, content: str | bytes) -&gt; None</code></pre> <p>Uploads the content to the specified file. If there are several chunks, upload of individual chunks are uploaded concurrently.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>str | bytes</code> <p>The content to upload. This Content will be compressed before uploading. If you are passing the Input as bytes, pass it uncompressed.</p> required"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.upload_file_stream","title":"upload_file_stream  <code>async</code>","text":"<pre><code>upload_file_stream(\n    file_id: int,\n    content: AsyncIterator[bytes | str] | Iterator[str | bytes],\n    batch_size: int = 1,\n) -&gt; None</code></pre> <p>Uploads the content to the specified file as a stream of chunks. This is useful either for large files where you don't want to or cannot load the entire file into memory at once, or if you simply do not know the number of chunks ahead of time and instead just want to pass on chunks i.e. consumed from a queue until it is exhausted. In this case, you can pass a generator that yields the chunks of the file one by one to this method.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>AsyncIterator[bytes | str] | Iterator[str | bytes]</code> <p>An Iterator or AsyncIterator yielding the chunks of the file. You can pass any Iterator, but you will most likely want to pass a Generator.</p> required <code>batch_size</code> <code>int</code> <p>Number of chunks to upload concurrently. If &gt; 1, n chunks will be uploaded concurrently. This can be useful if you either do not control the chunk size, or if you want to keep the chunk size small but still want some concurrency.</p> <code>1</code>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.upload_and_import","title":"upload_and_import  <code>async</code>","text":"<pre><code>upload_and_import(\n    file_id: int,\n    content: str | bytes,\n    action_id: int,\n    wait_for_completion: bool = True,\n) -&gt; TaskStatus</code></pre> <p>Convenience wrapper around <code>upload_file()</code> and <code>run_action()</code> to upload content to a file and run an import action in one call.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>str | bytes</code> <p>The content to upload. This Content will be compressed before uploading. If you are passing the Input as bytes, pass it uncompressed to avoid redundant work.</p> required <code>action_id</code> <code>int</code> <p>The identifier of the action to run after uploading the content.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the import task status and not return until the task is complete. If False, it will spawn the import task and return immediately.</p> <code>True</code>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.export_and_download","title":"export_and_download  <code>async</code>","text":"<pre><code>export_and_download(action_id: int) -&gt; bytes</code></pre> <p>Convenience wrapper around <code>run_action()</code> and <code>get_file()</code> to run an export action and download the exported content in one call.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action to run.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the exported file.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_task_summaries","title":"get_task_summaries  <code>async</code>","text":"<pre><code>get_task_summaries(action_id: int) -&gt; list[TaskSummary]</code></pre> <p>Retrieves the status of all tasks spawned by the specified action.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action that was invoked.</p> required <p>Returns:</p> Type Description <code>list[TaskSummary]</code> <p>The list of tasks spawned by the action.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_task_status","title":"get_task_status  <code>async</code>","text":"<pre><code>get_task_status(action_id: int, task_id: str) -&gt; TaskStatus</code></pre> <p>Retrieves the status of the specified task.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action that was invoked.</p> required <code>task_id</code> <code>str</code> <p>The identifier of the spawned task.</p> required <p>Returns:</p> Type Description <code>TaskStatus</code> <p>The status of the task.</p>"},{"location":"api/async/async_client/#anaplan_sdk.AsyncClient.get_optimizer_log","title":"get_optimizer_log  <code>async</code>","text":"<pre><code>get_optimizer_log(action_id: int, task_id: str) -&gt; bytes</code></pre> <p>Retrieves the solution logs of the specified optimization action task.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the optimization action that was invoked.</p> required <code>task_id</code> <code>str</code> <p>The Task identifier, sometimes also referred to as the Correlation Id.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the solution logs.</p>"},{"location":"api/async/async_cw_client/","title":"Client","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>cw</code> Property on an instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.flows","title":"flows  <code>property</code>","text":"<pre><code>flows: _AsyncFlowClient</code></pre> <p>Access the Integration Flow APIs.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_connections","title":"get_connections  <code>async</code>","text":"<pre><code>get_connections() -&gt; list[Connection]</code></pre> <p>List all Connections available in CloudWorks.</p> <p>Returns:</p> Type Description <code>list[Connection]</code> <p>A list of connections.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_connection","title":"create_connection  <code>async</code>","text":"<pre><code>create_connection(con_info: ConnectionInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a new connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_info</code> <code>ConnectionInput | dict[str, Any]</code> <p>The connection information. This can be a ConnectionInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ConnectionInput model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new connection.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_connection","title":"update_connection  <code>async</code>","text":"<pre><code>update_connection(\n    con_id: str, con_info: ConnectionBody | dict[str, Any]\n) -&gt; None</code></pre> <p>Update an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to update.</p> required <code>con_info</code> <code>ConnectionBody | dict[str, Any]</code> <p>The name and details of the connection. You must pass all the same details as when initially creating the connection again. If you want to update only some of the details, use the <code>patch_connection</code> method instead.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.patch_connection","title":"patch_connection  <code>async</code>","text":"<pre><code>patch_connection(con_id: str, body: dict[str, Any]) -&gt; None</code></pre> <p>Update an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to update.</p> required <code>body</code> <code>dict[str, Any]</code> <p>The name and details of the connection. You can pass all the same details as when initially creating the connection again, or just any one of them.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_connection","title":"delete_connection  <code>async</code>","text":"<pre><code>delete_connection(con_id: str) -&gt; None</code></pre> <p>Delete an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to delete.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_integrations","title":"get_integrations  <code>async</code>","text":"<pre><code>get_integrations(\n    sort_by: Literal[\"name\"] | None = None, descending: bool = False\n) -&gt; list[Integration]</code></pre> <p>List all integrations in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Integration]</code> <p>A list of integrations.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_integration","title":"get_integration  <code>async</code>","text":"<pre><code>get_integration(integration_id: str) -&gt; SingleIntegration</code></pre> <p>Get the details of a specific integration in CloudWorks.</p> <p>Note: This will not include the integration type! While present when listing integrations, the integration type is not included in the details of a single integration.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to retrieve.</p> required <p>Returns:</p> Type Description <code>SingleIntegration</code> <p>The details of the integration, without the integration type.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_integration","title":"create_integration  <code>async</code>","text":"<pre><code>create_integration(\n    body: IntegrationInput | IntegrationProcessInput | dict[str, Any],\n) -&gt; str</code></pre> <p>Create a new integration in CloudWorks. If not specified, the integration type will be either \"Import\" or \"Export\" based on the source and target you provide.</p> <p>If you want to instead create a process Integration, you can do so by specifying the <code>process_id</code> parameter and passing several jobs. Be careful to ensure, that all ids specified in the job inputs match what is defined in your model and matches the process. If this is not the case, this will error, occasionally with a misleading error message, i.e. <code>XYZ is not defined in your model</code> even though it is, Anaplan just does not know what to do with it in the location you specified.</p> <p>You can also use CloudWorks Integrations to simply schedule a process. To do this, you can simply pass an IntegrationProcessInput instance with the process_id and no jobs. This will create a process integration that will run the process you specified.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>IntegrationInput | IntegrationProcessInput | dict[str, Any]</code> <p>The integration information. This can be an IntegrationInput | IntegrationProcessInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the IntegrationInput model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new integration.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_integration","title":"update_integration  <code>async</code>","text":"<pre><code>update_integration(\n    integration_id: str,\n    body: IntegrationInput | IntegrationProcessInput | dict[str, Any],\n) -&gt; None</code></pre> <p>Update an existing integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to update.</p> required <code>body</code> <code>IntegrationInput | IntegrationProcessInput | dict[str, Any]</code> <p>The name and details of the integration. You must pass all the same details as when initially creating the integration again. If you want to update only some of the details, use the <code>patch_integration</code> method instead.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.run_integration","title":"run_integration  <code>async</code>","text":"<pre><code>run_integration(integration_id: str) -&gt; str</code></pre> <p>Run an integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to run.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the run instance.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_integration","title":"delete_integration  <code>async</code>","text":"<pre><code>delete_integration(integration_id: str) -&gt; None</code></pre> <p>Delete an existing integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to delete.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_history","title":"get_run_history  <code>async</code>","text":"<pre><code>get_run_history(integration_id: str) -&gt; list[RunSummary]</code></pre> <p>Get the run history of a specific integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to retrieve the run history for.</p> required <p>Returns:</p> Type Description <code>list[RunSummary]</code> <p>A list of run statuses.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_status","title":"get_run_status  <code>async</code>","text":"<pre><code>get_run_status(run_id: str) -&gt; RunStatus</code></pre> <p>Get the status of a specific run in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>RunStatus</code> <p>The details of the run.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_error","title":"get_run_error  <code>async</code>","text":"<pre><code>get_run_error(run_id: str) -&gt; RunError | None</code></pre> <p>Get the error details of a specific run in CloudWorks. This exposes potential underlying errors like the error of the invoked action, failure dumps and other details.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>RunError | None</code> <p>The details of the run error.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_schedule","title":"create_schedule  <code>async</code>","text":"<pre><code>create_schedule(\n    integration_id: str, schedule: ScheduleInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Schedule an integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>schedule</code> <code>ScheduleInput | dict[str, Any]</code> <p>The schedule information. This can be a ScheduleInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ScheduleInput model before sending the request.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_schedule","title":"update_schedule  <code>async</code>","text":"<pre><code>update_schedule(\n    integration_id: str, schedule: ScheduleInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Update an integration Schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>schedule</code> <code>ScheduleInput | dict[str, Any]</code> <p>The schedule information. This can be a ScheduleInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ScheduleInput model before sending the request.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.set_schedule_status","title":"set_schedule_status  <code>async</code>","text":"<pre><code>set_schedule_status(\n    integration_id: str, status: Literal[\"enabled\", \"disabled\"]\n) -&gt; None</code></pre> <p>Set the status of an integration schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>status</code> <code>Literal['enabled', 'disabled']</code> <p>The status of the schedule. This can be either \"enabled\" or \"disabled\".</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_schedule","title":"delete_schedule  <code>async</code>","text":"<pre><code>delete_schedule(integration_id: str) -&gt; None</code></pre> <p>Delete an integration schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_notification_config","title":"get_notification_config  <code>async</code>","text":"<pre><code>get_notification_config(\n    notification_id: str | None = None, integration_id: str | None = None\n) -&gt; NotificationConfig</code></pre> <p>Get the notification configuration, either by its Id, or the notification configuration for a specific integration. If the integration_id is specified, the notification_id will be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str | None</code> <p>The ID of the notification configuration to retrieve.</p> <code>None</code> <code>integration_id</code> <code>str | None</code> <p>The ID of the integration to retrieve the notification configuration for.</p> <code>None</code> <p>Returns:</p> Type Description <code>NotificationConfig</code> <p>The details of the notification configuration.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_notification_config","title":"create_notification_config  <code>async</code>","text":"<pre><code>create_notification_config(config: NotificationInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a notification configuration for an integration in CloudWorks. This will error if there is already a notification configuration for the integration, which is also the case by default. In this case, you will want to use the <code>update_notification_config</code> method instead, to partially update the existing configuration or overwrite it.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>NotificationInput | dict[str, Any]</code> <p>The notification configuration. This can be a NotificationInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the NotificationConfig model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new notification configuration.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_notification_config","title":"update_notification_config  <code>async</code>","text":"<pre><code>update_notification_config(\n    notification_id: str, config: NotificationInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Update a notification configuration for an integration in CloudWorks. You cannot pass empty values or nulls to any of the fields If you want to for e.g. override  an existing list of users with an empty one, you must delete the notification configuration and create a new one with only the values you want to keep.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The ID of the notification configuration to update.</p> required <code>config</code> <code>NotificationInput | dict[str, Any]</code> <p>The notification configuration. This can be a NotificationInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the NotificationConfig model before sending the request.</p> required"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_notification_config","title":"delete_notification_config  <code>async</code>","text":"<pre><code>delete_notification_config(\n    notification_id: str | None = None, integration_id: str | None = None\n) -&gt; None</code></pre> <p>Delete a notification configuration for an integration in CloudWorks, either by its Id, or the notification configuration for a specific integration. If the integration_id is specified, the notification_id will be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str | None</code> <p>The ID of the notification configuration to delete.</p> <code>None</code> <code>integration_id</code> <code>str | None</code> <p>The ID of the integration to delete the notification config of.</p> <code>None</code>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_import_error_dump","title":"get_import_error_dump  <code>async</code>","text":"<pre><code>get_import_error_dump(run_id: str) -&gt; bytes</code></pre> <p>Get the error dump of a specific import run in CloudWorks. Calling this for a run_id that did not generate any failure dumps will produce an error.</p> <p>Note that if you need the error dump of an action in a process, you must use the <code>get_process_error_dump</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The error dump.</p>"},{"location":"api/async/async_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_process_error_dump","title":"get_process_error_dump  <code>async</code>","text":"<pre><code>get_process_error_dump(run_id: str, action_id: int | str) -&gt; bytes</code></pre> <p>Get the error dump of a specific import run in CloudWorks, that is part of a process. Calling this for a run_id that did not generate any failure dumps will produce an error.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <code>action_id</code> <code>int | str</code> <p>The ID of the action to retrieve. This can be found in the RunError.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The error dump.</p>"},{"location":"api/async/async_flows_client/","title":"Flows","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>cw.flows</code> Property on an instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.get_flows","title":"get_flows  <code>async</code>","text":"<pre><code>get_flows(current_user_only: bool = False) -&gt; list[FlowSummary]</code></pre> <p>List all flows in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>current_user_only</code> <code>bool</code> <p>Filters the flows to only those created by the current user.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[FlowSummary]</code> <p>A list of FlowSummaries.</p>"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.get_flow","title":"get_flow  <code>async</code>","text":"<pre><code>get_flow(flow_id: str) -&gt; Flow</code></pre> <p>Get a flow by its ID. This returns the full flow object, including the contained steps and continuation behavior.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to get.</p> required <p>Returns:</p> Type Description <code>Flow</code> <p>The Flow object.</p>"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.run_flow","title":"run_flow  <code>async</code>","text":"<pre><code>run_flow(flow_id: str, only_steps: list[str] = None) -&gt; str</code></pre> <p>Run a flow by its ID. Make sure that neither the flow nor any of its contained are running. If this is the case, the task will error. Anaplan neither schedules these tasks nor can it handle concurrent executions.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to run.</p> required <code>only_steps</code> <code>list[str]</code> <p>A list of step IDs to run. If not provided, only these will be run.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The ID of the run.</p>"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.create_flow","title":"create_flow  <code>async</code>","text":"<pre><code>create_flow(flow: FlowInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a new flow in CloudWorks. Be careful not to omit the <code>depends_on</code> field. Anaplan will accept these values, but an invalid, corrupted flow will be created, as all Flows must have at least 2 Steps, and they must always be sequential</p> <p>Parameters:</p> Name Type Description Default <code>flow</code> <code>FlowInput | dict[str, Any]</code> <p>The flow to create. This can be a FlowInput object or a dictionary.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the created flow.</p>"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.update_flow","title":"update_flow  <code>async</code>","text":"<pre><code>update_flow(flow_id: str, flow: FlowInput | dict[str, Any]) -&gt; None</code></pre> <p>Update a flow in CloudWorks. You must provide the full flow object, partial updates are not supported.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to update.</p> required <code>flow</code> <code>FlowInput | dict[str, Any]</code> <p>The flow to update. This can be a FlowInput object or a dictionary.</p> required"},{"location":"api/async/async_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.delete_flow","title":"delete_flow  <code>async</code>","text":"<pre><code>delete_flow(flow_id: str) -&gt; None</code></pre> <p>Delete a flow in CloudWorks. This will not delete its contained steps. This will fail if the flow is running or if it has any running steps.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to delete.</p> required"},{"location":"api/async/async_oauth_client/","title":"AsyncOauth","text":"<p>Asynchronous Variant of the Anaplan OAuth client for interactive OAuth Flows in Web Applications.</p>"},{"location":"api/async/async_oauth_client/#anaplan_sdk._oauth.AsyncOauth.__init__","title":"__init__","text":"<pre><code>__init__(\n    client_id: str,\n    client_secret: str,\n    redirect_uri: str,\n    authorization_url: str = \"https://us1a.app.anaplan.com/auth/prelogin\",\n    token_url: str = \"https://us1a.app.anaplan.com/oauth/token\",\n    validation_url: str = \"https://auth.anaplan.com/token/validate\",\n    scope: str = \"openid profile email offline_access\",\n    state_generator: Callable[[], str] | None = None,\n)</code></pre> <p>Initializes the OAuth Client. This class provides the two utilities needed to implement the OAuth 2.0 authorization code flow for user-facing Web Applications. It differs from the other Authentication Strategies in this SDK in two main ways:</p> <ol> <li> <p>You must implement the actual authentication flow in your application. You cannot pass the credentials directly to the <code>Client</code> or <code>AsyncClient</code>, and this class does not implement the SDK internal authentication flow, i.e. it does not subclass <code>httpx.Auth</code>.</p> </li> <li> <p>You then simply pass the resulting token to the <code>Client</code> or <code>AsyncClient</code>, rather than passing the credentials directly, which will internally construct an <code>httpx.Auth</code> instance</p> </li> </ol> <p>Note that this class exist for convenience only, and you can implement the OAuth 2.0 Flow yourself in your preferred library, or bring an existing implementation. For details on the Anaplan OAuth 2.0 Flow, see the the Docs.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID of your Anaplan Oauth 2.0 application. This Application must be an Authorization Code Grant application.</p> required <code>client_secret</code> <code>str</code> <p>The client secret of your Anaplan Oauth 2.0 application.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL to which the user will be redirected after authorizing the application.</p> required <code>authorization_url</code> <code>str</code> <p>The URL to which the user will be redirected to authorize the application. Defaults to the Anaplan Prelogin Page, where the user can select the login method.</p> <code>'https://us1a.app.anaplan.com/auth/prelogin'</code> <code>token_url</code> <code>str</code> <p>The URL to post the authorization code to in order to fetch the access token.</p> <code>'https://us1a.app.anaplan.com/oauth/token'</code> <code>validation_url</code> <code>str</code> <p>The URL to validate the access token.</p> <code>'https://auth.anaplan.com/token/validate'</code> <code>scope</code> <code>str</code> <p>The scope of the access request.</p> <code>'openid profile email offline_access'</code> <code>state_generator</code> <code>Callable[[], str] | None</code> <p>A callable that generates a random state string. You can optionally pass this if you need to customize the state generation logic. If not provided, the state will be generated by <code>oauthlib</code>.</p> <code>None</code>"},{"location":"api/async/async_oauth_client/#anaplan_sdk._oauth.AsyncOauth.authorization_url","title":"authorization_url","text":"<pre><code>authorization_url(\n    authorization_url: str | None = None, state: str | None = None\n) -&gt; tuple[str, str]</code></pre> <p>Generates the authorization URL for the OAuth 2.0 flow.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_url</code> <code>str | None</code> <p>You can optionally pass a custom authorization URL. This is useful if you want to redirect i.e. redirect the user directly to the Anaplan login page rather than the Prelogin page in only one scenario, while still reusing the Client.</p> <code>None</code> <code>state</code> <code>str | None</code> <p>You can optionally pass a custom state string. If not provided, a random state string will be generated by the <code>oauthlib</code> library, or by the <code>state_generator</code> callable if provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>A tuple containing the authorization URL and the state string.</p>"},{"location":"api/async/async_oauth_client/#anaplan_sdk._oauth.AsyncOauth.fetch_token","title":"fetch_token  <code>async</code>","text":"<pre><code>fetch_token(authorization_response: str) -&gt; dict[str, str | int]</code></pre> <p>Fetches the token using the authorization response from the OAuth 2.0 flow.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_response</code> <code>str</code> <p>The full URL that the user was redirected to after authorizing the application. This URL will contain the authorization code and state.</p> required <p>Returns:</p> Type Description <code>dict[str, str | int]</code> <p>The token as a dictionary containing the access token, refresh token, scope, expires_in, and type.</p>"},{"location":"api/async/async_scim_client/","title":"SCIM","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>scim</code> Property on an instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.get_service_provider_config","title":"get_service_provider_config  <code>async</code>","text":"<pre><code>get_service_provider_config() -&gt; ServiceProviderConfig</code></pre> <p>Get the SCIM Service Provider Configuration.</p> <p>Returns:</p> Type Description <code>ServiceProviderConfig</code> <p>The ServiceProviderConfig object describing the available SCIM features.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.get_resource_types","title":"get_resource_types  <code>async</code>","text":"<pre><code>get_resource_types() -&gt; list[Resource]</code></pre> <p>Get the SCIM Resource Types.</p> <p>Returns:</p> Type Description <code>list[Resource]</code> <p>A list of Resource objects describing the SCIM resource types.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.get_resource_schemas","title":"get_resource_schemas  <code>async</code>","text":"<pre><code>get_resource_schemas() -&gt; list[Schema]</code></pre> <p>Get the SCIM Resource Schemas.</p> <p>Returns:</p> Type Description <code>list[Schema]</code> <p>A list of Schema objects describing the SCIM resource schemas.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.get_users","title":"get_users  <code>async</code>","text":"<pre><code>get_users(predicate: str | field = None, page_size: int = 100) -&gt; list[User]</code></pre> <p>Get a list of users, optionally filtered by a predicate. Keep in mind that this will only return internal users. To get a list of all users in the tenant, use the <code>get_users()</code> in the <code>audit</code> namespace instead.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>str | field</code> <p>A filter predicate to filter the users. This can either be a string, in which case it will be passed as-is, or an expression. Anaplan supports filtering on the following fields: \"id\", \"externalId\", \"userName\", \"name.familyName\", \"name.givenName\" and \"active\". It supports the operators \"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\" and \"pr\". It supports logical operators \"and\" and \"or\", \"not\" is not supported. It supports grouping with parentheses.</p> <code>None</code> <code>page_size</code> <code>int</code> <p>The number of users to fetch per page. Values above 100 will error.</p> <code>100</code> <p>Returns:</p> Type Description <code>list[User]</code> <p>The internal users optionally matching the filter.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_id: str) -&gt; User</code></pre> <p>Get a user by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The ID of the user to fetch.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The User object.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.add_user","title":"add_user  <code>async</code>","text":"<pre><code>add_user(user: UserInput | dict[str, Any]) -&gt; User</code></pre> <p>Add a new user to your Anaplan tenant.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserInput | dict[str, Any]</code> <p>The user info to add. Can either be a UserInput object or a dict. If you pass a dict, it will be validated against the UserInput model before sending. If the info you provided is invalid or incomplete, this will raise a pydantic.ValidationError.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The created User object.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.replace_user","title":"replace_user  <code>async</code>","text":"<pre><code>replace_user(user_id: str, user: ReplaceUserInput | dict[str, Any])</code></pre> <p>Replace an existing user with new information. Note that this will replace all fields of the</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>ID of the user to replace.</p> required <code>user</code> <code>ReplaceUserInput | dict[str, Any]</code> <p>The new user info. Can either be a ReplaceUserInput object or a dict. If you pass a dict, it will be validated against the ReplaceUserInput model before sending. If the info you provided is invalid or incomplete, this will raise a pydantic.ValidationError.</p> required <p>Returns:</p> Type Description <p>The updated User object.</p>"},{"location":"api/async/async_scim_client/#anaplan_sdk._async_clients._scim._AsyncScimClient.update_user","title":"update_user  <code>async</code>","text":"<pre><code>update_user(\n    user_id: str, operations: list[Operation] | list[dict[str, Any]]\n) -&gt; User</code></pre> <p>Update an existing user with a list of operations. This allows you to update only specific fields of the user without replacing the entire user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The ID of the user to update.</p> required <code>operations</code> <code>list[Operation] | list[dict[str, Any]]</code> <p>A list of operations to perform on the user. Each operation can either be an Operation object or a dict. If you pass a dict, it will be validated against the Operation model before sending. If the operation is invalid, this will raise a pydantic.ValidationError. You can also use the models Replace, Add and Remove which are subclasses of Operation and provide a more convenient way to create operations.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The updated User object.</p>"},{"location":"api/async/async_transactional_client/","title":"Transactional","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>tr</code> Property on an  instance of AsyncClient. For more details, see the Guide.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_model_details","title":"get_model_details  <code>async</code>","text":"<pre><code>get_model_details() -&gt; Model</code></pre> <p>Retrieves the Model details for the current Model.</p> <p>Returns:</p> Type Description <code>Model</code> <p>The Model details.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_model_status","title":"get_model_status  <code>async</code>","text":"<pre><code>get_model_status() -&gt; ModelStatus</code></pre> <p>Gets the current status of the Model.</p> <p>Returns:</p> Type Description <code>ModelStatus</code> <p>The current status of the Model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.wake_model","title":"wake_model  <code>async</code>","text":"<pre><code>wake_model() -&gt; None</code></pre> <p>Wake up the current model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.close_model","title":"close_model  <code>async</code>","text":"<pre><code>close_model() -&gt; None</code></pre> <p>Close the current model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_modules","title":"get_modules  <code>async</code>","text":"<pre><code>get_modules(sort_by: SortBy = None, descending: bool = False) -&gt; list[Module]</code></pre> <p>Lists all the Modules in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Module]</code> <p>The List of Modules.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_views","title":"get_views  <code>async</code>","text":"<pre><code>get_views(\n    sort_by: Literal[\"id\", \"module_id\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[View]</code></pre> <p>Lists all the Views in the Model. This will include all Modules and potentially other saved views.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['id', 'module_id', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[View]</code> <p>The List of Views.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_view_info","title":"get_view_info  <code>async</code>","text":"<pre><code>get_view_info(view_id: int) -&gt; ViewInfo</code></pre> <p>Gets the detailed information about a View.</p> <p>Parameters:</p> Name Type Description Default <code>view_id</code> <code>int</code> <p>The ID of the View.</p> required <p>Returns:</p> Type Description <code>ViewInfo</code> <p>The information about the View.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_line_items","title":"get_line_items  <code>async</code>","text":"<pre><code>get_line_items(only_module_id: int | None = None) -&gt; list[LineItem]</code></pre> <p>Lists all the Line Items in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>only_module_id</code> <code>int | None</code> <p>If provided, only Line Items from this Module will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[LineItem]</code> <p>All Line Items on this Model or only from the specified Module.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_lists","title":"get_lists  <code>async</code>","text":"<pre><code>get_lists(sort_by: SortBy = None, descending: bool = False) -&gt; list[List]</code></pre> <p>Lists all the Lists in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[List]</code> <p>All Lists on this model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_list_metadata","title":"get_list_metadata  <code>async</code>","text":"<pre><code>get_list_metadata(list_id: int) -&gt; ListMetadata</code></pre> <p>Gets the metadata for a List.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <p>Returns:</p> Type Description <code>ListMetadata</code> <p>The metadata for the List.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_list_items","title":"get_list_items  <code>async</code>","text":"<pre><code>get_list_items(\n    list_id: int, return_raw: Literal[False] = False\n) -&gt; list[ListItem]</code></pre><pre><code>get_list_items(\n    list_id: int, return_raw: Literal[True] = True\n) -&gt; list[dict[str, Any]]</code></pre> <pre><code>get_list_items(\n    list_id: int, return_raw: bool = False\n) -&gt; list[ListItem] | list[dict[str, Any]]</code></pre> <p>Gets all the items in a List.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>return_raw</code> <code>bool</code> <p>If True, returns the items as a list of dictionaries instead of ListItem objects. If you use the result of this call in a DataFrame or you simply pass on the data, you will want to set this to avoid unnecessary (de-)serialization.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[ListItem] | list[dict[str, Any]]</code> <p>All items in the List.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.insert_list_items","title":"insert_list_items  <code>async</code>","text":"<pre><code>insert_list_items(\n    list_id: int, items: list[dict[str, str | int | dict]]\n) -&gt; InsertionResult</code></pre> <p>Insert new items to the given list. The items must be a list of dictionaries with at least the keys <code>code</code> and <code>name</code>. You can optionally pass further keys for parents, extra properties etc. If you pass a long list, it will be split into chunks of 100,000 items, the maximum allowed by the API.</p> <p>Warning: If one or some of the requests timeout during large batch operations, the operation may actually complete on the server. Retries for these chunks will then report these items as \"ignored\" rather than \"added\", leading to misleading results. The results in Anaplan will be correct, but this function may report otherwise. Be generous with your timeouts and retries if you are using this function for large batch operations.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>items</code> <code>list[dict[str, str | int | dict]]</code> <p>The items to insert into the List.</p> required <p>Returns:</p> Type Description <code>InsertionResult</code> <p>The result of the insertion, indicating how many items were added, ignored or failed.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.delete_list_items","title":"delete_list_items  <code>async</code>","text":"<pre><code>delete_list_items(\n    list_id: int, items: list[dict[str, str | int]]\n) -&gt; ListDeletionResult</code></pre> <p>Deletes items from a List. If you pass a long list, it will be split into chunks of 100,000 items, the maximum allowed by the API.</p> <p>Warning: If one or some of the requests timeout during large batch operations, the operation may actually complete on the server. Retries for these chunks will then report none of these items as deleted, since on the retry none are removed, leading to misleading results. The results in Anaplan will be correct, but this function may report otherwise. Be generous with your timeouts and retries if you are using this function for large batch operations.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>items</code> <code>list[dict[str, str | int]]</code> <p>The items to delete from the List. Must be a dict with either <code>code</code> or <code>id</code> as the keys to identify the records to delete. Specifying both will error.</p> required <p>Returns:</p> Type Description <code>ListDeletionResult</code> <p>The result of the deletion, indicating how many items were deleted or failed.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.reset_list_index","title":"reset_list_index  <code>async</code>","text":"<pre><code>reset_list_index(list_id: int) -&gt; None</code></pre> <p>Resets the index of a List. The List must be empty to do so.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.update_module_data","title":"update_module_data  <code>async</code>","text":"<pre><code>update_module_data(\n    module_id: int, data: list[dict[str, Any]]\n) -&gt; int | dict[str, Any]</code></pre> <p>Write the passed items to the specified module. If successful, the number of cells changed is returned, if only partially successful or unsuccessful, the response with the according details is returned instead.</p> <p>You can update a maximum of 100,000 cells or 15 MB of data (whichever is lower) in a single request. You must chunk your data accordingly. This is not done by this SDK, since it is discouraged. For larger imports, you should use the Bulk API instead.</p> <p>For more details see: https://anaplan.docs.apiary.io/#UpdateModuleCellData.</p> <p>Parameters:</p> Name Type Description Default <code>module_id</code> <code>int</code> <p>The ID of the Module.</p> required <code>data</code> <code>list[dict[str, Any]]</code> <p>The data to write to the Module.</p> required <p>Returns:</p> Type Description <code>int | dict[str, Any]</code> <p>The number of cells changed or the response with the according error details.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_current_period","title":"get_current_period  <code>async</code>","text":"<pre><code>get_current_period() -&gt; CurrentPeriod</code></pre> <p>Gets the current period of the model.</p> <p>Returns:</p> Type Description <code>CurrentPeriod</code> <p>The current period of the model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.set_current_period","title":"set_current_period  <code>async</code>","text":"<pre><code>set_current_period(date: str) -&gt; CurrentPeriod</code></pre> <p>Sets the current period of the model to the given date.</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str</code> <p>The date to set the current period to, in the format 'YYYY-MM-DD'.</p> required <p>Returns:</p> Type Description <code>CurrentPeriod</code> <p>The updated current period of the model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.set_current_fiscal_year","title":"set_current_fiscal_year  <code>async</code>","text":"<pre><code>set_current_fiscal_year(year: str) -&gt; FiscalYear</code></pre> <p>Sets the current fiscal year of the model.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>str</code> <p>The fiscal year to set, in the format specified in the model, e.g. FY24.</p> required <p>Returns:</p> Type Description <code>FiscalYear</code> <p>The updated fiscal year of the model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_model_calendar","title":"get_model_calendar  <code>async</code>","text":"<pre><code>get_model_calendar() -&gt; ModelCalendar</code></pre> <p>Get the calendar settings of the model.</p> <p>Returns:</p> Type Description <code>ModelCalendar</code> <p>The calendar settings of the model.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_dimension_items","title":"get_dimension_items  <code>async</code>","text":"<pre><code>get_dimension_items(dimension_id: int) -&gt; list[DimensionWithCode]</code></pre> <p>Get all items in a dimension. This will fail if the dimensions holds more than 1_000_000 items. Valid Dimensions are:</p> <ul> <li>Lists (101xxxxxxxxx)</li> <li>List Subsets (109xxxxxxxxx)</li> <li>Line Item Subsets (114xxxxxxxxx)</li> <li>Users (101999999999) For lists and users, you should prefer using the <code>get_list_items</code> and <code>get_users</code> methods, respectively, instead.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>dimension_id</code> <code>int</code> <p>The ID of the dimension to list items for.</p> required <p>Returns:</p> Type Description <code>list[DimensionWithCode]</code> <p>A list of Dimension items.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.lookup_dimension_items","title":"lookup_dimension_items  <code>async</code>","text":"<pre><code>lookup_dimension_items(\n    dimension_id: int, codes: list[str] = None, names: list[str] = None\n) -&gt; list[DimensionWithCode]</code></pre> <p>Looks up items in a dimension by their codes or names. If both are provided, both will be searched for. You must provide at least one of <code>codes</code> or <code>names</code>. Valid Dimensions to lookup are:</p> <ul> <li>Lists (101xxxxxxxxx)</li> <li>Time (20000000003)</li> <li>Version (20000000020)</li> <li>Users (101999999999)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>dimension_id</code> <code>int</code> <p>The ID of the dimension to lookup items for.</p> required <code>codes</code> <code>list[str]</code> <p>A list of codes to lookup in the dimension.</p> <code>None</code> <code>names</code> <code>list[str]</code> <p>A list of names to lookup in the dimension.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DimensionWithCode]</code> <p>A list of Dimension items that match the provided codes or names.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_view_dimension_items","title":"get_view_dimension_items  <code>async</code>","text":"<pre><code>get_view_dimension_items(view_id: int, dimension_id: int) -&gt; list[Dimension]</code></pre> <p>Get the members of a dimension that are part of the given View. This call returns data as filtered by the page builder when they configure the view. This call respects hidden items, filtering selections, and Selective Access. If the view contains hidden or filtered items, these do not display in the response. This will fail if the dimensions holds more than 1_000_000 items. The response returns Items within a flat list (no hierarchy) and order is not guaranteed.</p> <p>Parameters:</p> Name Type Description Default <code>view_id</code> <code>int</code> <p>The ID of the View.</p> required <code>dimension_id</code> <code>int</code> <p>The ID of the Dimension to get items for.</p> required <p>Returns:</p> Type Description <code>list[Dimension]</code> <p>A list of Dimensions used in the View.</p>"},{"location":"api/async/async_transactional_client/#anaplan_sdk._async_clients._AsyncTransactionalClient.get_line_item_dimensions","title":"get_line_item_dimensions  <code>async</code>","text":"<pre><code>get_line_item_dimensions(line_item_id: int) -&gt; list[Dimension]</code></pre> <p>Get the dimensions of a Line Item. This will return all dimensions that are used in the Line Item.</p> <p>Parameters:</p> Name Type Description Default <code>line_item_id</code> <code>int</code> <p>The ID of the Line Item.</p> required <p>Returns:</p> Type Description <code>list[Dimension]</code> <p>A list of Dimensions used in the Line Item.</p>"},{"location":"api/models/alm/","title":"ALM","text":""},{"location":"api/models/alm/#anaplan_sdk.models._alm.Revision","title":"Revision","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this revision.</p> required <code>name</code> <code>str</code> <p>The name of this revision.</p> required <code>description</code> <code>str | None</code> <p>The description of this revision. Not always present.</p> <code>None</code> <code>created_on</code> <code>str</code> <p>The creation date of this revision in ISO format.</p> required <code>created_by</code> <code>str</code> <p>The unique identifier of the user who created this revision.</p> required <code>creation_method</code> <code>str</code> <p>The creation method of this revision.</p> required <code>applied_on</code> <code>str</code> <p>The application date of this revision in ISO format.</p> required <code>applied_by</code> <code>str</code> <p>The unique identifier of the user who applied this revision.</p> required"},{"location":"api/models/alm/#anaplan_sdk.models._alm.ModelRevision","title":"ModelRevision","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of the model this revision belongs to.</p> required <code>name</code> <code>str</code> <p>The name of the model this revision belongs to. This can be an empty string, when the calling user does not have access to the model, but is workspace admin in the workspace.</p> <code>''</code> <code>workspace_id</code> <code>str | None</code> <p>The unique identifier of the workspace this revision belongs to.</p> <code>None</code> <code>applied_by</code> <code>str</code> <p>The unique identifier of the user who applied this revision.</p> required <code>applied_on</code> <code>str</code> <p>The application date of this revision in ISO format.</p> required <code>applied_method</code> <code>str</code> <p>The application method of this revision.</p> required <code>deleted</code> <code>bool | None</code> <p>Whether the model has been deleted or not.</p> <code>None</code>"},{"location":"api/models/alm/#anaplan_sdk.models._alm.SyncTaskResult","title":"SyncTaskResult","text":"<p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>successful</code> <code>bool</code> <p>Whether the sync task was successful or not.</p> required"},{"location":"api/models/alm/#anaplan_sdk.models._alm.SyncTask","title":"SyncTask","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this task.</p> required <code>task_state</code> <code>Literal[NOT_STARTED, IN_PROGRESS, COMPLETE]</code> <p>The state of this task.</p> required <code>creation_time</code> <code>int</code> <p>Unix timestamp of when this task was created.</p> required <code>current_step</code> <code>str</code> <p>The current step of the sync task.</p> required <code>result</code> <code>SyncTaskResult | None</code> <p>The result of the sync task.</p> <code>None</code>"},{"location":"api/models/alm/#anaplan_sdk.models._alm.ReportTaskResult","title":"ReportTaskResult","text":"<p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>successful</code> <code>bool</code> <p>Whether the sync task was successful or not.</p> required <code>report_file_url</code> <code>str</code> <p>The URL of the report file generated by the sync task.</p> required"},{"location":"api/models/alm/#anaplan_sdk.models._alm.ReportTaskError","title":"ReportTaskError","text":"<p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the error.</p> required <code>message</code> <code>str</code> <p>The message of the error.</p> required"},{"location":"api/models/alm/#anaplan_sdk.models._alm.ReportTaskFailureResult","title":"ReportTaskFailureResult","text":"<p>Parameters:</p> Name Type Description Default <code>successful</code> <code>bool</code> <p>Whether the sync task was successful or not.</p> required <code>error</code> <code>ReportTaskError</code> <p>The error that occurred during the sync task.</p> required"},{"location":"api/models/alm/#anaplan_sdk.models._alm.ReportTask","title":"ReportTask","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this task.</p> required <code>task_state</code> <code>Literal[NOT_STARTED, IN_PROGRESS, COMPLETE]</code> <p>The state of this task.</p> required <code>creation_time</code> <code>int</code> <p>Unix timestamp of when this task was created.</p> required <code>current_step</code> <code>str</code> <p>The current step of the sync task.</p> required <code>result</code> <code>ReportTaskResult | ReportTaskFailureResult | None</code> <p>The result of the comparison report task, including the report file URL.</p> <code>None</code>"},{"location":"api/models/alm/#anaplan_sdk.models._alm.SummaryTotals","title":"SummaryTotals","text":"<p>Parameters:</p> Name Type Description Default <code>modified</code> <code>int</code> <p>The number of modified items.</p> <code>0</code> <code>deleted</code> <code>int</code> <p>The number of deleted items.</p> <code>0</code> <code>created</code> <code>int</code> <p>The number of created items.</p> <code>0</code>"},{"location":"api/models/alm/#anaplan_sdk.models._alm.SummaryDifferences","title":"SummaryDifferences","text":"<p>Parameters:</p> Name Type Description Default <code>line_items</code> <code>SummaryTotals</code> <p>Changes in line items.</p> <code>SummaryTotals(modified=0, deleted=0, created=0)</code> <code>roles_contents</code> <code>SummaryTotals</code> <p>Changes in roles contents.</p> <code>SummaryTotals(modified=0, deleted=0, created=0)</code> <code>lists</code> <code>SummaryTotals</code> <p>Changes in lists.</p> <code>SummaryTotals(modified=0, deleted=0, created=0)</code> <code>modules</code> <code>SummaryTotals</code> <p>Changes in modules.</p> <code>SummaryTotals(modified=0, deleted=0, created=0)</code>"},{"location":"api/models/alm/#anaplan_sdk.models._alm.SummaryReport","title":"SummaryReport","text":"<p>Parameters:</p> Name Type Description Default <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>totals</code> <code>SummaryTotals</code> <p>The total counts of changes.</p> required <code>differences</code> <code>SummaryDifferences</code> <p>The detailed breakdown of changes by category.</p> required"},{"location":"api/models/bulk/","title":"Bulk","text":""},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Workspace","title":"Workspace","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this workspace.</p> required <code>name</code> <code>str</code> <p>The name of this workspace that is also displayed to the users.</p> required <code>active</code> <code>bool</code> <p>Whether this workspace is active or not.</p> required <code>size_allowance</code> <code>int</code> <p>The maximum allowed size of this workspace in bytes.</p> required <code>current_size</code> <code>int</code> <p>The current size of this workspace in bytes.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Model","title":"Model","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this model.</p> required <code>name</code> <code>str</code> required <code>active_state</code> <code>Literal['ARCHIVED', 'UNLOCKED', 'ACTIVE', 'PRODUCTION', 'MAINTENANCE', 'PRODUCTION_MAINTENANCE']</code> <p>The current state of this model.</p> required <code>last_saved_serial_number</code> <code>int</code> <p>The serial number of the last save of this model.</p> required <code>last_modified_by_user_guid</code> <code>str</code> <p>The unique identifier of the user who last modified this model.</p> required <code>memory_usage</code> <code>int</code> <p>The memory usage of this model in bytes.</p> <code>0</code> <code>workspace_id</code> <code>str</code> <p>The unique identifier of the workspace that this model is currently in.</p> required <code>workspace_name</code> <code>str</code> <p>The name of the workspace that this model is currently in.</p> required <code>url</code> <code>str</code> <p>The current URL of this model.</p> required <code>category_values</code> <code>list</code> <p>The category values of this model.</p> required <code>iso_creation_date</code> <code>str</code> <p>The creation date of this model in ISO format.</p> required <code>last_modified</code> <code>str</code> <p>The last modified date of this model.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.ModelWithTransactionInfo","title":"ModelWithTransactionInfo","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this model.</p> required <code>name</code> <code>str</code> required <code>active_state</code> <code>Literal['ARCHIVED', 'UNLOCKED', 'ACTIVE', 'PRODUCTION', 'MAINTENANCE', 'PRODUCTION_MAINTENANCE']</code> <p>The current state of this model.</p> required <code>last_saved_serial_number</code> <code>int</code> <p>The serial number of the last save of this model.</p> required <code>last_modified_by_user_guid</code> <code>str</code> <p>The unique identifier of the user who last modified this model.</p> required <code>memory_usage</code> <code>int</code> <p>The memory usage of this model in bytes.</p> <code>0</code> <code>workspace_id</code> <code>str</code> <p>The unique identifier of the workspace that this model is currently in.</p> required <code>workspace_name</code> <code>str</code> <p>The name of the workspace that this model is currently in.</p> required <code>url</code> <code>str</code> <p>The current URL of this model.</p> required <code>category_values</code> <code>list</code> <p>The category values of this model.</p> required <code>iso_creation_date</code> <code>str</code> <p>The creation date of this model in ISO format.</p> required <code>last_modified</code> <code>str</code> <p>The last modified date of this model.</p> required <code>model_transaction_running</code> <code>bool</code> <p>Whether a transaction is currently running on this model.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.File","title":"File","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this file.</p> required <code>name</code> <code>str</code> <p>The name of this file.</p> required <code>chunk_count</code> <code>int</code> <p>The number of chunks this file is split into.</p> required <code>delimiter</code> <code>str | None</code> <p>The delimiter used in this file.</p> <code>None</code> <code>encoding</code> <code>str | None</code> <p>The encoding of this file.</p> <code>None</code> <code>first_data_row</code> <code>int</code> <p>The row number of the first data row in this file.</p> required <code>format</code> <code>str | None</code> <p>The format of this file.</p> <code>None</code> <code>header_row</code> <code>int</code> <p>The row number of the header row in this file.</p> required <code>separator</code> <code>str | None</code> <p>The separator used in this file.</p> <code>None</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.List","title":"List","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this list.</p> required <code>name</code> <code>str</code> <p>The name of this list.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.ListMetadata","title":"ListMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this list.</p> required <code>name</code> <code>str</code> <p>The name of this list.</p> required <code>has_selective_access</code> <code>bool</code> <p>Whether this list has selective access or not.</p> required <code>properties</code> <code>list</code> <p>The properties of this list.</p> <code>[]</code> <code>production_data</code> <code>bool</code> <p>Whether this list is production data or not.</p> required <code>managed_by</code> <code>str</code> <p>The user who manages this list.</p> required <code>numbered_list</code> <code>bool</code> <p>Whether this list is a numbered list or not.</p> required <code>use_top_level_as_page_default</code> <code>bool</code> <p>Whether the top level is used as the page default or not.</p> required <code>item_count</code> <code>int</code> <p>The number of items in this list.</p> required <code>next_item_index</code> <code>int | None</code> <p>The index of the next item in this list.</p> <code>None</code> <code>workflow_enabled</code> <code>bool</code> <p>Whether the workflow is enabled for this list or not.</p> required <code>permitted_items</code> <code>int</code> <p>The number of permitted items in this list.</p> required <code>used_in_applies_to</code> <code>str | None</code> <p>The applies to value of this list.</p> <code>None</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Action","title":"Action","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this action.</p> required <code>name</code> <code>str</code> <p>The name of this Action. This is the same as the one displayed in the Web UI.</p> required <code>type</code> <code>str | None</code> <p>The type of this action.</p> <code>None</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Process","title":"Process","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this process.</p> required <code>name</code> <code>str</code> <p>The name of this process.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Import","title":"Import","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this import.</p> required <code>name</code> <code>str</code> <p>The name of this import.</p> required <code>type</code> <code>Literal['MODULE_DATA', 'HIERARCHY_DATA', 'LINE_ITEM_DEFINITION', 'USERS', 'VERSIONS']</code> <p>The type of this import.</p> required <code>file_id</code> <code>int | None</code> <p>The unique identifier of the data source of this import. If it is absent, it means that the import does not read from any file.</p> <code>None</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.Export","title":"Export","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this export.</p> required <code>name</code> <code>str</code> <p>The name of this export.</p> required <code>type</code> <code>Literal['TABULAR_MULTI_COLUMN', 'TABULAR_SINGLE_COLUMN', 'GRID_CURRENT_PAGE', 'AUDIT_LOG', 'TABULAR_ALL_LINE_ITEMS', 'TABULAR_CURRENT_LINE_ITEM']</code> <p>The type of this export.</p> required <code>format</code> <code>str</code> <p>The format of this export.</p> required <code>encoding</code> <code>str | None</code> <p>The encoding of this export.</p> <code>None</code> <code>layout</code> <code>Literal['TABULAR_MULTI_COLUMN', 'TABULAR_SINGLE_COLUMN', 'GRID_CURRENT_PAGE', 'AUDIT_LOG', 'TABULAR_ALL_LINE_ITEMS', 'TABULAR_CURRENT_LINE_ITEM']</code> <p>The layout of this export, representing the Anaplan Export Structure.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.TaskSummary","title":"TaskSummary","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this task.</p> required <code>task_state</code> <code>Literal['NOT_STARTED', 'IN_PROGRESS', 'COMPLETE']</code> <p>The state of this task.</p> required <code>creation_time</code> <code>int</code> <p>Unix timestamp of when this task was created.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.TaskResultDetail","title":"TaskResultDetail","text":"<p>Parameters:</p> Name Type Description Default <code>local_message_text</code> <code>str | None</code> <p>Error message text.</p> <code>None</code> <code>occurrences</code> <code>int</code> <p>The number of occurrences of this error.</p> <code>0</code> <code>type</code> <code>str</code> <p>The type of this error.</p> required <code>values</code> <code>list[Optional[str]]</code> <p>Further error information if available.</p> <code>[]</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.TaskResult","title":"TaskResult","text":"<p>Parameters:</p> Name Type Description Default <code>details</code> <code>list[TaskResultDetail]</code> <p>The details of this task result if available.</p> <code>[]</code> <code>successful</code> <code>bool</code> <p>Whether this task completed successfully or not.</p> required <code>failure_dump_available</code> <code>bool</code> <p>Whether this task completed successfully or not.</p> required <code>nested_results</code> <code>list[TaskResult]</code> <p>The nested results of this task, if available.</p> <code>[]</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.TaskStatus","title":"TaskStatus","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this task.</p> required <code>task_state</code> <code>Literal['NOT_STARTED', 'IN_PROGRESS', 'COMPLETE']</code> <p>The state of this task.</p> required <code>creation_time</code> <code>int</code> <p>Unix timestamp of when this task was created.</p> required <code>progress</code> <code>float</code> <p>The progress of this task as a float between 0 and 1.</p> required <code>current_step</code> <code>str | None</code> <p>The current step of this task.</p> <code>None</code> <code>result</code> <code>TaskResult | None</code> <code>None</code>"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.DeletionFailure","title":"DeletionFailure","text":"<p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The unique identifier of the model that failed to delete.</p> required <code>message</code> <code>str</code> <p>The error message explaining why the deletion failed.</p> required"},{"location":"api/models/bulk/#anaplan_sdk.models._bulk.ModelDeletionResult","title":"ModelDeletionResult","text":"<p>Parameters:</p> Name Type Description Default <code>models_deleted</code> <code>int</code> <p>The number of models that were successfully deleted.</p> required <code>failures</code> <code>list[DeletionFailure]</code> <p>List of models that failed to delete with their error messages.</p> <code>[]</code>"},{"location":"api/models/cloud_works/","title":"CloudWorks","text":""},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.BaseConnectionInput","title":"BaseConnectionInput","text":"<p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>If you are a restricted integration user, add the Workspace ID to which you have access in the payload.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AzureBlobConnectionInfo","title":"AzureBlobConnectionInfo","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the Azure Blob connection.</p> required <code>storage_account_name</code> <code>str</code> <p>The name of the Azure Storage account.</p> required <code>container_name</code> <code>str</code> <p>The name of the Azure Blob container.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AzureBlobConnectionInput","title":"AzureBlobConnectionInput","text":"<p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>If you are a restricted integration user, add the Workspace ID to which you have access in the payload.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the Azure Blob connection.</p> required <code>storage_account_name</code> <code>str</code> <p>The name of the Azure Storage account.</p> required <code>container_name</code> <code>str</code> <p>The name of the Azure Blob container.</p> required <code>sas_token</code> <code>str</code> <p>The SAS token for the Azure Blob connection. Must be created on the container directly and not on any child blobs and have at least 'Read' and 'List' permissions.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AmazonS3ConnectionInfo","title":"AmazonS3ConnectionInfo","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the Amazon S3 connection.</p> required <code>bucket_name</code> <code>str</code> <p>The name of the Amazon S3 bucket.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AmazonS3ConnectionInput","title":"AmazonS3ConnectionInput","text":"<p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>If you are a restricted integration user, add the Workspace ID to which you have access in the payload.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the Amazon S3 connection.</p> required <code>bucket_name</code> <code>str</code> <p>The name of the Amazon S3 bucket.</p> required <code>access_key_id</code> <code>str</code> <p>The access key ID for the Amazon S3 connection.</p> required <code>secret_access_key</code> <code>str</code> <p>The secret access key for the Amazon S3 connection.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.GoogleBigQueryConnectionInfo","title":"GoogleBigQueryConnectionInfo","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the Google BigQuery connection.</p> required <code>dataset</code> <code>str</code> <p>The ID of the Google BigQuery dataset.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.GoogleBigQueryConnectionInput","title":"GoogleBigQueryConnectionInput","text":"<p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>If you are a restricted integration user, add the Workspace ID to which you have access in the payload.</p> <code>None</code> <code>name</code> <code>str</code> <p>The name of the Google BigQuery connection.</p> required <code>dataset</code> <code>str</code> <p>The ID of the Google BigQuery dataset.</p> required <code>service_account_json</code> <code>dict[str, str]</code> <p>The entire service account JSON for the Google BigQuery connection.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.ConnectionInput","title":"ConnectionInput","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['AmazonS3', 'AzureBlob', 'GoogleBigQuery']</code> <p>The type of this connection.</p> required <code>body</code> <code>AzureBlobConnectionInput | AmazonS3ConnectionInput | GoogleBigQueryConnectionInput</code> <p>Connection information.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.Connection","title":"Connection","text":"<p>Parameters:</p> Name Type Description Default <code>creation_date</code> <code>datetime</code> <p>The initial creation date.</p> required <code>modification_date</code> <code>datetime</code> <p>The last modification date. If never modified, this is equal to creation_date.</p> required <code>created_by</code> <code>str</code> <p>The user who created this.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this.</p> required <code>id</code> <code>str</code> <p>The unique identifier of this connection.</p> required <code>connection_type</code> <code>Literal['AmazonS3', 'AzureBlob', 'GoogleBigQuery']</code> <p>The type of this connection.</p> required <code>body</code> <code>AzureBlobConnectionInfo | AmazonS3ConnectionInfo | GoogleBigQueryConnectionInfo</code> <p>Connection information.</p> required <code>status</code> <code>int</code> <p>The status of this connection. 1 indicates a valid connection, 0 indicates an invalid connection.</p> required <code>integration_error_code</code> <code>str | None</code> <p>The error code of the connection, if any.</p> required <code>workspace_id</code> <code>str | None</code> <p>The workspace that was given when creating this connection.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.LatestRun","title":"LatestRun","text":"<p>Parameters:</p> Name Type Description Default <code>triggered_by</code> <code>str</code> <p>The user who triggered this run.</p> required <code>start_date</code> <code>datetime</code> <p>The start timestamp of this run.</p> required <code>end_date</code> <code>datetime | None</code> <p>The end timestamp of this run. This can be None, if the integration is currently running.</p> <code>None</code> <code>success</code> <code>bool</code> <p>Whether this run was successful.</p> required <code>message</code> <code>str</code> <p>Result message of this run.</p> required <code>execution_error_code</code> <code>int | None</code> <p>Error code if run failed.</p> <code>None</code> <code>trigger_source</code> <code>str | None</code> <p>Source that triggered the run.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.ScheduleBase","title":"ScheduleBase","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the schedule.</p> required <code>type</code> <code>Literal['hourly', 'daily', 'weekly', 'monthly_specific_day', 'monthly_relative_weekday']</code> <p>Trigger Frequency</p> required <code>timezone</code> <code>Literal['Etc/GMT+12', 'US/Samoa', 'Pacific/Honolulu', 'Pacific/Marquesas', 'US/Aleutian', 'America/Anchorage', 'America/Los_Angeles', 'America/Denver', 'America/Chicago', 'America/New_York', 'America/Sao_Paulo', 'Canada/Newfoundland', 'America/Nuuk', 'Atlantic/Cape_Verde', 'Greenwich', 'Europe/London', 'Europe/Paris', 'Asia/Tel_Aviv', 'Europe/Moscow', 'Asia/Dubai', 'Asia/Kabul', 'Asia/Karachi', 'Asia/Kolkata', 'Asia/Kathmandu', 'Asia/Dhaka', 'Asia/Rangoon', 'Asia/Jakarta', 'Asia/Hong_Kong', 'Australia/Eucla', 'Asia/Tokyo', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Lord_Howe', 'Pacific/Norfolk', 'Pacific/Auckland', 'Pacific/Chatham']</code> <p>Timezone for the schedule.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.ScheduleInput","title":"ScheduleInput","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the schedule.</p> required <code>type</code> <code>Literal['hourly', 'daily', 'weekly', 'monthly_specific_day', 'monthly_relative_weekday']</code> <p>Trigger Frequency</p> required <code>timezone</code> <code>Literal['Etc/GMT+12', 'US/Samoa', 'Pacific/Honolulu', 'Pacific/Marquesas', 'US/Aleutian', 'America/Anchorage', 'America/Los_Angeles', 'America/Denver', 'America/Chicago', 'America/New_York', 'America/Sao_Paulo', 'Canada/Newfoundland', 'America/Nuuk', 'Atlantic/Cape_Verde', 'Greenwich', 'Europe/London', 'Europe/Paris', 'Asia/Tel_Aviv', 'Europe/Moscow', 'Asia/Dubai', 'Asia/Kabul', 'Asia/Karachi', 'Asia/Kolkata', 'Asia/Kathmandu', 'Asia/Dhaka', 'Asia/Rangoon', 'Asia/Jakarta', 'Asia/Hong_Kong', 'Australia/Eucla', 'Asia/Tokyo', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Lord_Howe', 'Pacific/Norfolk', 'Pacific/Auckland', 'Pacific/Chatham']</code> <p>Timezone for the schedule.</p> required <code>time</code> <code>str | None</code> <p>Time for scheduled runs in HH:mm format.</p> <code>None</code> <code>from_time</code> <code>str | None</code> <p>Time for scheduled runs in HH:mm format, if type is hourly.</p> <code>None</code> <code>to_time</code> <code>str | None</code> <p>Time for scheduled runs in HH:mm format, if type is hourly.</p> <code>None</code> <code>days_of_week</code> <code>list[int]</code> <p>Days of week when schedule is active.</p> required <code>start_date</code> <code>str</code> <p>Start date for the schedule in YYYY-MM-DD format. Must be in the Future, i.e. current day, if the <code>time</code> is greater than the current time or any future date.</p> required <code>end_date</code> <code>str | None</code> <p>End date for the schedule in YYYY-MM-DD format. Must be in the Future, i.e. current day, if the <code>time</code> is greater than the current time or any future date. Can also be omitted to create a schedule that runs indefinitely.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.Schedule","title":"Schedule","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the schedule.</p> required <code>type</code> <code>Literal['hourly', 'daily', 'weekly', 'monthly_specific_day', 'monthly_relative_weekday']</code> <p>Trigger Frequency</p> required <code>timezone</code> <code>Literal['Etc/GMT+12', 'US/Samoa', 'Pacific/Honolulu', 'Pacific/Marquesas', 'US/Aleutian', 'America/Anchorage', 'America/Los_Angeles', 'America/Denver', 'America/Chicago', 'America/New_York', 'America/Sao_Paulo', 'Canada/Newfoundland', 'America/Nuuk', 'Atlantic/Cape_Verde', 'Greenwich', 'Europe/London', 'Europe/Paris', 'Asia/Tel_Aviv', 'Europe/Moscow', 'Asia/Dubai', 'Asia/Kabul', 'Asia/Karachi', 'Asia/Kolkata', 'Asia/Kathmandu', 'Asia/Dhaka', 'Asia/Rangoon', 'Asia/Jakarta', 'Asia/Hong_Kong', 'Australia/Eucla', 'Asia/Tokyo', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Melbourne', 'Australia/Perth', 'Australia/Lord_Howe', 'Pacific/Norfolk', 'Pacific/Auckland', 'Pacific/Chatham']</code> <p>Timezone for the schedule.</p> required <code>time</code> <code>str | None</code> <p>Time for scheduled runs in HH:mm format.</p> <code>None</code> <code>to_time</code> <code>str | None</code> <p>End time for scheduled runs.</p> <code>None</code> <code>from_time</code> <code>str | None</code> <p>Start time for scheduled runs.</p> <code>None</code> <code>start_date</code> <code>datetime</code> <p>Start date of the schedule.</p> required <code>end_date</code> <code>datetime | None</code> <p>End date of the schedule, if set.</p> <code>None</code> <code>days_of_week</code> <code>list[int]</code> <p>Days of week when schedule is active.</p> <code>[]</code> <code>repeat_every</code> <code>int | None</code> <p>Frequency of repetition.</p> <code>None</code> <code>status</code> <code>str</code> <p>Current status of the schedule.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.Integration","title":"Integration","text":"<p>Parameters:</p> Name Type Description Default <code>creation_date</code> <code>datetime</code> <p>The initial creation date.</p> required <code>modification_date</code> <code>datetime</code> <p>The last modification date. If never modified, this is equal to creation_date.</p> required <code>created_by</code> <code>str</code> <p>The user who created this integration.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this.</p> required <code>name</code> <code>str</code> <p>The name of this integration.</p> required <code>notification_id</code> <code>str | None</code> <p>The ID of the associated notification configuration, if any.</p> <code>None</code> <code>latest_run</code> <code>LatestRun | None</code> <p>Details about the latest execution, if any.</p> <code>None</code> <code>id</code> <code>str</code> <p>The unique identifier of this integration.</p> required <code>integration_type</code> <code>Literal['Import', 'Export', 'Process']</code> <p>The type of this integration.</p> required <code>model_id</code> <code>str</code> <p>The ID of the model this integration belongs to.</p> required <code>workspace_id</code> <code>str</code> <p>The ID of the workspace this integration belongs to.</p> required <code>nux_visible</code> <code>bool</code> <p>Whether this integration is visible in the UI.</p> required <code>process_id</code> <code>int | None</code> <p>The ID of the process (for Process type).</p> <code>None</code> <code>schedule</code> <code>Schedule | None</code> <p>Schedule configuration if defined.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AnaplanSource","title":"AnaplanSource","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['Anaplan']</code> <p>Literal signifying this is an Anaplan source.</p> <code>'Anaplan'</code> <code>action_id</code> <code>int</code> <p>The ID of the action to be used as a source. This can be a process, or export.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.FileSourceInput","title":"FileSourceInput","text":"<p>Parameters:</p> Name Type Description Default <code>connection_id</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>type</code> <code>Literal['AmazonS3', 'AzureBlob']</code> <p>The type of this connection.</p> required <code>file</code> <code>str</code> <p>The file path relative to the root of the connection.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.FileSource","title":"FileSource","text":"<p>Parameters:</p> Name Type Description Default <code>connection_id</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>type</code> <code>Literal['AmazonS3', 'AzureBlob']</code> <p>The type of this connection.</p> required <code>file</code> <code>str</code> <p>The file path relative to the root of the connection.</p> required <code>connection_name</code> <code>str</code> <p>The name of the connection.</p> required <code>is_connection_deleted</code> <code>bool</code> <p>Whether the connection has been deleted.</p> required <code>bucket_name</code> <code>str | None</code> <p>The name of the bucket, if applicable.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.TableSource","title":"TableSource","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['GoogleBigQuery']</code> <p>The type of this connection.</p> <code>'GoogleBigQuery'</code> <code>connection_id</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>table</code> <code>str</code> <p>The table name in the BigQuery dataset in the connection.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.FileTarget","title":"FileTarget","text":"<p>Parameters:</p> Name Type Description Default <code>connection_id</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>type</code> <code>Literal['AmazonS3', 'AzureBlob']</code> <p>The type of this connection.</p> required <code>file</code> <code>str</code> <p>The file path relative to the root of the connection.</p> required <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the file if it exists.</p> <code>True</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.TableTarget","title":"TableTarget","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['GoogleBigQuery']</code> <p>The type of this connection.</p> <code>'GoogleBigQuery'</code> <code>connection_id</code> <code>str</code> <p>The unique identifier of the connection.</p> required <code>table</code> <code>str</code> <p>The table name in the BigQuery dataset in the connection.</p> required <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the table if it exists.</p> <code>False</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.AnaplanTarget","title":"AnaplanTarget","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['Anaplan']</code> <p>Literal signifying this is an Anaplan target.</p> <code>'Anaplan'</code> <code>action_id</code> <code>int</code> <p>The ID of the action to be used as a target. This can be a process, or import.</p> required <code>file_id</code> <code>int</code> <p>The ID of the file to be used as a target.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.IntegrationJob","title":"IntegrationJob","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['AmazonS3ToAnaplan', 'AzureBlobToAnaplan', 'GoogleBigQueryToAnaplan', 'AnaplanToAmazonS3', 'AnaplanToAzureBlob', 'AnaplanToGoogleBigQuery']</code> <p>The type of this integration.</p> required <code>sources</code> <code>list[Union[AnaplanSource, FileSource, TableSource]]</code> <p>The source of this job.</p> required <code>targets</code> <code>list[Union[AnaplanTarget, FileTarget, TableTarget]]</code> <p>The target of this job.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.SingleIntegration","title":"SingleIntegration","text":"<p>Parameters:</p> Name Type Description Default <code>creation_date</code> <code>datetime</code> <p>The initial creation date.</p> required <code>modification_date</code> <code>datetime</code> <p>The last modification date. If never modified, this is equal to creation_date.</p> required <code>created_by</code> <code>str</code> <p>The user who created this integration.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this.</p> required <code>name</code> <code>str</code> <p>The name of this integration.</p> required <code>notification_id</code> <code>str | None</code> <p>The ID of the associated notification configuration, if any.</p> <code>None</code> <code>latest_run</code> <code>LatestRun | None</code> <p>Details about the latest execution, if any.</p> <code>None</code> <code>id</code> <code>str</code> <p>The unique identifier of this integration.</p> required <code>integration_type</code> <code>None</code> <p>Sentinel for erroneous implementation of the Anaplan API. This field is not provided when getting an individual integration by Id.</p> <code>None</code> <code>model_id</code> <code>str</code> <p>The ID of the model this integration belongs to.</p> required <code>workspace_id</code> <code>str</code> <p>The ID of the workspace this integration belongs to.</p> required <code>nux_visible</code> <code>bool</code> <p>Whether this integration is visible in the UI.</p> required <code>process_id</code> <code>int | None</code> <p>The ID of the process (for Process type).</p> <code>None</code> <code>schedule</code> <code>Schedule | None</code> <p>Schedule configuration if defined.</p> <code>None</code> <code>jobs</code> <code>list[IntegrationJob] | None</code> <p>The Integration Job details. The source and target can be switched according to convert imports and exports requirement.</p> <code>None</code>"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.IntegrationJobInput","title":"IntegrationJobInput","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['AmazonS3ToAnaplan', 'AzureBlobToAnaplan', 'GoogleBigQueryToAnaplan', 'AnaplanToAmazonS3', 'AnaplanToAzureBlob', 'AnaplanToGoogleBigQuery']</code> <p>The type of this integration.</p> required <code>sources</code> <code>list[Union[AnaplanSource, FileSourceInput, TableSource]]</code> <p>The sources of this integration.</p> required <code>targets</code> <code>list[Union[AnaplanTarget, FileTarget, TableTarget]]</code> <p>The targets of this integration.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.IntegrationProcessInput","title":"IntegrationProcessInput","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of this integration process.</p> required <code>version</code> <code>Literal['2.0']</code> <p>The version of this integration.</p> <code>'2.0'</code> <code>workspace_id</code> <code>str</code> <p>The ID of the workspace this integration belongs to.</p> required <code>model_id</code> <code>str</code> <p>The ID of the model this integration belongs to.</p> required <code>process_id</code> <code>int</code> <p>The ID of the process this integration belongs to.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.IntegrationInput","title":"IntegrationInput","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of this integration.</p> required <code>version</code> <code>Literal['2.0']</code> <p>The version of this integration.</p> <code>'2.0'</code> <code>workspace_id</code> <code>str</code> <p>The ID of the workspace this integration belongs to.</p> required <code>model_id</code> <code>str</code> <p>The ID of the model this integration belongs to.</p> required <code>process_id</code> <code>int | None</code> <p>If given, an integration process will be created, instead of an Import or Export</p> <code>None</code> <code>nux_visible</code> <code>bool</code> <p>Whether this integration is visible in the UI.</p> <code>False</code> <code>jobs</code> <code>list[IntegrationJobInput]</code> <p>The jobs in this integration.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.RunSummary","title":"RunSummary","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this run.</p> required <code>triggered_by</code> <code>str</code> required <code>last_run</code> <code>datetime</code> <p>Last Run timestamp.</p> required <code>start_date</code> <code>datetime</code> <p>Start timestamp.</p> required <code>end_date</code> <code>datetime | None</code> <p>The end timestamp of this run. This can be None, if the integration is currently running.</p> <code>None</code> <code>success</code> <code>bool</code> <p>Whether this run was successful.</p> required <code>message</code> <code>str</code> <p>Result message of this run.</p> required <code>execution_error_code</code> <code>int | None</code> <p>Error code if run failed.</p> <code>None</code> <code>trace_id</code> <code>str</code> <p>The trace ID for this run.</p> required <code>trigger_source</code> <code>Literal['manual', 'scheduled']</code> <p>Source that triggered the run.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.RunStatus","title":"RunStatus","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this run.</p> required <code>integration_id</code> <code>str</code> <p>The ID of the integration this run belongs to.</p> required <code>trace_id</code> <code>str</code> <p>The trace ID for this run.</p> required <code>start_date</code> <code>datetime</code> <p>The start timestamp of this run.</p> required <code>end_date</code> <code>datetime | None</code> <p>The end timestamp of this run. This can be None, if the integration is currently running.</p> <code>None</code> <code>success</code> <code>bool</code> <p>Whether this run was successful.</p> required <code>message</code> <code>str</code> <p>Result message of this run.</p> required <code>execution_error_code</code> <code>int | None</code> <p>Error code if run failed.</p> <code>None</code> <code>flow_group_id</code> <code>str | None</code> <p>The ID of the flow group, if any.</p> <code>None</code> <code>trigger_source</code> <code>Literal['manual', 'scheduled']</code> <p>Source that triggered the run.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.ErrorSummary","title":"ErrorSummary","text":"<p>Parameters:</p> Name Type Description Default <code>local_message_text</code> <code>str</code> <p>Error message text.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.ErrorMessage","title":"ErrorMessage","text":"<p>Parameters:</p> Name Type Description Default <code>error_message</code> <code>list[Union[TaskResultDetail, ErrorSummary]]</code> required <code>action_id</code> <code>str</code> <p>The ID of the action that failed.</p> required <code>action_name</code> <code>str</code> <p>The name of the action that failed.</p> required <code>failure_dump_generated</code> <code>bool</code> <p>Whether a failure dump was generated.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.RunError","title":"RunError","text":"<p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The Task ID of the invoked Anaplan Action.</p> required <code>error_messages</code> <code>list[ErrorMessage]</code> <p>The error messages of the run.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationUser","title":"NotificationUser","text":"<p>Parameters:</p> Name Type Description Default <code>user_guid</code> <code>str</code> <p>The unique identifier of the user.</p> required <code>first_name</code> <code>str</code> <p>The user's first name.</p> required <code>last_name</code> <code>str</code> <p>The user's last name.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationItem","title":"NotificationItem","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['success', 'partial_failure', 'full_failure']</code> <p>The type of notification event that triggers notifications.</p> required <code>users</code> <code>list[NotificationUser]</code> <p>The list of users who will receive this notification.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.Notification","title":"Notification","text":"<p>Parameters:</p> Name Type Description Default <code>config</code> <code>list[NotificationItem]</code> <p>The configuration for different notification types.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationConfig","title":"NotificationConfig","text":"<p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The unique identifier of this notification configuration.</p> required <code>integration_ids</code> <code>list[str]</code> <p>The IDs of the integrations associated with this notification.</p> required <code>channels</code> <code>list[Literal['email', 'in_app']]</code> <p>The channels through which notifications will be sent.</p> required <code>notifications</code> <code>Notification</code> <p>The detailed notification configuration settings.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationItemInput","title":"NotificationItemInput","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['success', 'partial_failure', 'full_failure']</code> <p>The type of notification event that triggers notifications.</p> required <code>users</code> <code>list[str]</code> <p>The list of user IDs who will receive this notification. Must not be empty. If you want nobody to receive notifications for this type, omit the entire config item. If you want to override an existing list of users with an empty one, you must delete the notification configuration and create a new one.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationConfigInput","title":"NotificationConfigInput","text":"<p>Parameters:</p> Name Type Description Default <code>config</code> <code>list[NotificationItemInput]</code> <p>The configuration for different notification types.</p> required"},{"location":"api/models/cloud_works/#anaplan_sdk.models.cloud_works.NotificationInput","title":"NotificationInput","text":"<p>Parameters:</p> Name Type Description Default <code>integration_ids</code> <code>list[str]</code> <p>The IDs of the integrations associated with this notification.</p> required <code>channels</code> <code>list[Literal['email', 'in_app']]</code> <p>The channels through which notifications will be sent.</p> required <code>notifications</code> <code>NotificationConfigInput</code> <p>The detailed notification configuration settings.</p> required"},{"location":"api/models/flows/","title":"Flows","text":""},{"location":"api/models/flows/#anaplan_sdk.models.flows.FlowSummary","title":"FlowSummary","text":"<p>Parameters:</p> Name Type Description Default <code>creation_date</code> <code>datetime</code> <p>The initial creation date.</p> required <code>modification_date</code> <code>datetime</code> <p>The last modification date. If never modified, this is equal to creation_date.</p> required <code>created_by</code> <code>str</code> <p>The user who created this integration.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this.</p> required <code>name</code> <code>str</code> <p>The name of this integration.</p> required <code>notification_id</code> <code>str | None</code> <p>The ID of the associated notification configuration, if any.</p> <code>None</code> <code>latest_run</code> <code>LatestRun | None</code> <p>Details about the latest execution, if any.</p> <code>None</code> <code>id</code> <code>str</code> <p>The unique identifier of this flow.</p> required <code>steps_count</code> <code>int</code> <p>The number of steps in this flow.</p> required"},{"location":"api/models/flows/#anaplan_sdk.models.flows.ExceptionBehavior","title":"ExceptionBehavior","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['failure', 'partial_success']</code> <p>The type of exception that this behavior applies to.</p> required <code>strategy</code> <code>Literal['stop', 'continue']</code> <p>The strategy to handle the exception.</p> required"},{"location":"api/models/flows/#anaplan_sdk.models.flows.FlowStep","title":"FlowStep","text":"<p>Parameters:</p> Name Type Description Default <code>referrer</code> <code>str</code> <p>The unique identifier of the referenced step or integration.</p> required <code>name</code> <code>str</code> <p>The name of this flow step.</p> required <code>type</code> <code>Literal['Process', 'Import', 'Export']</code> <p>The type of this flow step.</p> required <code>created_by</code> <code>str</code> <p>The user who created this step.</p> required <code>created_date</code> <code>datetime</code> <p>The initial creation date of this step.</p> required <code>modified_date</code> <code>datetime</code> <p>The last modification date of this step.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this step.</p> <code>None</code> <code>model_id</code> <code>str</code> <p>The ID of the model this step belongs to.</p> required <code>workspace_id</code> <code>str</code> <p>The ID of the workspace this step belongs to.</p> required <code>depends_on</code> <code>list[str] | None</code> <p>The IDs of steps that this step depends on.</p> <code>[]</code> <code>is_skipped</code> <code>bool</code> <p>Whether this step is skipped during execution.</p> required <code>exception_behavior</code> <code>list[ExceptionBehavior]</code> <p>Configuration for handling exceptions during step execution.</p> required"},{"location":"api/models/flows/#anaplan_sdk.models.flows.Flow","title":"Flow","text":"<p>Parameters:</p> Name Type Description Default <code>creation_date</code> <code>datetime</code> <p>The initial creation date.</p> required <code>modification_date</code> <code>datetime</code> <p>The last modification date. If never modified, this is equal to creation_date.</p> required <code>created_by</code> <code>str</code> <p>The user who created this integration.</p> required <code>modified_by</code> <code>str | None</code> <p>The user who last modified this.</p> required <code>name</code> <code>str</code> <p>The name of this integration.</p> required <code>notification_id</code> <code>str | None</code> <p>The ID of the associated notification configuration, if any.</p> <code>None</code> <code>latest_run</code> <code>LatestRun | None</code> <p>Details about the latest execution, if any.</p> <code>None</code> <code>id</code> <code>str</code> <p>The unique identifier of this flow.</p> required <code>steps_count</code> <code>int</code> <p>The number of steps in this flow.</p> required <code>version</code> <code>Literal['2.0']</code> <p>The version of this flow.</p> <code>'2.0'</code> <code>nux_visible</code> <code>bool</code> <p>Whether this integration is visible in the UI.</p> required <code>steps</code> <code>list[FlowStep]</code> <p>The steps in this flow.</p> <code>[]</code>"},{"location":"api/models/flows/#anaplan_sdk.models.flows.FlowStepInput","title":"FlowStepInput","text":"<p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['Integration']</code> <p>The type of this flow step.</p> <code>'Integration'</code> <code>referrer</code> <code>str</code> <p>The unique identifier of the referenced step or integration.</p> required <code>depends_on</code> <code>list[str] | None</code> <p>The IDs of steps that this step depends on.</p> <code>None</code> <code>is_skipped</code> <code>bool</code> <p>Whether this step is skipped during execution.</p> <code>False</code> <code>exception_behavior</code> <code>list[ExceptionBehavior]</code> <p>Configuration for handling exceptions during step execution. Defaults to stopping on Failure and continuing on Partial Success.</p> <code>[ExceptionBehavior(type='failure', strategy='stop'), ExceptionBehavior(type='partial_success', strategy='continue')]</code>"},{"location":"api/models/flows/#anaplan_sdk.models.flows.FlowInput","title":"FlowInput","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of this flow.</p> required <code>version</code> <code>Literal['2.0']</code> <p>The version of this flow.</p> <code>'2.0'</code> <code>type</code> <code>Literal['IntegrationFlow']</code> <p>The type of this flow.</p> <code>'IntegrationFlow'</code> <code>steps</code> <code>list[FlowStepInput]</code> <p>The steps in this flow.</p> required"},{"location":"api/models/scim/","title":"SCIM","text":""},{"location":"api/models/scim/#anaplan_sdk.models.scim.NameInput","title":"NameInput","text":"<p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The family name of the User, or last name in most Western languages</p> required <code>given_name</code> <code>str</code> <p>The given name of the User, or first name in most Western languages</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Name","title":"Name","text":"<p>Parameters:</p> Name Type Description Default <code>family_name</code> <code>str</code> <p>The family name of the User, or last name in most Western languages</p> required <code>given_name</code> <code>str</code> <p>The given name of the User, or first name in most Western languages</p> required <code>formatted</code> <code>str</code> <p>The formatted full name, including given name and family name. Anaplan does as of now not have other standard SCIM fields such as middle name or honorific pre- or suffixes.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Email","title":"Email","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Email address of the User</p> required <code>type</code> <code>Literal['work', 'home', 'other']</code> <p>A label indicating the emails's function, e.g., 'work' or 'home'</p> <code>None</code> <code>primary</code> <code>bool | None</code> <p>Indicates if this is the primary or 'preferred' email</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.EntitlementInput","title":"EntitlementInput","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value of an entitlement.</p> required <code>type</code> <code>Literal['WORKSPACE', 'WORKSPACE_IDS', 'WORKSPACE_NAMES']</code> <p>A label indicating the attribute's function.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Entitlement","title":"Entitlement","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value of an entitlement.</p> required <code>type</code> <code>Literal['WORKSPACE', 'WORKSPACE_IDS', 'WORKSPACE_NAMES']</code> <p>A label indicating the attribute's function.</p> required <code>display</code> <code>str | None</code> <p>A human-readable name, primarily used for display purposes.</p> <code>None</code> <code>primary</code> <code>bool | None</code> <p>Indicating the 'primary' or preferred attribute value for this attribute.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Meta","title":"Meta","text":"<p>Parameters:</p> Name Type Description Default <code>resource_type</code> <code>str</code> <p>The type of the resource.</p> required <code>location</code> <code>str</code> <p>The URI of the resource.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.MetaWithDates","title":"MetaWithDates","text":"<p>Parameters:</p> Name Type Description Default <code>resource_type</code> <code>str</code> <p>The type of the resource.</p> required <code>location</code> <code>str</code> <p>The URI of the resource.</p> required <code>created</code> <code>str</code> <p>The timestamp when the resource was created.</p> required <code>last_modified</code> <code>str</code> <p>The timestamp when the resource was last modified.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.User","title":"User","text":"<p>Parameters:</p> Name Type Description Default <code>schemas</code> <code>list[str]</code> <code>['urn:ietf:params:scim:schemas:core:2.0:User']</code> <code>user_name</code> <code>str</code> <p>Unique name for the User.</p> required <code>id</code> <code>str</code> <p>The unique identifier for the User.</p> required <code>name</code> <code>Name</code> <p>The user's real name.</p> required <code>active</code> <code>bool</code> <p>Indicating the User's active status.</p> required <code>emails</code> <code>list[Email]</code> <p>Email addresses for the user.</p> <code>[]</code> <code>display_name</code> <code>str</code> <p>Display Name for the User.</p> required <code>entitlements</code> <code>list[Entitlement]</code> <p>A list of entitlements (Workspaces) the User has.</p> <code>[]</code> <code>meta</code> <code>MetaWithDates</code> <p>Metadata about the resource.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.ReplaceUserInput","title":"ReplaceUserInput","text":"<p>Parameters:</p> Name Type Description Default <code>schemas</code> <code>list[str]</code> <code>['urn:ietf:params:scim:schemas:core:2.0:User']</code> <code>user_name</code> <code>str</code> <p>Unique name for the User.</p> required <code>id</code> <code>str</code> <p>The unique identifier for the User.</p> required <code>name</code> <code>NameInput</code> <p>The user's real name.</p> required <code>active</code> <code>bool | None</code> <p>Indicating the User's active status.</p> <code>None</code> <code>display_name</code> <code>str | None</code> <p>Display Name for the User.</p> <code>None</code> <code>entitlements</code> <code>list[EntitlementInput] | None</code> <p>A list of entitlements (Workspaces) the User has.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.UserInput","title":"UserInput","text":"<p>Parameters:</p> Name Type Description Default <code>schemas</code> <code>list[str]</code> <code>['urn:ietf:params:scim:schemas:core:2.0:User']</code> <code>user_name</code> <code>str</code> <p>Unique name for the User.</p> required <code>external_id</code> <code>str</code> <p>Your unique id for this user (as stored in your company systems).</p> required <code>name</code> <code>NameInput</code> <p>The user's real name.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Supported","title":"Supported","text":"<p>Parameters:</p> Name Type Description Default <code>supported</code> <code>bool</code> <p>Indicates whether the Feature is supported.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.BulkConfig","title":"BulkConfig","text":"<p>Parameters:</p> Name Type Description Default <code>supported</code> <code>bool</code> <p>Indicates whether the Feature is supported.</p> required <code>max_operations</code> <code>int</code> <p>The maximum number of operations permitted in a single request.</p> required <code>max_payload_size</code> <code>int</code> <p>The maximum payload size in bytes.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.FilterConfig","title":"FilterConfig","text":"<p>Parameters:</p> Name Type Description Default <code>supported</code> <code>bool</code> <p>Indicates whether the Feature is supported.</p> required <code>max_results</code> <code>int</code> <p>The maximum number of results returned from a filtered query.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.AuthenticationScheme","title":"AuthenticationScheme","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the authentication scheme.</p> required <code>type</code> <code>str</code> <p>The type of the authentication scheme.</p> required <code>description</code> <code>str</code> <p>A description of the authentication scheme.</p> required <code>spec_uri</code> <code>str</code> <p>The URI that points to the specification of the authentication scheme.</p> required <code>documentation_uri</code> <code>str</code> <p>The URI that points to the documentation of the authentication scheme.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.ServiceProviderConfig","title":"ServiceProviderConfig","text":"<p>Parameters:</p> Name Type Description Default <code>schemas</code> <code>list[str]</code> <p>Schemas for this resource.</p> <code>['urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig']</code> <code>meta</code> <code>MetaWithDates</code> <p>Metadata about the resource.</p> required <code>documentation_uri</code> <code>str</code> <p>URI of the service provider's documentation.</p> required <code>patch</code> <code>Supported</code> <p>Configuration for PATCH operations.</p> required <code>bulk</code> <code>BulkConfig</code> <p>Configuration for bulk operations.</p> required <code>filter</code> <code>FilterConfig</code> <p>Configuration for filtering.</p> required <code>change_password</code> <code>Supported</code> <p>Configuration for password changes.</p> required <code>sort</code> <code>Supported</code> <p>Configuration for sorting.</p> required <code>etag</code> <code>Supported</code> <p>Configuration for ETags.</p> required <code>authentication_schemes</code> <code>list[AuthenticationScheme]</code> <p>List of supported authentication schemes.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Resource","title":"Resource","text":"<p>Parameters:</p> Name Type Description Default <code>schemas</code> <code>list[str]</code> <p>Schemas for this resource.</p> <code>['urn:ietf:params:scim:schemas:core:2.0:ResourceType']</code> <code>meta</code> <code>Meta</code> <p>Metadata about the resource.</p> required <code>id</code> <code>str</code> <p>The identifier of the resource type.</p> required <code>name</code> <code>str</code> <p>The name of the resource type.</p> required <code>endpoint</code> <code>str</code> <p>The endpoint where resources of this type may be accessed.</p> required <code>description</code> <code>str</code> <p>A description of the resource type.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Attribute","title":"Attribute","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the attribute.</p> required <code>type</code> <code>str</code> <p>The data type of the attribute.</p> required <code>multi_valued</code> <code>bool</code> <p>Indicates if the attribute can have multiple values.</p> required <code>description</code> <code>str</code> <p>A human-readable description of the attribute.</p> required <code>required</code> <code>bool</code> <p>Indicates if the attribute is required.</p> required <code>case_exact</code> <code>bool</code> <p>Indicates if case sensitivity should be considered when comparing values.</p> required <code>mutability</code> <code>str</code> <p>Indicates if and how the attribute can be modified.</p> required <code>returned</code> <code>str</code> <p>Indicates when the attribute's values are returned in a response.</p> required <code>uniqueness</code> <code>str</code> <p>Indicates how uniqueness is enforced on the attribute value.</p> required <code>sub_attributes</code> <code>list[Attribute] | None</code> <p>A list of sub-attributes if the attribute is complex.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Schema","title":"Schema","text":"<p>Parameters:</p> Name Type Description Default <code>meta</code> <code>Meta</code> <p>Metadata about the schema resource.</p> required <code>id</code> <code>str</code> <p>The unique identifier for the schema.</p> required <code>name</code> <code>str</code> <p>The name of the schema.</p> required <code>description</code> <code>str</code> <p>A description of the schema.</p> required <code>attributes</code> <code>list[Attribute]</code> <p>A list of attributes that define the schema.</p> required"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Operation","title":"Operation","text":"<p>Parameters:</p> Name Type Description Default <code>op</code> <code>Literal['add', 'remove', 'replace']</code> <p>The operation to be performed.</p> required <code>path</code> <code>str</code> <p>A string containing a JSON-Pointer value that references a location within the target resource.</p> required <code>value</code> <code>Any | None</code> <p>The value to be used in the operation.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Replace","title":"Replace","text":"<p>Parameters:</p> Name Type Description Default <code>op</code> <code>Literal['replace']</code> <p>Replace the value at path with the new given value.</p> <code>'replace'</code> <code>path</code> <code>str</code> <p>A string containing a JSON-Pointer value that references a location within the target resource.</p> required <code>value</code> <code>Any | None</code> <p>The value to be used in the operation.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Add","title":"Add","text":"<p>Parameters:</p> Name Type Description Default <code>op</code> <code>Literal['add']</code> <p>Add the given value to the attribute at path.</p> <code>'add'</code> <code>path</code> <code>str</code> <p>A string containing a JSON-Pointer value that references a location within the target resource.</p> required <code>value</code> <code>Any | None</code> <p>The value to be used in the operation.</p> <code>None</code>"},{"location":"api/models/scim/#anaplan_sdk.models.scim.Remove","title":"Remove","text":"<p>Parameters:</p> Name Type Description Default <code>op</code> <code>Literal['remove']</code> <p>Remove the value at path.</p> <code>'remove'</code> <code>path</code> <code>str</code> <p>A string containing a JSON-Pointer value that references a location within the target resource.</p> required <code>value</code> <code>Any | None</code> <p>The value to be used in the operation.</p> <code>None</code>"},{"location":"api/models/transactional/","title":"Transactional","text":""},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.User","title":"User","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The unique identifier of this user.</p> required <code>active</code> <code>bool</code> <p>Whether this user is active or not.</p> required <code>email</code> <code>str</code> <p>The email address of this user.</p> required <code>email_opt_in</code> <code>bool</code> <p>Whether this user has opted in to receive emails or not.</p> required <code>first_name</code> <code>str</code> <p>The first name of this user.</p> required <code>last_name</code> <code>str</code> <p>The last name of this user.</p> required <code>last_login_date</code> <code>str | None</code> <p>The last login date of this user in ISO format.</p> <code>None</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.ListItem","title":"ListItem","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this list item.</p> required <code>name</code> <code>str</code> <p>The name of this list item.</p> required <code>code</code> <code>str | None</code> <p>The code of this list item.</p> <code>None</code> <code>properties</code> <code>dict</code> <p>The properties of this list item.</p> <code>{}</code> <code>subsets</code> <code>dict</code> <p>The subsets of this list item.</p> <code>{}</code> <code>parent</code> <code>str | None</code> <p>The parent of this list item.</p> <code>None</code> <code>parent_id</code> <code>str | None</code> <p>The unique identifier of the parent of this list item.</p> <code>None</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.Module","title":"Module","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this module.</p> required <code>name</code> <code>str</code> <p>The name of this module.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.Dimension","title":"Dimension","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this dimension.</p> required <code>name</code> <code>str</code> <p>The name of this dimension.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.DimensionWithCode","title":"DimensionWithCode","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this dimension.</p> required <code>name</code> <code>str</code> <p>The name of this dimension.</p> required <code>code</code> <code>str</code> <p>The code of this dimension.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.View","title":"View","text":"<p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code of this view.</p> required <code>id</code> <code>int</code> <p>The unique identifier of this view.</p> required <code>name</code> <code>str</code> <p>The name of this views.</p> required <code>moduleId</code> <code>int</code> <p>The unique identifier of the module this view belongs to.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.ViewInfo","title":"ViewInfo","text":"<p>Parameters:</p> Name Type Description Default <code>view_id</code> <code>int</code> <p>The unique identifier of this view.</p> required <code>view_name</code> <code>str</code> <p>The name of this view.</p> required <code>rows</code> <code>list[Dimension]</code> <p>The list of dimensions in the rows of this view.</p> <code>[]</code> <code>pages</code> <code>list[Dimension]</code> <p>The list of dimensions in the pages of this view.</p> <code>[]</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.PeriodType","title":"PeriodType","text":"<p>Parameters:</p> Name Type Description Default <code>entity_id</code> <code>Literal['YEAR', 'HALF_YEAR', 'MONTH', 'QUARTER', 'WEEK', 'DAY']</code> <p>The type of period entity.</p> required <code>entity_label</code> <code>Literal['Year', 'Half-Year', 'Month', 'Quarter', 'Week', 'Day']</code> <p>The type of period entity.</p> required <code>entity_index</code> <code>int</code> <p>The index of the period entity</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.EntityFormatFilter","title":"EntityFormatFilter","text":"<p>Parameters:</p> Name Type Description Default <code>source_line_item_or_property</code> <code>str</code> <p>The unique identifier of the source line item or property.</p> required <code>mapping_hierarchy</code> <code>str</code> <p>The unique identifier of the mapping hierarchy.</p> required <code>key_property</code> <code>str</code> <p>The unique identifier of the key property.</p> required <code>value_property</code> <code>str</code> <p>The unique identifier of the value property.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.TextMetadata","title":"TextMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['TEXT']</code> <p>The data type. Literal for the tagged union discriminator.</p> required <code>text_type</code> <code>Literal['DRILLTHRU_URI', 'EMAIL_ADDRESS', 'GENERAL']</code> <p>The text type.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.ListMetadata","title":"ListMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['ENTITY']</code> <p>The data type. Literal for the tagged union discriminator.</p> required <code>hierarchy_entity_id</code> <code>int</code> <p>The unique identifier of the hierarchy entity, like Lists or List Subsets.</p> required <code>selective_access_applied</code> <code>bool</code> <p>Whether selective access is applied or not.</p> required <code>show_all</code> <code>bool</code> <p>Whether to show all values or not.</p> required <code>entity_format_filter</code> <code>EntityFormatFilter | None</code> <p>Entity format filter configuration.</p> <code>None</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.TimePeriodMetadata","title":"TimePeriodMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['TIME_ENTITY']</code> <p>The data type. Literal for the tagged union discriminator.</p> required <code>period_type</code> <code>PeriodType</code> <p>The period type.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.NumberMetadata","title":"NumberMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['NUMBER']</code> <p>The data type. Literal for the tagged union discriminator.</p> required <code>comparison_increase</code> <code>Literal['GOOD', 'BAD', 'NEUTRAL'] | None</code> <p>The comparison increase setting.</p> required <code>custom_units</code> <code>str | None</code> <p>Custom units for display.</p> <code>None</code> <code>decimal_places</code> <code>int</code> <p>Number of decimal places.</p> required <code>decimal_separator</code> <code>Literal['COMMA', 'FULL_STOP']</code> <p>The decimal separator.</p> required <code>units_display_type</code> <code>Literal['CUSTOM_SUFFIX', 'CUSTOM_PREFIX', 'CURRENCY_CODE', 'CURRENCY_SYMBOL', 'PERCENTAGE_SUFFIX', 'NONE']</code> <p>Units display type.</p> required <code>units_type</code> <code>Literal['CUSTOM', 'CURRENCY', 'PERCENTAGE', 'NONE']</code> <p>Units type.</p> required <code>zero_format</code> <code>Literal['HYPHEN', 'ZERO', 'BLANK']</code> <p>Zero format display.</p> required <code>grouping_separator</code> <code>Literal['COMMA', 'FULL_STOP', 'SPACE', 'NONE']</code> <p>The grouping separator.</p> required <code>minimum_significant_digits</code> <code>int</code> <p>Minimum significant digits.</p> required <code>negative_number_notation</code> <code>Literal['MINUS_SIGN', 'PARENTHESES']</code> <p>Negative number notation.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.GenericTypeMetadata","title":"GenericTypeMetadata","text":"<p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>Literal['BOOLEAN', 'NONE', 'DATE']</code> <p>The data type.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.LineItem","title":"LineItem","text":"<p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The unique identifier of this line item.</p> required <code>name</code> <code>str</code> <p>The name of this line item.</p> required <code>module_id</code> <code>int</code> <p>The unique identifier of the module this line item belongs to.</p> required <code>module_name</code> <code>str</code> <p>The name of the module this line item belongs to.</p> required <code>format</code> <code>Literal['NUMBER', 'BOOLEAN', 'TEXT', 'NONE', 'DATE', 'LIST', 'TIME PERIOD']</code> <p>The format of this line item.</p> required <code>format_metadata</code> <code>NumberMetadata | ListMetadata | TimePeriodMetadata | TextMetadata | GenericTypeMetadata</code> <p>The format metadata of this line item. Each Type provides different metadata.</p> required <code>summary</code> <code>str</code> <p>The summary of this line item.</p> required <code>applies_to</code> <code>list[Dimension]</code> <p>The applies to value of this line item.</p> <code>[]</code> <code>data_tags</code> <code>list[Dimension]</code> <p>The data tags of this line item.</p> <code>[]</code> <code>referenced_by</code> <code>list[Dimension]</code> <p>List of references to this line item.</p> <code>[]</code> <code>time_scale</code> <code>str</code> <p>The time scale of this line item.</p> required <code>time_range</code> <code>str</code> <p>The time range of this line item.</p> required <code>version</code> <code>Dimension</code> <p>The version of this line item.</p> required <code>parent</code> <code>Dimension | None</code> <p>The Parent of this line item.</p> <code>None</code> <code>read_access_driver</code> <code>Dimension | None</code> <p>The read access driver of this line item.</p> <code>None</code> <code>write_access_driver</code> <code>Dimension | None</code> <p>The write access driver of this line item.</p> <code>None</code> <code>style</code> <code>str</code> <p>The style of this line item.</p> required <code>cell_count</code> <code>int | None</code> <p>The cell count of this line item.</p> <code>None</code> <code>notes</code> <code>str</code> <p>The notes of this line item.</p> required <code>code</code> <code>str | None</code> <p>The code of this line item.</p> <code>None</code> <code>is_summary</code> <code>bool</code> <p>Whether this line item is a summary or not.</p> required <code>formula</code> <code>str | None</code> <p>The formula of this line item.</p> <code>None</code> <code>formula_scope</code> <code>str</code> <p>The formula scope of this line item.</p> required <code>use_switchover</code> <code>bool</code> <p>Whether the switchover is used or not.</p> required <code>breakback</code> <code>bool</code> <p>Whether the breakback is enabled or not.</p> required <code>brought_forward</code> <code>bool</code> <p>Whether the brought forward is enabled or not.</p> required <code>start_of_section</code> <code>bool</code> <p>Whether this line item is the start of a section or not.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.Failure","title":"Failure","text":"<p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the item that failed.</p> required <code>reason</code> <code>str</code> <p>The reason for the failure.</p> required <code>details</code> <code>str</code> <p>The details of the failure.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.ModelStatus","title":"ModelStatus","text":"<p>Parameters:</p> Name Type Description Default <code>peak_memory_usage_estimate</code> <code>int | None</code> <p>The peak memory usage estimate of this model.</p> required <code>peak_memory_usage_time</code> <code>int | None</code> <p>The peak memory usage time of this model.</p> required <code>progress</code> <code>float</code> <p>The progress of this model.</p> required <code>current_step</code> <code>str</code> <p>The current step of this model.</p> required <code>tooltip</code> <code>str | None</code> <p>The tooltip of this model.</p> required <code>task_id</code> <code>str | None</code> <p>The unique identifier of the task of this model.</p> required <code>creation_time</code> <code>int</code> <p>The creation time of this model.</p> required <code>export_task_type</code> <code>str | None</code> <p>The export task type of this model.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.InsertionResult","title":"InsertionResult","text":"<p>Parameters:</p> Name Type Description Default <code>added</code> <code>int</code> <p>The number of items successfully added.</p> required <code>ignored</code> <code>int</code> <p>The number of items ignored, or items that failed.</p> required <code>total</code> <code>int</code> <p>The total number of items.</p> required <code>failures</code> <code>list[Failure]</code> <p>The list of failures.</p> <code>[]</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.ListDeletionResult","title":"ListDeletionResult","text":"<p>Parameters:</p> Name Type Description Default <code>deleted</code> <code>int</code> <p>The number of items successfully deleted.</p> required <code>failures</code> <code>list[Failure]</code> <p>The list of failures.</p> <code>[]</code>"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.PartialCurrentPeriod","title":"PartialCurrentPeriod","text":"<p>Parameters:</p> Name Type Description Default <code>period_text</code> <code>str</code> <p>The text representation of the current period.</p> required <code>last_day</code> <code>str</code> <p>The last day of the current period in YYYY-MM-DD format.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.CurrentPeriod","title":"CurrentPeriod","text":"<p>Parameters:</p> Name Type Description Default <code>period_text</code> <code>str</code> <p>The text representation of the current period.</p> required <code>last_day</code> <code>str</code> <p>The last day of the current period in YYYY-MM-DD format.</p> required <code>calendar_type</code> <code>str</code> <p>The type of calendar used for the current period.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.FiscalYear","title":"FiscalYear","text":"<p>Parameters:</p> Name Type Description Default <code>year</code> <code>str</code> <p>The fiscal year in the format set in the model, e.g. FY24.</p> required <code>start_date</code> <code>str</code> <p>The start date of the fiscal year in YYYY-MM-DD format.</p> required <code>end_date</code> <code>str</code> <p>The end date of the fiscal year in YYYY-MM-DD format.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.TotalsSelection","title":"TotalsSelection","text":"<p>Parameters:</p> Name Type Description Default <code>quarter_totals</code> <code>bool</code> <p>Whether quarter totals are enabled.</p> required <code>half_year_totals</code> <code>bool</code> <p>Whether half year totals are enabled.</p> required <code>year_to_date_summary</code> <code>bool</code> <p>Whether year to date summary is enabled.</p> required <code>year_to_go_summary</code> <code>bool</code> <p>Whether year to go summary is enabled.</p> required <code>total_of_all_periods</code> <code>bool</code> <p>Whether total of all periods is enabled.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.TotalsSelectionWithQuarter","title":"TotalsSelectionWithQuarter","text":"<p>Parameters:</p> Name Type Description Default <code>quarter_totals</code> <code>bool</code> <p>Whether quarter totals are enabled.</p> required <code>half_year_totals</code> <code>bool</code> <p>Whether half year totals are enabled.</p> required <code>year_to_date_summary</code> <code>bool</code> <p>Whether year to date summary is enabled.</p> required <code>year_to_go_summary</code> <code>bool</code> <p>Whether year to go summary is enabled.</p> required <code>total_of_all_periods</code> <code>bool</code> <p>Whether total of all periods is enabled.</p> required <code>extra_month_quarter</code> <code>Literal[1, 2, 3, 4]</code> <p>The quarter in which the extra month is included.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.BaseCalendar","title":"BaseCalendar","text":"<p>Parameters:</p> Name Type Description Default <code>calendar_type</code> <code>Literal['Calendar Months/Quarters/Years', 'Weeks: 4-4-5, 4-5-4 or 5-4-4', 'Weeks: General', 'Weeks: 13 4-week Periods']</code> <p>The type of calendar used.</p> required <code>current_period</code> <code>PartialCurrentPeriod</code> <p>The current period configuration.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.MonthsQuartersYearsCalendar","title":"MonthsQuartersYearsCalendar","text":"<p>Parameters:</p> Name Type Description Default <code>calendar_type</code> <code>Literal['Calendar Months/Quarters/Years', 'Weeks: 4-4-5, 4-5-4 or 5-4-4', 'Weeks: General', 'Weeks: 13 4-week Periods']</code> <p>The type of calendar used.</p> required <code>current_period</code> <code>PartialCurrentPeriod</code> <p>The current period configuration.</p> required <code>past_years_count</code> <code>int</code> <p>The number of past years included.</p> required <code>fiscal_year</code> <code>FiscalYear</code> <p>The fiscal year configuration.</p> required <code>totals_selection</code> <code>TotalsSelection</code> <p>The totals selection configuration for the calendar.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.WeeksGeneralCalendar","title":"WeeksGeneralCalendar","text":"<p>Parameters:</p> Name Type Description Default <code>calendar_type</code> <code>Literal['Calendar Months/Quarters/Years', 'Weeks: 4-4-5, 4-5-4 or 5-4-4', 'Weeks: General', 'Weeks: 13 4-week Periods']</code> <p>The type of calendar used.</p> required <code>current_period</code> <code>PartialCurrentPeriod</code> <p>The current period configuration.</p> required <code>start_date</code> <code>str</code> <p>The start date of the calendar in YYYY-MM-DD format.</p> required <code>weeks_count</code> <code>int</code> <p>The number of weeks in the calendar.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.WeeksPeriodsCalendar","title":"WeeksPeriodsCalendar","text":"<p>Parameters:</p> Name Type Description Default <code>calendar_type</code> <code>Literal['Calendar Months/Quarters/Years', 'Weeks: 4-4-5, 4-5-4 or 5-4-4', 'Weeks: General', 'Weeks: 13 4-week Periods']</code> <p>The type of calendar used.</p> required <code>current_period</code> <code>PartialCurrentPeriod</code> <p>The current period configuration.</p> required <code>fiscal_year</code> <code>FiscalYear</code> <p>The fiscal year configuration.</p> required <code>past_years_count</code> <code>int</code> <p>The number of past years included.</p> required <code>future_years_count</code> <code>int</code> <p>The number of future years included.</p> required <code>extra_week_month</code> <code>int</code> <p>The month in which the extra week is included.</p> required <code>week_format</code> <code>Literal['Numbered', 'Week Commencing', 'Week Ending']</code> <p>The format of the week.</p> required <code>totals_selection</code> <code>TotalsSelectionWithQuarter</code> <p>The totals selection configuration for the calendar.</p> required"},{"location":"api/models/transactional/#anaplan_sdk.models._transactional.WeeksGroupingCalendar","title":"WeeksGroupingCalendar","text":"<p>Parameters:</p> Name Type Description Default <code>calendar_type</code> <code>Literal['Calendar Months/Quarters/Years', 'Weeks: 4-4-5, 4-5-4 or 5-4-4', 'Weeks: General', 'Weeks: 13 4-week Periods']</code> <p>The type of calendar used.</p> required <code>current_period</code> <code>PartialCurrentPeriod</code> <p>The current period configuration.</p> required <code>fiscal_year</code> <code>FiscalYear</code> <p>The fiscal year configuration.</p> required <code>past_years_count</code> <code>int</code> <p>The number of past years included.</p> required <code>future_years_count</code> <code>int</code> <p>The number of future years included.</p> required <code>extra_week_month</code> <code>int</code> <p>The month in which the extra week is included.</p> required <code>week_format</code> <code>Literal['Numbered', 'Week Commencing', 'Week Ending']</code> <p>The format of the week.</p> required <code>totals_selection</code> <code>TotalsSelection</code> <p>The totals selection configuration for the calendar.</p> required <code>week_grouping</code> <code>str</code> <p>The week grouping configuration, e.g. '4-4-5', '4-5-4', or '5-4-4'.</p> required"},{"location":"api/sync/sync_alm_client/","title":"ALM","text":"<p>Note</p> <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>alm</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.change_model_status","title":"change_model_status","text":"<pre><code>change_model_status(status: Literal['online', 'offline']) -&gt; None</code></pre> <p>Use this call to change the status of a model.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>Literal['online', 'offline']</code> <p>The status of the model. Can be either \"online\" or \"offline\".</p> required"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_revisions","title":"get_revisions","text":"<pre><code>get_revisions(\n    sort_by: Literal[\"id\", \"name\", \"applied_on\", \"created_on\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Revision]</code></pre> <p>Use this call to return a list of revisions for a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['id', 'name', 'applied_on', 'created_on'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Revision]</code> <p>A list of revisions for a specific model.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_latest_revision","title":"get_latest_revision","text":"<pre><code>get_latest_revision() -&gt; Revision | None</code></pre> <p>Use this call to return the latest revision for a specific model. The response is in the same format as in Getting a list of syncable revisions between two models.</p> <p>If a revision exists, the return list should contain one element only which is the latest revision.</p> <p>Returns:</p> Type Description <code>Revision | None</code> <p>The latest revision for a specific model, or None if no revisions exist.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_syncable_revisions","title":"get_syncable_revisions","text":"<pre><code>get_syncable_revisions(source_model_id: str) -&gt; list[Revision]</code></pre> <p>Use this call to return the list of revisions from your source model that can be synchronized to your target model.</p> <p>The returned list displays in descending order, by creation date and time. This is consistent with how revisions are displayed in the user interface (UI).</p> <p>Parameters:</p> Name Type Description Default <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <p>Returns:</p> Type Description <code>list[Revision]</code> <p>A list of revisions that can be synchronized to the target model.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.create_revision","title":"create_revision","text":"<pre><code>create_revision(name: str, description: str) -&gt; Revision</code></pre> <p>Create a new revision for the model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name (title) of the revision.</p> required <code>description</code> <code>str</code> <p>The description of the revision.</p> required <p>Returns:</p> Type Description <code>Revision</code> <p>The created Revision Info.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_sync_tasks","title":"get_sync_tasks","text":"<pre><code>get_sync_tasks() -&gt; list[TaskSummary]</code></pre> <p>List the sync tasks for a target mode. The returned the tasks are either in progress, or they completed within the last 48 hours.</p> <p>Returns:</p> Type Description <code>list[TaskSummary]</code> <p>A list of sync tasks in descending order of creation time.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_sync_task","title":"get_sync_task","text":"<pre><code>get_sync_task(task_id: str) -&gt; SyncTask</code></pre> <p>Get the information for a specific sync task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the sync task.</p> required <p>Returns:</p> Type Description <code>SyncTask</code> <p>The sync task information.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.sync_models","title":"sync_models","text":"<pre><code>sync_models(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; SyncTask</code></pre> <p>Create a synchronization task between two revisions. This will synchronize the source revision of the source model to the target revision of the target model. This will fail if the source revision is incompatible with the target revision.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>SyncTask</code> <p>The created sync task.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_models_for_revision","title":"get_models_for_revision","text":"<pre><code>get_models_for_revision(revision_id: str) -&gt; list[ModelRevision]</code></pre> <p>Use this call when you need a list of the models that had a specific revision applied to them.</p> <p>Parameters:</p> Name Type Description Default <code>revision_id</code> <code>str</code> <p>The ID of the revision.</p> required <p>Returns:</p> Type Description <code>list[ModelRevision]</code> <p>A list of models that had a specific revision applied to them.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.create_comparison_report","title":"create_comparison_report","text":"<pre><code>create_comparison_report(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; ReportTask</code></pre> <p>Generate a full comparison report between two revisions. This will list all the changes made to the source revision compared to the target revision.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>ReportTask</code> <p>The created report task summary.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_comparison_report_task","title":"get_comparison_report_task","text":"<pre><code>get_comparison_report_task(task_id: str) -&gt; ReportTask</code></pre> <p>Get the task information for a comparison report task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the comparison report task.</p> required <p>Returns:</p> Type Description <code>ReportTask</code> <p>The report task information.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_comparison_report","title":"get_comparison_report","text":"<pre><code>get_comparison_report(task: ReportTask) -&gt; bytes</code></pre> <p>Get the report for a specific task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>ReportTask</code> <p>The report task object containing the task ID.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The binary content of the comparison report.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.create_comparison_summary","title":"create_comparison_summary","text":"<pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: Literal[True] = True,\n) -&gt; SummaryReport</code></pre><pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: Literal[False] = False,\n) -&gt; ReportTask</code></pre> <pre><code>create_comparison_summary(\n    source_revision_id: str,\n    source_model_id: str,\n    target_revision_id: str,\n    wait_for_completion: bool = True,\n) -&gt; ReportTask | SummaryReport</code></pre> <p>Generate a comparison summary between two revisions.</p> <p>Parameters:</p> Name Type Description Default <code>source_revision_id</code> <code>str</code> <p>The ID of the source revision.</p> required <code>source_model_id</code> <code>str</code> <p>The ID of the source model.</p> required <code>target_revision_id</code> <code>str</code> <p>The ID of the target revision.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code> <p>Returns:</p> Type Description <code>ReportTask | SummaryReport</code> <p>The created summary task or the summary report, if <code>wait_for_completion</code> is True.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_comparison_summary_task","title":"get_comparison_summary_task","text":"<pre><code>get_comparison_summary_task(task_id: str) -&gt; ReportTask</code></pre> <p>Get the task information for a comparison summary task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the comparison summary task.</p> required <p>Returns:</p> Type Description <code>ReportTask</code> <p>The report task information.</p>"},{"location":"api/sync/sync_alm_client/#anaplan_sdk._clients._AlmClient.get_comparison_summary","title":"get_comparison_summary","text":"<pre><code>get_comparison_summary(task: ReportTask) -&gt; SummaryReport</code></pre> <p>Get the comparison summary for a specific task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>ReportTask</code> <p>The summary task object containing the task ID.</p> required <p>Returns:</p> Type Description <code>SummaryReport</code> <p>The binary content of the comparison summary.</p>"},{"location":"api/sync/sync_audit_client/","title":"Audit","text":"<p>Note</p> <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>audit</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_audit_client/#anaplan_sdk._clients._AuditClient.get_users","title":"get_users","text":"<pre><code>get_users(\n    search_pattern: str | None = None,\n    sort_by: UserSortBy = None,\n    descending: bool = False,\n) -&gt; list[User]</code></pre> <p>Lists all the Users in the authenticated users default tenant.</p> <p>Parameters:</p> Name Type Description Default <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific users. When provided, case-insensitive matches users with emails or names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all users.</p> <code>None</code> <code>sort_by</code> <code>UserSortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[User]</code> <p>The List of Users.</p>"},{"location":"api/sync/sync_audit_client/#anaplan_sdk._clients._AuditClient.get_user","title":"get_user","text":"<pre><code>get_user(user_id: str = 'me') -&gt; User</code></pre> <p>Retrieves information about the specified user, or the authenticated user if none specified.</p> <p>Returns:</p> Type Description <code>User</code> <p>The requested or currently authenticated User.</p>"},{"location":"api/sync/sync_audit_client/#anaplan_sdk._clients._AuditClient.get_events","title":"get_events","text":"<pre><code>get_events(\n    days_into_past: int = 30, event_type: Event = \"all\"\n) -&gt; list[dict[str, Any]]</code></pre> <p>Get audit events from Anaplan Audit API.</p> <p>Parameters:</p> Name Type Description Default <code>days_into_past</code> <code>int</code> <p>The nuber of days into the past to get events for. The API provides data for up to 30 days.</p> <code>30</code> <code>event_type</code> <code>Event</code> <p>The type of events to get.</p> <code>'all'</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>A list of log entries, each containing a dictionary with event details.</p>"},{"location":"api/sync/sync_client/","title":"Bulk API Client (<code>Client</code>)","text":"<p>Synchronous Anaplan Client. For guides and examples refer to https://vinzenzklass.github.io/anaplan-sdk.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.__init__","title":"__init__","text":"<pre><code>__init__(\n    workspace_id: str | None = None,\n    model_id: str | None = None,\n    user_email: str | None = None,\n    password: str | None = None,\n    certificate: str | bytes | None = None,\n    private_key: str | bytes | None = None,\n    private_key_password: str | bytes | None = None,\n    token: str | None = None,\n    auth: Auth | None = None,\n    timeout: float | Timeout = 30,\n    retry_count: int = 2,\n    backoff: float = 1.0,\n    backoff_factor: float = 2.0,\n    page_size: int = 5000,\n    status_poll_delay: int = 1,\n    upload_parallel: bool = True,\n    upload_chunk_size: int = 25000000,\n    allow_file_creation: bool = False,\n    **httpx_kwargs,\n) -&gt; None</code></pre> <p>Synchronous Anaplan Client. For guides and examples refer to https://vinzenzklass.github.io/anaplan-sdk.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The Anaplan workspace Id. You can copy this from the browser URL or find them using an HTTP Client like Postman, Paw, Insomnia etc.</p> <code>None</code> <code>model_id</code> <code>str | None</code> <p>The identifier of the model.</p> <code>None</code> <code>user_email</code> <code>str | None</code> <p>A valid email registered with the Anaplan Workspace you are attempting to access.</p> <code>None</code> <code>password</code> <code>str | None</code> <p>Password for the given <code>user_email</code> for basic Authentication.</p> <code>None</code> <code>certificate</code> <code>str | bytes | None</code> <p>The certificate content or the absolute path to the certificate file.</p> <code>None</code> <code>private_key</code> <code>str | bytes | None</code> <p>The private key content or the absolute path to the private key file.</p> <code>None</code> <code>private_key_password</code> <code>str | bytes | None</code> <p>The password to access the private key file. This is only considered if you provided a private key file and it password-protected.</p> <code>None</code> <code>token</code> <code>str | None</code> <p>An Anaplan API Token. This will be used to authenticate the client. If sufficient other authentication parameters are provided, the token will be used until it expires, after which a new one will be created. If you provide only this parameter, the client will raise an error upon first authentication failure. For short-lived instances, such as in web applications where user specific clients are created, this is the recommended way to authenticate, since this has the least overhead.</p> <code>None</code> <code>auth</code> <code>Auth | None</code> <p>You can provide a subclass of <code>httpx.Auth</code> to use for authentication. You can provide an instance of one of the classes provided by the SDK, or an instance of your own subclass of <code>httpx.Auth</code>. This will give you full control over the authentication process, but you will need to implement the entire authentication logic yourself.</p> <code>None</code> <code>timeout</code> <code>float | Timeout</code> <p>The timeout in seconds for the HTTP requests. Alternatively, you can pass an instance of <code>httpx.Timeout</code> to set the timeout for the HTTP requests.</p> <code>30</code> <code>retry_count</code> <code>int</code> <p>The number of times to retry an HTTP request if it fails. Set this to 0 to never retry. Defaults to 2, meaning each HTTP Operation will be tried a total</p> <code>2</code> <code>backoff</code> <code>float</code> <p>The initial backoff time in seconds for the retry mechanism. This is the time to wait before the first retry.</p> <code>1.0</code> <code>backoff_factor</code> <code>float</code> <p>The factor by which the backoff time is multiplied after each retry. For example, if the initial backoff is 1 second and the factor is 2, the second retry will wait 2 seconds, the third retry will wait 4 seconds, and so on. number of 2 times.</p> <code>2.0</code> <code>page_size</code> <code>int</code> <p>The number of items to return per page when paginating through results. Defaults to 5000. This is the maximum number of items that can be returned per request. If you pass a value greater than 5000, it will be capped to 5000.</p> <code>5000</code> <code>status_poll_delay</code> <code>int</code> <p>The delay between polling the status of a task.</p> <code>1</code> <code>upload_parallel</code> <code>bool</code> <p>Whether to upload chunks in parallel when uploading files.</p> <code>True</code> <code>upload_chunk_size</code> <code>int</code> <p>The size of the chunks to upload. This is the maximum size of each chunk. Defaults to 25MB.</p> <code>25000000</code> <code>allow_file_creation</code> <code>bool</code> <p>Whether to allow the creation of new files. Defaults to False since this is typically unintentional and may well be unwanted behaviour in the API altogether. A file that is created this way will not be referenced by any action in anaplan until manually assigned so there is typically no value in dynamically creating new files and uploading content to them.</p> <code>False</code> <code>httpx_kwargs</code> <p>Additional keyword arguments to pass to the <code>httpx.Client</code>. This can be used to set additional options such as proxies, headers, etc. See https://www.python-httpx.org/api/#client for the full list of arguments.</p> <code>{}</code>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.with_model","title":"with_model","text":"<pre><code>with_model(\n    model_id: str | None = None, workspace_id: str | None = None\n) -&gt; Self</code></pre> <p>Create a new instance of the Client with the given model and workspace Ids. This creates a copy of the current client. The current instance remains unchanged.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The workspace Id to use or None to use the existing workspace Id.</p> <code>None</code> <code>model_id</code> <code>str | None</code> <p>The model Id to use or None to use the existing model Id.</p> <code>None</code> <p>Returns:</p> Type Description <code>Self</code> <p>A new instance of the Client.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.audit","title":"audit  <code>property</code>","text":"<pre><code>audit: _AuditClient</code></pre> <p>The Audit Client provides access to the Anaplan Audit API. For details, see https://vinzenzklass.github.io/anaplan-sdk/guides/audit/.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.cw","title":"cw  <code>property</code>","text":"<pre><code>cw: _CloudWorksClient</code></pre> <p>The Cloud Works Client provides access to the Anaplan Cloud Works API. For details, see https://vinzenzklass.github.io/anaplan-sdk/guides/cloud_works/.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.tr","title":"tr  <code>property</code>","text":"<pre><code>tr: _TransactionalClient</code></pre> <p>The Transactional Client provides access to the Anaplan Transactional API. This is useful for more advanced use cases where you need to interact with the Anaplan Model in a more granular way.</p> <p>If you instantiated the client without the field <code>model_id</code>, this will raise a <code>ValueError</code>, since none of the endpoints can be invoked without the model Id.</p> <p>Returns:</p> Type Description <code>_TransactionalClient</code> <p>The Transactional Client.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.alm","title":"alm  <code>property</code>","text":"<pre><code>alm: _AlmClient</code></pre> <p>To use the Application Lifecycle Management (ALM) API, you need a Professional or Enterprise subscription.</p> <p>The ALM Client provides access to the Anaplan ALM API. This is useful for more advanced use cases where you need retrieve Meta Information for yours models, read or create revisions, spawn sync tasks or generate comparison reports.</p> <p>Returns:</p> Type Description <code>_AlmClient</code> <p>The ALM Client.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.scim","title":"scim  <code>property</code>","text":"<pre><code>scim: _ScimClient</code></pre> <p>To use the SCIM API, you must be User Admin. The SCIM API allows managing internal users. Visiting users are excluded from the SCIM API.</p> <p>Returns:</p> Type Description <code>_ScimClient</code> <p>The SCIM Client.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_workspace","title":"get_workspace","text":"<pre><code>get_workspace(workspace_id: str | None = None) -&gt; Workspace</code></pre> <p>Retrieves the Workspace with the given Id, or the Workspace of the current instance if no Id is given. If no Id is given and the instance has no workspace Id, this will raise a ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>str | None</code> <p>The identifier of the Workspace to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>Workspace</code> <p>The Workspace.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_workspaces","title":"get_workspaces","text":"<pre><code>get_workspaces(\n    search_pattern: str | None = None,\n    sort_by: Literal[\"size_allowance\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Workspace]</code></pre> <p>Lists all the Workspaces the authenticated user has access to.</p> <p>Parameters:</p> Name Type Description Default <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific workspaces. When provided, case-insensitive matches workspaces with names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all users.</p> <code>None</code> <code>sort_by</code> <code>Literal['size_allowance', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Workspace]</code> <p>The List of Workspaces.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_model","title":"get_model","text":"<pre><code>get_model(model_id: str | None = None) -&gt; ModelWithTransactionInfo</code></pre> <p>Retrieves the Model with the given Id, or the Model of the current instance if no Id is given. If no Id is given and the instance has no model Id, this will raise a ValueError.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str | None</code> <p>The identifier of the Model to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>ModelWithTransactionInfo</code> <p>The Model.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_models","title":"get_models","text":"<pre><code>get_models(\n    only_in_workspace: bool | str = False,\n    search_pattern: str | None = None,\n    sort_by: Literal[\"active_state\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[Model]</code></pre> <p>Lists all the Models the authenticated user has access to.</p> <p>Parameters:</p> Name Type Description Default <code>only_in_workspace</code> <code>bool | str</code> <p>If True, only lists models in the workspace provided when instantiating the client. If a string is provided, only lists models in the workspace with the given Id. If False (default), lists models in all workspaces the user</p> <code>False</code> <code>search_pattern</code> <code>str | None</code> <p>Caution: This is an undocumented Feature and may behave unpredictably. It requires the Tenant Admin role. For non-admin users, it is ignored. Optionally filter for specific models. When provided, case-insensitive matches model names containing this string. You can use the wildcards <code>%</code> for 0-n characters, and <code>_</code> for exactly 1 character. When None (default), returns all models.</p> <code>None</code> <code>sort_by</code> <code>Literal['active_state', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>The List of Models.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.delete_models","title":"delete_models","text":"<pre><code>delete_models(model_ids: list[str]) -&gt; ModelDeletionResult</code></pre> <p>Delete the given Models. Models need to be closed before they can be deleted. If one of the deletions fails, the other deletions will still be attempted and may complete.</p> <p>Parameters:</p> Name Type Description Default <code>model_ids</code> <code>list[str]</code> <p>The list of Model identifiers to delete.</p> required <p>Returns:</p> Type Description <code>ModelDeletionResult</code>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_files","title":"get_files","text":"<pre><code>get_files(\n    sort_by: Literal[\"id\", \"name\"] = \"id\", descending: bool = False\n) -&gt; list[File]</code></pre> <p>Lists all the Files in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['id', 'name']</code> <p>The field to sort the results by.</p> <code>'id'</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[File]</code> <p>The List of Files.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_actions","title":"get_actions","text":"<pre><code>get_actions(sort_by: SortBy = None, descending: bool = False) -&gt; list[Action]</code></pre> <p>Lists all the Actions in the Model. This will only return the Actions listed under <code>Other Actions</code> in Anaplan. For Imports, exports, and processes, see their respective methods instead.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Action]</code> <p>The List of Actions.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_processes","title":"get_processes","text":"<pre><code>get_processes(\n    sort_by: SortBy = None, descending: bool = False\n) -&gt; list[Process]</code></pre> <p>Lists all the Processes in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Process]</code> <p>The List of Processes.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_imports","title":"get_imports","text":"<pre><code>get_imports(sort_by: SortBy = None, descending: bool = False) -&gt; list[Import]</code></pre> <p>Lists all the Imports in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Import]</code> <p>The List of Imports.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_exports","title":"get_exports","text":"<pre><code>get_exports(sort_by: SortBy = None, descending: bool = False) -&gt; list[Export]</code></pre> <p>Lists all the Exports in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Export]</code> <p>The List of Exports.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.run_action","title":"run_action","text":"<pre><code>run_action(action_id: int, wait_for_completion: bool = True) -&gt; TaskStatus</code></pre> <p>Runs the Action and validates the spawned task. If the Action fails or completes with errors, this will raise an AnaplanActionError. Failed Tasks are often not something you can recover from at runtime and often require manual changes in Anaplan, i.e. updating the mapping of an Import or similar.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the Action to run. Can be any Anaplan Invokable; Processes, Imports, Exports, Other Actions.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the task status and not return until the task is complete. If False, it will spawn the task and return immediately.</p> <code>True</code>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_file","title":"get_file","text":"<pre><code>get_file(file_id: int) -&gt; bytes</code></pre> <p>Retrieves the content of the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to retrieve.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the file.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_file_stream","title":"get_file_stream","text":"<pre><code>get_file_stream(file_id: int, batch_size: int = 1) -&gt; Iterator[bytes]</code></pre> <p>Retrieves the content of the specified file as a stream of chunks. The chunks are yielded one by one, so you can process them as they arrive. This is useful for large files where you don't want to or cannot load the entire file into memory at once.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to retrieve.</p> required <code>batch_size</code> <code>int</code> <p>Number of chunks to fetch concurrently. If &gt; 1, n chunks will be fetched concurrently. This still yields each chunk individually, only the requests are batched. If 1 (default), each chunk is fetched sequentially.</p> <code>1</code> <p>Returns:</p> Type Description <code>Iterator[bytes]</code> <p>A generator yielding the chunks of the file.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.upload_file","title":"upload_file","text":"<pre><code>upload_file(file_id: int, content: str | bytes) -&gt; None</code></pre> <p>Uploads the content to the specified file. If there are several chunks, upload of individual chunks are uploaded concurrently.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>str | bytes</code> <p>The content to upload. This Content will be compressed before uploading. If you are passing the Input as bytes, pass it uncompressed.</p> required"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.upload_file_stream","title":"upload_file_stream","text":"<pre><code>upload_file_stream(\n    file_id: int, content: Iterator[str | bytes], batch_size: int = 1\n) -&gt; None</code></pre> <p>Uploads the content to the specified file as a stream of chunks. This is useful either for large files where you don't want to or cannot load the entire file into memory at once, or if you simply do not know the number of chunks ahead of time and instead just want to pass on chunks i.e. consumed from a queue until it is exhausted. In this case, you can pass a generator that yields the chunks of the file one by one to this method.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>Iterator[str | bytes]</code> <p>An Iterator or AsyncIterator yielding the chunks of the file. You can pass any Iterator, but you will most likely want to pass a Generator.</p> required <code>batch_size</code> <code>int</code> <p>Number of chunks to upload concurrently. If &gt; 1, n chunks will be uploaded concurrently. This can be useful if you either do not control the chunk size, or if you want to keep the chunk size small but still want some concurrency.</p> <code>1</code>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.upload_and_import","title":"upload_and_import","text":"<pre><code>upload_and_import(\n    file_id: int,\n    content: str | bytes,\n    action_id: int,\n    wait_for_completion: bool = True,\n) -&gt; TaskStatus</code></pre> <p>Convenience wrapper around <code>upload_file()</code> and <code>run_action()</code> to upload content to a file and run an import action in one call.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>int</code> <p>The identifier of the file to upload to.</p> required <code>content</code> <code>str | bytes</code> <p>The content to upload. This Content will be compressed before uploading. If you are passing the Input as bytes, pass it uncompressed to avoid redundant work.</p> required <code>action_id</code> <code>int</code> <p>The identifier of the action to run after uploading the content.</p> required <code>wait_for_completion</code> <code>bool</code> <p>If True, the method will poll the import task status and not return until the task is complete. If False, it will spawn the import task and return immediately.</p> <code>True</code>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.export_and_download","title":"export_and_download","text":"<pre><code>export_and_download(action_id: int) -&gt; bytes</code></pre> <p>Convenience wrapper around <code>run_action()</code> and <code>get_file()</code> to run an export action and download the exported content in one call.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action to run.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the exported file.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_task_summaries","title":"get_task_summaries","text":"<pre><code>get_task_summaries(action_id: int) -&gt; list[TaskSummary]</code></pre> <p>Retrieves the status of all tasks spawned by the specified action.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action that was invoked.</p> required <p>Returns:</p> Type Description <code>list[TaskSummary]</code> <p>The list of tasks spawned by the action.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_task_status","title":"get_task_status","text":"<pre><code>get_task_status(action_id: int, task_id: str) -&gt; TaskStatus</code></pre> <p>Retrieves the status of the specified task.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the action that was invoked.</p> required <code>task_id</code> <code>str</code> <p>The identifier of the spawned task.</p> required <p>Returns:</p> Type Description <code>TaskStatus</code> <p>The status of the task.</p>"},{"location":"api/sync/sync_client/#anaplan_sdk.Client.get_optimizer_log","title":"get_optimizer_log","text":"<pre><code>get_optimizer_log(action_id: int, task_id: str) -&gt; bytes</code></pre> <p>Retrieves the solution logs of the specified optimization action task.</p> <p>Parameters:</p> Name Type Description Default <code>action_id</code> <code>int</code> <p>The identifier of the optimization action that was invoked.</p> required <code>task_id</code> <code>str</code> <p>The Task identifier, sometimes also referred to as the Correlation Id.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The content of the solution logs.</p>"},{"location":"api/sync/sync_cw_client/","title":"Client","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>cw</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.flows","title":"flows  <code>property</code>","text":"<pre><code>flows: _AsyncFlowClient</code></pre> <p>Access the Integration Flow APIs.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_connections","title":"get_connections  <code>async</code>","text":"<pre><code>get_connections() -&gt; list[Connection]</code></pre> <p>List all Connections available in CloudWorks.</p> <p>Returns:</p> Type Description <code>list[Connection]</code> <p>A list of connections.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_connection","title":"create_connection  <code>async</code>","text":"<pre><code>create_connection(con_info: ConnectionInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a new connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_info</code> <code>ConnectionInput | dict[str, Any]</code> <p>The connection information. This can be a ConnectionInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ConnectionInput model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new connection.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_connection","title":"update_connection  <code>async</code>","text":"<pre><code>update_connection(\n    con_id: str, con_info: ConnectionBody | dict[str, Any]\n) -&gt; None</code></pre> <p>Update an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to update.</p> required <code>con_info</code> <code>ConnectionBody | dict[str, Any]</code> <p>The name and details of the connection. You must pass all the same details as when initially creating the connection again. If you want to update only some of the details, use the <code>patch_connection</code> method instead.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.patch_connection","title":"patch_connection  <code>async</code>","text":"<pre><code>patch_connection(con_id: str, body: dict[str, Any]) -&gt; None</code></pre> <p>Update an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to update.</p> required <code>body</code> <code>dict[str, Any]</code> <p>The name and details of the connection. You can pass all the same details as when initially creating the connection again, or just any one of them.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_connection","title":"delete_connection  <code>async</code>","text":"<pre><code>delete_connection(con_id: str) -&gt; None</code></pre> <p>Delete an existing connection in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>con_id</code> <code>str</code> <p>The ID of the connection to delete.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_integrations","title":"get_integrations  <code>async</code>","text":"<pre><code>get_integrations(\n    sort_by: Literal[\"name\"] | None = None, descending: bool = False\n) -&gt; list[Integration]</code></pre> <p>List all integrations in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Integration]</code> <p>A list of integrations.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_integration","title":"get_integration  <code>async</code>","text":"<pre><code>get_integration(integration_id: str) -&gt; SingleIntegration</code></pre> <p>Get the details of a specific integration in CloudWorks.</p> <p>Note: This will not include the integration type! While present when listing integrations, the integration type is not included in the details of a single integration.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to retrieve.</p> required <p>Returns:</p> Type Description <code>SingleIntegration</code> <p>The details of the integration, without the integration type.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_integration","title":"create_integration  <code>async</code>","text":"<pre><code>create_integration(\n    body: IntegrationInput | IntegrationProcessInput | dict[str, Any],\n) -&gt; str</code></pre> <p>Create a new integration in CloudWorks. If not specified, the integration type will be either \"Import\" or \"Export\" based on the source and target you provide.</p> <p>If you want to instead create a process Integration, you can do so by specifying the <code>process_id</code> parameter and passing several jobs. Be careful to ensure, that all ids specified in the job inputs match what is defined in your model and matches the process. If this is not the case, this will error, occasionally with a misleading error message, i.e. <code>XYZ is not defined in your model</code> even though it is, Anaplan just does not know what to do with it in the location you specified.</p> <p>You can also use CloudWorks Integrations to simply schedule a process. To do this, you can simply pass an IntegrationProcessInput instance with the process_id and no jobs. This will create a process integration that will run the process you specified.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>IntegrationInput | IntegrationProcessInput | dict[str, Any]</code> <p>The integration information. This can be an IntegrationInput | IntegrationProcessInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the IntegrationInput model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new integration.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_integration","title":"update_integration  <code>async</code>","text":"<pre><code>update_integration(\n    integration_id: str,\n    body: IntegrationInput | IntegrationProcessInput | dict[str, Any],\n) -&gt; None</code></pre> <p>Update an existing integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to update.</p> required <code>body</code> <code>IntegrationInput | IntegrationProcessInput | dict[str, Any]</code> <p>The name and details of the integration. You must pass all the same details as when initially creating the integration again. If you want to update only some of the details, use the <code>patch_integration</code> method instead.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.run_integration","title":"run_integration  <code>async</code>","text":"<pre><code>run_integration(integration_id: str) -&gt; str</code></pre> <p>Run an integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to run.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the run instance.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_integration","title":"delete_integration  <code>async</code>","text":"<pre><code>delete_integration(integration_id: str) -&gt; None</code></pre> <p>Delete an existing integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to delete.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_history","title":"get_run_history  <code>async</code>","text":"<pre><code>get_run_history(integration_id: str) -&gt; list[RunSummary]</code></pre> <p>Get the run history of a specific integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to retrieve the run history for.</p> required <p>Returns:</p> Type Description <code>list[RunSummary]</code> <p>A list of run statuses.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_status","title":"get_run_status  <code>async</code>","text":"<pre><code>get_run_status(run_id: str) -&gt; RunStatus</code></pre> <p>Get the status of a specific run in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>RunStatus</code> <p>The details of the run.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_run_error","title":"get_run_error  <code>async</code>","text":"<pre><code>get_run_error(run_id: str) -&gt; RunError | None</code></pre> <p>Get the error details of a specific run in CloudWorks. This exposes potential underlying errors like the error of the invoked action, failure dumps and other details.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>RunError | None</code> <p>The details of the run error.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_schedule","title":"create_schedule  <code>async</code>","text":"<pre><code>create_schedule(\n    integration_id: str, schedule: ScheduleInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Schedule an integration in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>schedule</code> <code>ScheduleInput | dict[str, Any]</code> <p>The schedule information. This can be a ScheduleInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ScheduleInput model before sending the request.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_schedule","title":"update_schedule  <code>async</code>","text":"<pre><code>update_schedule(\n    integration_id: str, schedule: ScheduleInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Update an integration Schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>schedule</code> <code>ScheduleInput | dict[str, Any]</code> <p>The schedule information. This can be a ScheduleInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the ScheduleInput model before sending the request.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.set_schedule_status","title":"set_schedule_status  <code>async</code>","text":"<pre><code>set_schedule_status(\n    integration_id: str, status: Literal[\"enabled\", \"disabled\"]\n) -&gt; None</code></pre> <p>Set the status of an integration schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required <code>status</code> <code>Literal['enabled', 'disabled']</code> <p>The status of the schedule. This can be either \"enabled\" or \"disabled\".</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_schedule","title":"delete_schedule  <code>async</code>","text":"<pre><code>delete_schedule(integration_id: str) -&gt; None</code></pre> <p>Delete an integration schedule in CloudWorks. A schedule must already exist.</p> <p>Parameters:</p> Name Type Description Default <code>integration_id</code> <code>str</code> <p>The ID of the integration to schedule.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_notification_config","title":"get_notification_config  <code>async</code>","text":"<pre><code>get_notification_config(\n    notification_id: str | None = None, integration_id: str | None = None\n) -&gt; NotificationConfig</code></pre> <p>Get the notification configuration, either by its Id, or the notification configuration for a specific integration. If the integration_id is specified, the notification_id will be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str | None</code> <p>The ID of the notification configuration to retrieve.</p> <code>None</code> <code>integration_id</code> <code>str | None</code> <p>The ID of the integration to retrieve the notification configuration for.</p> <code>None</code> <p>Returns:</p> Type Description <code>NotificationConfig</code> <p>The details of the notification configuration.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.create_notification_config","title":"create_notification_config  <code>async</code>","text":"<pre><code>create_notification_config(config: NotificationInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a notification configuration for an integration in CloudWorks. This will error if there is already a notification configuration for the integration, which is also the case by default. In this case, you will want to use the <code>update_notification_config</code> method instead, to partially update the existing configuration or overwrite it.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>NotificationInput | dict[str, Any]</code> <p>The notification configuration. This can be a NotificationInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the NotificationConfig model before sending the request.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the new notification configuration.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.update_notification_config","title":"update_notification_config  <code>async</code>","text":"<pre><code>update_notification_config(\n    notification_id: str, config: NotificationInput | dict[str, Any]\n) -&gt; None</code></pre> <p>Update a notification configuration for an integration in CloudWorks. You cannot pass empty values or nulls to any of the fields If you want to for e.g. override  an existing list of users with an empty one, you must delete the notification configuration and create a new one with only the values you want to keep.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str</code> <p>The ID of the notification configuration to update.</p> required <code>config</code> <code>NotificationInput | dict[str, Any]</code> <p>The notification configuration. This can be a NotificationInput instance or a dictionary as per the documentation. If a dictionary is passed, it will be validated against the NotificationConfig model before sending the request.</p> required"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.delete_notification_config","title":"delete_notification_config  <code>async</code>","text":"<pre><code>delete_notification_config(\n    notification_id: str | None = None, integration_id: str | None = None\n) -&gt; None</code></pre> <p>Delete a notification configuration for an integration in CloudWorks, either by its Id, or the notification configuration for a specific integration. If the integration_id is specified, the notification_id will be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>notification_id</code> <code>str | None</code> <p>The ID of the notification configuration to delete.</p> <code>None</code> <code>integration_id</code> <code>str | None</code> <p>The ID of the integration to delete the notification config of.</p> <code>None</code>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_import_error_dump","title":"get_import_error_dump  <code>async</code>","text":"<pre><code>get_import_error_dump(run_id: str) -&gt; bytes</code></pre> <p>Get the error dump of a specific import run in CloudWorks. Calling this for a run_id that did not generate any failure dumps will produce an error.</p> <p>Note that if you need the error dump of an action in a process, you must use the <code>get_process_error_dump</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The error dump.</p>"},{"location":"api/sync/sync_cw_client/#anaplan_sdk._async_clients._AsyncCloudWorksClient.get_process_error_dump","title":"get_process_error_dump  <code>async</code>","text":"<pre><code>get_process_error_dump(run_id: str, action_id: int | str) -&gt; bytes</code></pre> <p>Get the error dump of a specific import run in CloudWorks, that is part of a process. Calling this for a run_id that did not generate any failure dumps will produce an error.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>str</code> <p>The ID of the run to retrieve.</p> required <code>action_id</code> <code>int | str</code> <p>The ID of the action to retrieve. This can be found in the RunError.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The error dump.</p>"},{"location":"api/sync/sync_flows_client/","title":"Flows","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>cw.flows</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.get_flows","title":"get_flows  <code>async</code>","text":"<pre><code>get_flows(current_user_only: bool = False) -&gt; list[FlowSummary]</code></pre> <p>List all flows in CloudWorks.</p> <p>Parameters:</p> Name Type Description Default <code>current_user_only</code> <code>bool</code> <p>Filters the flows to only those created by the current user.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[FlowSummary]</code> <p>A list of FlowSummaries.</p>"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.get_flow","title":"get_flow  <code>async</code>","text":"<pre><code>get_flow(flow_id: str) -&gt; Flow</code></pre> <p>Get a flow by its ID. This returns the full flow object, including the contained steps and continuation behavior.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to get.</p> required <p>Returns:</p> Type Description <code>Flow</code> <p>The Flow object.</p>"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.run_flow","title":"run_flow  <code>async</code>","text":"<pre><code>run_flow(flow_id: str, only_steps: list[str] = None) -&gt; str</code></pre> <p>Run a flow by its ID. Make sure that neither the flow nor any of its contained are running. If this is the case, the task will error. Anaplan neither schedules these tasks nor can it handle concurrent executions.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to run.</p> required <code>only_steps</code> <code>list[str]</code> <p>A list of step IDs to run. If not provided, only these will be run.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The ID of the run.</p>"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.create_flow","title":"create_flow  <code>async</code>","text":"<pre><code>create_flow(flow: FlowInput | dict[str, Any]) -&gt; str</code></pre> <p>Create a new flow in CloudWorks. Be careful not to omit the <code>depends_on</code> field. Anaplan will accept these values, but an invalid, corrupted flow will be created, as all Flows must have at least 2 Steps, and they must always be sequential</p> <p>Parameters:</p> Name Type Description Default <code>flow</code> <code>FlowInput | dict[str, Any]</code> <p>The flow to create. This can be a FlowInput object or a dictionary.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The ID of the created flow.</p>"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.update_flow","title":"update_flow  <code>async</code>","text":"<pre><code>update_flow(flow_id: str, flow: FlowInput | dict[str, Any]) -&gt; None</code></pre> <p>Update a flow in CloudWorks. You must provide the full flow object, partial updates are not supported.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to update.</p> required <code>flow</code> <code>FlowInput | dict[str, Any]</code> <p>The flow to update. This can be a FlowInput object or a dictionary.</p> required"},{"location":"api/sync/sync_flows_client/#anaplan_sdk._async_clients._AsyncFlowClient.delete_flow","title":"delete_flow  <code>async</code>","text":"<pre><code>delete_flow(flow_id: str) -&gt; None</code></pre> <p>Delete a flow in CloudWorks. This will not delete its contained steps. This will fail if the flow is running or if it has any running steps.</p> <p>Parameters:</p> Name Type Description Default <code>flow_id</code> <code>str</code> <p>The ID of the flow to delete.</p> required"},{"location":"api/sync/sync_oauth_client/","title":"Oauth","text":"<p>Synchronous Variant of the Anaplan OAuth client for interactive OAuth Flows in Web Applications.</p>"},{"location":"api/sync/sync_oauth_client/#anaplan_sdk._oauth.Oauth.__init__","title":"__init__","text":"<pre><code>__init__(\n    client_id: str,\n    client_secret: str,\n    redirect_uri: str,\n    authorization_url: str = \"https://us1a.app.anaplan.com/auth/prelogin\",\n    token_url: str = \"https://us1a.app.anaplan.com/oauth/token\",\n    validation_url: str = \"https://auth.anaplan.com/token/validate\",\n    scope: str = \"openid profile email offline_access\",\n    state_generator: Callable[[], str] | None = None,\n)</code></pre> <p>Initializes the OAuth Client. This class provides the two utilities needed to implement the OAuth 2.0 authorization code flow for user-facing Web Applications. It differs from the other Authentication Strategies in this SDK in two main ways:</p> <ol> <li> <p>You must implement the actual authentication flow in your application. You cannot pass the credentials directly to the <code>Client</code> or <code>AsyncClient</code>, and this class does not implement the SDK internal authentication flow, i.e. it does not subclass <code>httpx.Auth</code>.</p> </li> <li> <p>You then simply pass the resulting token to the <code>Client</code> or <code>AsyncClient</code>, rather than passing the credentials directly, which will internally construct an <code>httpx.Auth</code> instance</p> </li> </ol> <p>Note that this class exist for convenience only, and you can implement the OAuth 2.0 Flow yourself in your preferred library, or bring an existing implementation. For details on the Anaplan OAuth 2.0 Flow, see the the Docs.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID of your Anaplan Oauth 2.0 application. This Application must be an Authorization Code Grant application.</p> required <code>client_secret</code> <code>str</code> <p>The client secret of your Anaplan Oauth 2.0 application.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL to which the user will be redirected after authorizing the application.</p> required <code>authorization_url</code> <code>str</code> <p>The URL to which the user will be redirected to authorize the application. Defaults to the Anaplan Prelogin Page, where the user can select the login method.</p> <code>'https://us1a.app.anaplan.com/auth/prelogin'</code> <code>token_url</code> <code>str</code> <p>The URL to post the authorization code to in order to fetch the access token.</p> <code>'https://us1a.app.anaplan.com/oauth/token'</code> <code>validation_url</code> <code>str</code> <p>The URL to validate the access token.</p> <code>'https://auth.anaplan.com/token/validate'</code> <code>scope</code> <code>str</code> <p>The scope of the access request.</p> <code>'openid profile email offline_access'</code> <code>state_generator</code> <code>Callable[[], str] | None</code> <p>A callable that generates a random state string. You can optionally pass this if you need to customize the state generation logic. If not provided, the state will be generated by <code>oauthlib</code>.</p> <code>None</code>"},{"location":"api/sync/sync_oauth_client/#anaplan_sdk._oauth.Oauth.authorization_url","title":"authorization_url","text":"<pre><code>authorization_url(\n    authorization_url: str | None = None, state: str | None = None\n) -&gt; tuple[str, str]</code></pre> <p>Generates the authorization URL for the OAuth 2.0 flow.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_url</code> <code>str | None</code> <p>You can optionally pass a custom authorization URL. This is useful if you want to redirect i.e. redirect the user directly to the Anaplan login page rather than the Prelogin page in only one scenario, while still reusing the Client.</p> <code>None</code> <code>state</code> <code>str | None</code> <p>You can optionally pass a custom state string. If not provided, a random state string will be generated by the <code>oauthlib</code> library, or by the <code>state_generator</code> callable if provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>A tuple containing the authorization URL and the state string.</p>"},{"location":"api/sync/sync_oauth_client/#anaplan_sdk._oauth.Oauth.fetch_token","title":"fetch_token","text":"<pre><code>fetch_token(authorization_response: str) -&gt; dict[str, str | int]</code></pre> <p>Fetches the token using the authorization response from the OAuth 2.0 flow.</p> <p>Parameters:</p> Name Type Description Default <code>authorization_response</code> <code>str</code> <p>The full URL that the user was redirected to after authorizing the application. This URL will contain the authorization code and state.</p> required <p>Returns:</p> Type Description <code>dict[str, str | int]</code> <p>The token as a dictionary containing the access token, refresh token, scope, expires_in, and type.</p>"},{"location":"api/sync/sync_scim_client/","title":"SCIM","text":"Note <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>scim</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.get_service_provider_config","title":"get_service_provider_config  <code>async</code>","text":"<pre><code>get_service_provider_config() -&gt; ServiceProviderConfig</code></pre> <p>Get the SCIM Service Provider Configuration.</p> <p>Returns:</p> Type Description <code>ServiceProviderConfig</code> <p>The ServiceProviderConfig object describing the available SCIM features.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.get_resource_types","title":"get_resource_types  <code>async</code>","text":"<pre><code>get_resource_types() -&gt; list[Resource]</code></pre> <p>Get the SCIM Resource Types.</p> <p>Returns:</p> Type Description <code>list[Resource]</code> <p>A list of Resource objects describing the SCIM resource types.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.get_resource_schemas","title":"get_resource_schemas  <code>async</code>","text":"<pre><code>get_resource_schemas() -&gt; list[Schema]</code></pre> <p>Get the SCIM Resource Schemas.</p> <p>Returns:</p> Type Description <code>list[Schema]</code> <p>A list of Schema objects describing the SCIM resource schemas.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.get_users","title":"get_users  <code>async</code>","text":"<pre><code>get_users(predicate: str | field = None, page_size: int = 100) -&gt; list[User]</code></pre> <p>Get a list of users, optionally filtered by a predicate. Keep in mind that this will only return internal users. To get a list of all users in the tenant, use the <code>get_users()</code> in the <code>audit</code> namespace instead.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>str | field</code> <p>A filter predicate to filter the users. This can either be a string, in which case it will be passed as-is, or an expression. Anaplan supports filtering on the following fields: \"id\", \"externalId\", \"userName\", \"name.familyName\", \"name.givenName\" and \"active\". It supports the operators \"eq\", \"ne\", \"gt\", \"ge\", \"lt\", \"le\" and \"pr\". It supports logical operators \"and\" and \"or\", \"not\" is not supported. It supports grouping with parentheses.</p> <code>None</code> <code>page_size</code> <code>int</code> <p>The number of users to fetch per page. Values above 100 will error.</p> <code>100</code> <p>Returns:</p> Type Description <code>list[User]</code> <p>The internal users optionally matching the filter.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_id: str) -&gt; User</code></pre> <p>Get a user by their ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The ID of the user to fetch.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The User object.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.add_user","title":"add_user  <code>async</code>","text":"<pre><code>add_user(user: UserInput | dict[str, Any]) -&gt; User</code></pre> <p>Add a new user to your Anaplan tenant.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserInput | dict[str, Any]</code> <p>The user info to add. Can either be a UserInput object or a dict. If you pass a dict, it will be validated against the UserInput model before sending. If the info you provided is invalid or incomplete, this will raise a pydantic.ValidationError.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The created User object.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.replace_user","title":"replace_user  <code>async</code>","text":"<pre><code>replace_user(user_id: str, user: ReplaceUserInput | dict[str, Any])</code></pre> <p>Replace an existing user with new information. Note that this will replace all fields of the</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>ID of the user to replace.</p> required <code>user</code> <code>ReplaceUserInput | dict[str, Any]</code> <p>The new user info. Can either be a ReplaceUserInput object or a dict. If you pass a dict, it will be validated against the ReplaceUserInput model before sending. If the info you provided is invalid or incomplete, this will raise a pydantic.ValidationError.</p> required <p>Returns:</p> Type Description <p>The updated User object.</p>"},{"location":"api/sync/sync_scim_client/#anaplan_sdk._async_clients._AsyncScimClient.update_user","title":"update_user  <code>async</code>","text":"<pre><code>update_user(\n    user_id: str, operations: list[Operation] | list[dict[str, Any]]\n) -&gt; User</code></pre> <p>Update an existing user with a list of operations. This allows you to update only specific fields of the user without replacing the entire user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The ID of the user to update.</p> required <code>operations</code> <code>list[Operation] | list[dict[str, Any]]</code> <p>A list of operations to perform on the user. Each operation can either be an Operation object or a dict. If you pass a dict, it will be validated against the Operation model before sending. If the operation is invalid, this will raise a pydantic.ValidationError. You can also use the models Replace, Add and Remove which are subclasses of Operation and provide a more convenient way to create operations.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The updated User object.</p>"},{"location":"api/sync/sync_transactional_client/","title":"Transactional","text":"<p>Note</p> <p>This Class is not meant to be instantiated directly, but rather accessed through the <code>tr</code> Property on an instance of Client. For more details, see the Guide.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_model_details","title":"get_model_details","text":"<pre><code>get_model_details() -&gt; Model</code></pre> <p>Retrieves the Model details for the current Model.</p> <p>Returns:</p> Type Description <code>Model</code> <p>The Model details.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_model_status","title":"get_model_status","text":"<pre><code>get_model_status() -&gt; ModelStatus</code></pre> <p>Gets the current status of the Model.</p> <p>Returns:</p> Type Description <code>ModelStatus</code> <p>The current status of the Mode.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.wake_model","title":"wake_model","text":"<pre><code>wake_model() -&gt; None</code></pre> <p>Wake up the current model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.close_model","title":"close_model","text":"<pre><code>close_model() -&gt; None</code></pre> <p>Close the current model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_modules","title":"get_modules","text":"<pre><code>get_modules(sort_by: SortBy = None, descending: bool = False) -&gt; list[Module]</code></pre> <p>Lists all the Modules in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Module]</code> <p>The List of Modules.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_views","title":"get_views","text":"<pre><code>get_views(\n    sort_by: Literal[\"id\", \"module_id\", \"name\"] | None = None,\n    descending: bool = False,\n) -&gt; list[View]</code></pre> <p>Lists all the Views in the Model. This will include all Modules and potentially other saved views.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>Literal['id', 'module_id', 'name'] | None</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[View]</code> <p>The List of Views.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_view_info","title":"get_view_info","text":"<pre><code>get_view_info(view_id: int) -&gt; ViewInfo</code></pre> <p>Gets the detailed information about a View.</p> <p>Parameters:</p> Name Type Description Default <code>view_id</code> <code>int</code> <p>The ID of the View.</p> required <p>Returns:</p> Type Description <code>ViewInfo</code> <p>The information about the View.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_line_items","title":"get_line_items","text":"<pre><code>get_line_items(only_module_id: int | None = None) -&gt; list[LineItem]</code></pre> <p>Lists all the Line Items in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>only_module_id</code> <code>int | None</code> <p>If provided, only Line Items from this Module will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[LineItem]</code> <p>All Line Items on this Model or only from the specified Module.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_lists","title":"get_lists","text":"<pre><code>get_lists(sort_by: SortBy = None, descending: bool = False) -&gt; list[List]</code></pre> <p>Lists all the Lists in the Model.</p> <p>Parameters:</p> Name Type Description Default <code>sort_by</code> <code>SortBy</code> <p>The field to sort the results by.</p> <code>None</code> <code>descending</code> <code>bool</code> <p>If True, the results will be sorted in descending order.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[List]</code> <p>All Lists on this model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_list_metadata","title":"get_list_metadata","text":"<pre><code>get_list_metadata(list_id: int) -&gt; ListMetadata</code></pre> <p>Gets the metadata for a List.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <p>Returns:</p> Type Description <code>ListMetadata</code> <p>The Metadata for the List.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_list_items","title":"get_list_items","text":"<pre><code>get_list_items(\n    list_id: int, return_raw: Literal[False] = False\n) -&gt; list[ListItem]</code></pre><pre><code>get_list_items(\n    list_id: int, return_raw: Literal[True] = True\n) -&gt; list[dict[str, Any]]</code></pre> <pre><code>get_list_items(\n    list_id: int, return_raw: bool = False\n) -&gt; list[ListItem] | list[dict[str, Any]]</code></pre> <p>Gets all the items in a List.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>return_raw</code> <code>bool</code> <p>If True, returns the items as a list of dictionaries instead of ListItem objects. If you use the result of this call in a DataFrame or you simply pass on the data, you will want to set this to avoid unnecessary (de-)serialization.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[ListItem] | list[dict[str, Any]]</code> <p>All items in the List.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.insert_list_items","title":"insert_list_items","text":"<pre><code>insert_list_items(\n    list_id: int, items: list[dict[str, str | int | dict]]\n) -&gt; InsertionResult</code></pre> <p>Insert new items to the given list. The items must be a list of dictionaries with at least the keys <code>code</code> and <code>name</code>. You can optionally pass further keys for parents, extra properties etc. If you pass a long list, it will be split into chunks of 100,000 items, the maximum allowed by the API.</p> <p>Warning: If one or some of the requests timeout during large batch operations, the operation may actually complete on the server. Retries for these chunks will then report these items as \"ignored\" rather than \"added\", leading to misleading results. The results in Anaplan will be correct, but this function may report otherwise. Be generous with your timeouts and retries if you are using this function for large batch operations.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>items</code> <code>list[dict[str, str | int | dict]]</code> <p>The items to insert into the List.</p> required <p>Returns:</p> Type Description <code>InsertionResult</code> <p>The result of the insertion, indicating how many items were added, ignored or failed.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.delete_list_items","title":"delete_list_items","text":"<pre><code>delete_list_items(\n    list_id: int, items: list[dict[str, str | int]]\n) -&gt; ListDeletionResult</code></pre> <p>Deletes items from a List. If you pass a long list, it will be split into chunks of 100,000 items, the maximum allowed by the API.</p> <p>Warning: If one or some of the requests timeout during large batch operations, the operation may actually complete on the server. Retries for these chunks will then report none of these items as deleted, since on the retry none are removed, leading to misleading results. The results in Anaplan will be correct, but this function may report otherwise. Be generous with your timeouts and retries if you are using this function for large batch operations.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required <code>items</code> <code>list[dict[str, str | int]]</code> <p>The items to delete from the List. Must be a dict with either <code>code</code> or <code>id</code> as the keys to identify the records to delete. Specifying both will error.</p> required <p>Returns:</p> Type Description <code>ListDeletionResult</code> <p>The result of the deletion, indicating how many items were deleted or failed.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.reset_list_index","title":"reset_list_index","text":"<pre><code>reset_list_index(list_id: int) -&gt; None</code></pre> <p>Resets the index of a List. The List must be empty to do so.</p> <p>Parameters:</p> Name Type Description Default <code>list_id</code> <code>int</code> <p>The ID of the List.</p> required"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.update_module_data","title":"update_module_data","text":"<pre><code>update_module_data(\n    module_id: int, data: list[dict[str, Any]]\n) -&gt; int | dict[str, Any]</code></pre> <p>Write the passed items to the specified module. If successful, the number of cells changed is returned, if only partially successful or unsuccessful, the response with the according details is returned instead.</p> <p>You can update a maximum of 100,000 cells or 15 MB of data (whichever is lower) in a single request. You must chunk your data accordingly. This is not done by this SDK, since it is discouraged. For larger imports, you should use the Bulk API instead.</p> <p>For more details see: https://anaplan.docs.apiary.io/#UpdateModuleCellData.</p> <p>Parameters:</p> Name Type Description Default <code>module_id</code> <code>int</code> <p>The ID of the Module.</p> required <code>data</code> <code>list[dict[str, Any]]</code> <p>The data to write to the Module.</p> required <p>Returns:</p> Type Description <code>int | dict[str, Any]</code> <p>The number of cells changed or the response with the according error details.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_current_period","title":"get_current_period","text":"<pre><code>get_current_period() -&gt; CurrentPeriod</code></pre> <p>Gets the current period of the model.</p> <p>Returns:</p> Type Description <code>CurrentPeriod</code> <p>The current period of the model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.set_current_period","title":"set_current_period","text":"<pre><code>set_current_period(date: str) -&gt; CurrentPeriod</code></pre> <p>Sets the current period of the model to the given date.</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str</code> <p>The date to set the current period to, in the format 'YYYY-MM-DD'.</p> required <p>Returns:</p> Type Description <code>CurrentPeriod</code> <p>The updated current period of the model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.set_current_fiscal_year","title":"set_current_fiscal_year","text":"<pre><code>set_current_fiscal_year(year: str) -&gt; FiscalYear</code></pre> <p>Sets the current fiscal year of the model.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>str</code> <p>The fiscal year to set, in the format specified in the model, e.g. FY24.</p> required <p>Returns:</p> Type Description <code>FiscalYear</code> <p>The updated fiscal year of the model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_model_calendar","title":"get_model_calendar","text":"<pre><code>get_model_calendar() -&gt; ModelCalendar</code></pre> <p>Get the calendar settings of the model.</p> <p>Returns:</p> Type Description <code>ModelCalendar</code> <p>The calendar settings of the model.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_dimension_items","title":"get_dimension_items","text":"<pre><code>get_dimension_items(dimension_id: int) -&gt; list[DimensionWithCode]</code></pre> <p>Get all items in a dimension. This will fail if the dimensions holds more than 1_000_000 items. Valid Dimensions are:</p> <ul> <li>Lists (101xxxxxxxxx)</li> <li>List Subsets (109xxxxxxxxx)</li> <li>Line Item Subsets (114xxxxxxxxx)</li> <li>Users (101999999999) For lists and users, you should prefer using the <code>get_list_items</code> and <code>get_users</code> methods, respectively, instead.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>dimension_id</code> <code>int</code> <p>The ID of the dimension to list items for.</p> required <p>Returns:</p> Type Description <code>list[DimensionWithCode]</code> <p>A list of Dimension items.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.lookup_dimension_items","title":"lookup_dimension_items","text":"<pre><code>lookup_dimension_items(\n    dimension_id: int, codes: list[str] = None, names: list[str] = None\n) -&gt; list[DimensionWithCode]</code></pre> <p>Looks up items in a dimension by their codes or names. If both are provided, both will be searched for. You must provide at least one of <code>codes</code> or <code>names</code>. Valid Dimensions to lookup are:</p> <ul> <li>Lists (101xxxxxxxxx)</li> <li>Time (20000000003)</li> <li>Version (20000000020)</li> <li>Users (101999999999)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>dimension_id</code> <code>int</code> <p>The ID of the dimension to lookup items for.</p> required <code>codes</code> <code>list[str]</code> <p>A list of codes to lookup in the dimension.</p> <code>None</code> <code>names</code> <code>list[str]</code> <p>A list of names to lookup in the dimension.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[DimensionWithCode]</code> <p>A list of Dimension items that match the provided codes or names.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_view_dimension_items","title":"get_view_dimension_items","text":"<pre><code>get_view_dimension_items(view_id: int, dimension_id: int) -&gt; list[Dimension]</code></pre> <p>Get the members of a dimension that are part of the given View. This call returns data as filtered by the page builder when they configure the view. This call respects hidden items, filtering selections, and Selective Access. If the view contains hidden or filtered items, these do not display in the response. This will fail if the dimensions holds more than 1_000_000 items. The response returns Items within a flat list (no hierarchy) and order is not guaranteed.</p> <p>Parameters:</p> Name Type Description Default <code>view_id</code> <code>int</code> <p>The ID of the View.</p> required <code>dimension_id</code> <code>int</code> <p>The ID of the Dimension to get items for.</p> required <p>Returns:</p> Type Description <code>list[Dimension]</code> <p>A list of Dimensions used in the View.</p>"},{"location":"api/sync/sync_transactional_client/#anaplan_sdk._clients._TransactionalClient.get_line_item_dimensions","title":"get_line_item_dimensions","text":"<pre><code>get_line_item_dimensions(line_item_id: int) -&gt; list[Dimension]</code></pre> <p>Get the dimensions of a Line Item. This will return all dimensions that are used in the Line Item.</p> <p>Parameters:</p> Name Type Description Default <code>line_item_id</code> <code>int</code> <p>The ID of the Line Item.</p> required <p>Returns:</p> Type Description <code>list[Dimension]</code> <p>A list of Dimensions used in the Line Item.</p>"},{"location":"guides/","title":"Guides","text":"<p>The Anaplan API provides various APIs to interact with the Anaplan platform. This SDK supports all of them and their respective domains and use cases. Refer to the respective Guides to get started with each API.</p> <ul> <li>Bulk API for large and efficient data ingress &amp; egress</li> <li>Transactional API for fine-grained manipulations of your models</li> <li>CloudWorks API for orchestrating and automating your Anaplan processes</li> <li>ALM API for managing your Anaplan assets and their lifecycle</li> <li>Audit API for tracking changes and maintaining compliance</li> <li>Auth APIs are used internally by the SDK to automatically manage authentication.</li> </ul>"},{"location":"guides/alm/","title":"ALM API","text":"<p>The purpose of the Application Lifecycle Management (ALM) API is to make model change management more scalable, automatable, and integrate with other systems.</p> <p>For details on required subscriptions and what you might want to use the ALM API for, refer to the Documentation.</p>"},{"location":"guides/alm/#accessing-the-namespace","title":"Accessing the Namespace","text":"<p>All the methods for the ALM APIs reside in a different namespace for better API navigability and comprehensiveness, but are accessible through the same client for convenience. For e.g., you can call the <code>.get_revisions()</code> method like so:</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)\nrevisions = anaplan.alm.get_revisions()</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)\nrevisions = await anaplan.alm.get_revisions()</code></pre> Note <p>While you can instantiate a Client without the workspace or model parameters, trying to access   the ALM Client on an instance without the <code>model_id</code> will raise a <code>ValueError</code>.</p>"},{"location":"guides/alm/#model-status-management","title":"Model Status Management","text":"<p>You can change a Models online state.</p> SynchronousAsynchronous <pre><code>anaplan.alm.change_model_status(\"offline\")\nanaplan.alm.change_model_status(\"online\")</code></pre> <pre><code>await anaplan.alm.change_model_status(\"offline\")\nawait anaplan.alm.change_model_status(\"online\")</code></pre>"},{"location":"guides/alm/#revision-management","title":"Revision Management","text":"<p>Revisions are snapshots of your model at a specific point in time. You can create new revisions to mark important milestones in your model development.</p> SynchronousAsynchronous <pre><code>revisions = anaplan.alm.get_revisions()\nlatest = anaplan.alm.get_latest_revision()\nnew_revision = anaplan.alm.create_revision(\n    name=\"Production Release v2.1\",\n    description=\"Updated forecast logic and new product hierarchy\"\n)</code></pre> <pre><code>revisions = await anaplan.alm.get_revisions()\nlatest = await anaplan.alm.get_latest_revision()\nnew_revision = await anaplan.alm.create_revision(\n    name=\"Production Release v2.1\",\n    description=\"Updated forecast logic and new product hierarchy\"\n)</code></pre> <p>Before synchronizing models, you need to identify which revisions from your source model can be synchronized to your target model. You can list all revisions that are compatible for synchronization for any model.</p> SynchronousAsynchronous <pre><code>source_model_id = \"22222222222222222222222222222222\"\nsyncable_revisions = anaplan.alm.get_syncable_revisions(source_model_id)</code></pre> <pre><code>source_model_id = \"22222222222222222222222222222222\"\nsyncable_revisions = await anaplan.alm.get_syncable_revisions(source_model_id)</code></pre>"},{"location":"guides/alm/#model-synchronization","title":"Model Synchronization","text":"<p>Model synchronization allows you to propagate changes from one model to another. This is particularly useful for promoting changes from development to test or production environments.</p> SynchronousAsynchronous <pre><code>sync_task = anaplan.alm.sync_models(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)</code></pre> <pre><code>sync_task = await anaplan.alm.sync_models(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)</code></pre> <p>By default, the <code>sync_models</code> method will wait until the synchronization is complete and return the results. You can also specify <code>wait_for_completion=False</code> to start the sync and return immediately. For long-running synchronization tasks, you might want to start the sync and check on it later rather than blocking your application.</p> <p>You can list and monitor all sync tasks for your model to track ongoing or recent synchronization activities.</p> SynchronousAsynchronous <pre><code>sync_tasks = anaplan.alm.get_sync_tasks()\n\n# See if there is any task that is still running\nrunning_task = next((t for t in sync_tasks if t.task_state != \"COMPLETE\"), None)</code></pre> <pre><code>sync_tasks = await anaplan.alm.get_sync_tasks()\n\n# See if there is any task that is still running\nrunning_task = next((t for t in sync_tasks if t.task_state != \"COMPLETE\"), None)</code></pre>"},{"location":"guides/alm/#comparison-reports","title":"Comparison Reports","text":"<p>Comparison reports provide detailed information about the differences between two model revisions.</p> SynchronousAsynchronous <pre><code>report_task = anaplan.alm.create_comparison_report(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)\nreport_content = anaplan.alm.get_comparison_report(report_task)</code></pre> <pre><code>report_task = await anaplan.alm.create_comparison_report(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)\nreport_content = await anaplan.alm.get_comparison_report(report_task)</code></pre> <p>By default, the <code>create_comparison_report</code> method will wait until the report is complete. You can also specify <code>wait_for_completion=False</code> to start the report generation and return immediately. You can then check the status of the report and retrieve the content once it's ready.</p> SynchronousAsynchronous <pre><code>report_task = anaplan.alm.create_comparison_report(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\",\n    wait_for_completion=False\n)\n# Check the status of the report later\nreport_status = anaplan.alm.get_comparison_report_task(report_task.id)\nif report_status.task_state == \"COMPLETE\":\n    report_content = anaplan.alm.get_comparison_report(report_task)</code></pre> <pre><code>report_task = await anaplan.alm.create_comparison_report(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\",\n    wait_for_completion=False\n)\n# Check the status of the report later\nreport_status = await anaplan.alm.get_comparison_report_task(report_task.id)\nif report_status.task_state == \"COMPLETE\":\n    report_content = await anaplan.alm.get_comparison_report(report_task)</code></pre> <p>For a brief overview of changes, you can generate comparison summaries that provide structured data about the differences. The summary will be an instance of <code>SummaryReport</code>.</p> SynchronousAsynchronous <pre><code>summary = anaplan.alm.create_comparison_summary(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)</code></pre> <pre><code>summary = await anaplan.alm.create_comparison_summary(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\"\n)</code></pre> <p>By default, the <code>create_comparison_summary</code> method will wait until the summary is complete. You can also specify <code>wait_for_completion=False</code> to start the summary generation and return immediately. You can then check the status of the summary and retrieve the content once it's ready.</p> SynchronousAsynchronous <pre><code>summary_task = anaplan.alm.create_comparison_summary(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\",\n    wait_for_completion=False,\n)\n# Check the status of the summary later\nsummary_task = anaplan.alm.get_comparison_summary_task(summary_task.id)\nif summary_task.task_state == \"COMPLETE\":\n    summary_content = anaplan.alm.get_comparison_summary(summary_task)</code></pre> <pre><code>summary_task = await anaplan.alm.create_comparison_summary(\n    source_revision_id=\"rev_123\",\n    source_model_id=\"22222222222222222222222222222222\",\n    target_revision_id=\"rev_456\",\n    wait_for_completion=False,\n)\n# Check the status of the summary later\nsummary_task = await anaplan.alm.get_comparison_summary_task(summary_task.id)\nif summary_task.task_state == \"COMPLETE\":\n    summary_content = await anaplan.alm.get_comparison_summary(summary_task)</code></pre>"},{"location":"guides/alm/#applications","title":"Applications","text":""},{"location":"guides/alm/#deployment-pipeline","title":"Deployment Pipeline","text":"<p>Here's an example of a complete deployment pipeline that creates a revision, syncs to production, and returns the comparison report. In production, you would want to handle errors and do something meaningful with the report, like saving it to a bucket as a change log.</p> SynchronousAsynchronous <pre><code>def deploy_to_production(source_model_id: str, target_model_id: str) -&gt; bytes:\n    source_client = anaplan_sdk.Client(\n        model_id=source_model_id,\n        certificate=\"~/certs/anaplan.pem\",\n        private_key=\"~/keys/anaplan.pem\",\n    )\n    target_client = source_client.with_model(target_model_id)\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    source_revision = source_client.alm.create_revision(\n        name=f\"Production Deploy {now}\",\n        description=\"Automated production deployment\",\n    )\n    target_revision = target_client.alm.get_latest_revision()\n    report_task = target_client.alm.create_comparison_report(\n        source_revision.id, source_model_id, target_revision.id\n    )\n    report = target_client.alm.get_comparison_report(report_task)\n    target_client.alm.sync_models(\n        source_revision.id, source_model_id, target_revision.id\n    )\n    return report</code></pre> <pre><code>async def deploy_to_production(\n    source_model_id: str, target_model_id: str\n) -&gt; bytes:\n    source_client = anaplan_sdk.AsyncClient(\n        model_id=source_model_id,\n        certificate=\"~/certs/anaplan.pem\",\n        private_key=\"~/keys/anaplan.pem\",\n    )\n    target_client = source_client.with_model(target_model_id)\n    now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    source_revision, target_revision = await gather(\n        source_client.alm.create_revision(\n            name=f\"Production Deploy {now}\",\n            description=\"Automated production deployment\",\n        ),\n        target_client.alm.get_latest_revision(),\n    )\n    report_task = await target_client.alm.create_comparison_report(\n        source_revision.id, source_model_id, target_revision.id\n    )\n    report, _ = await gather(\n        target_client.alm.get_comparison_report(report_task),\n        target_client.alm.sync_models(\n            source_revision.id, source_model_id, target_revision.id\n        ),\n    )\n    return report</code></pre>"},{"location":"guides/audit/","title":"Audit API","text":"<p>You can use the Audit API to get fine-grained information about the changes made to any model, usage, user sign-ins, most frequently visited pages and much more. The Audit API exposes most the logs collected by Anaplan.</p> <p>For API details refer to the Documentation.</p>"},{"location":"guides/audit/#usage","title":"Usage","text":"<p>Tenant Level API</p> <p>Note the absence of <code>workspace_id</code> and <code>model_id</code> in the Audit API. The Audit API is a tenant level API, meaning it is not scoped to a specific workspace or model. You can use the Audit API to get information about all workspaces and models for the default tenant of the user you are providing the credentials for.</p> <p>The methods for the Audit API reside in a different namespace for better API navigability and comprehensiveness, but are accessible through the same client for convenience. For e.g., you can call the <code>.get_events()</code> method like so:</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    certificate=\"~/certs/anaplan.pem\", private_key=\"~/keys/anaplan.pem\"\n)\nevents = anaplan.audit.get_events()</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    certificate=\"~/certs/anaplan.pem\", private_key=\"~/keys/anaplan.pem\"\n)\nevents = await anaplan.audit.get_events()</code></pre> <p>The Audit API also exposes the <code>get_users()</code> method to get a list of all users in the workspace. You can for e.g. use the two methods in combination to get a list of events with the username using polars:</p> SynchronousAsynchronous <pre><code>import polars as pl\n\nevents, users = anaplan.audit.get_events(14), anaplan.audit.get_users()\ndf = pl.DataFrame(events, orient=\"row\", infer_schema_length=1_000).join(\n    pl.DataFrame(users, orient=\"row\").select(\n        pl.col(\"id\").alias(\"userId\"), \"first_name\", \"last_name\"\n    ),\n    on=\"userId\",\n    how=\"left\",\n)</code></pre> <pre><code>import polars as pl\n\nevents, users = await gather(\n    anaplan.audit.get_events(14), anaplan.audit.get_users()\n)\ndf = pl.DataFrame(events, orient=\"row\", infer_schema_length=1_000).join(\n    pl.DataFrame(users, orient=\"row\").select(\n        pl.col(\"id\").alias(\"userId\"), \"first_name\", \"last_name\"\n    ),\n    on=\"userId\",\n    how=\"left\",\n)</code></pre>"},{"location":"guides/authentication/","title":"Authentication","text":"<p>There are three main ways to authenticate with Anaplan.</p> <ul> <li>Basic Authentication</li> <li>Certificate Authentication</li> <li>OAuth2</li> </ul> <p>Anaplan SDK supports all of them, though Basic Authentication is strictly not recommended for production use. Certificate Authentication is currently the most suitable for production use, since the Anaplan OAuth 2.0  implementation does not support the <code>client_credentials</code> grant type. This means you will have to manually manage the  refresh Token if you choose to use OAuth2.</p>"},{"location":"guides/authentication/#basic-authentication","title":"Basic Authentication","text":"<p>Basic Authentication is the simplest way to authenticate with Anaplan. It is unsuitable for Production. Anaplan password policies force password changes every 30, 60 or 90 days, depending on tenant settings, making this approach annoying to maintain and error-prone.</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    user_email=\"admin@company.com\",\n    password=\"my_super_secret_password\",\n)</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    user_email=\"admin@company.com\",\n    password=\"my_super_secret_password\",\n)</code></pre>"},{"location":"guides/authentication/#certificate-authentication","title":"Certificate Authentication","text":"<p>Certificate Authentication is the most suitable for production use. It uses an X.509 S/MIME Certificate (aka. Client Certificate or HTTPS-Certificate) and Private Key. The Process of acquiring such a certificate is well documented. Anaplan does not support self-signed certificates, so you will need to procure a certificate from a trusted Certificate Authority (CA).</p> Requires Extra <p>If you want to use certificate authentication, you need to install the <code>cert</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[cert]</code></pre> <pre><code>uv add anaplan-sdk[cert]</code></pre> <pre><code>poetry add anaplan-sdk[cert]</code></pre> <p>This will install cryptography to securely construct the authentication request.</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n    private_key_password=\"my_super_secret_password\", # Optional\n)</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n    private_key_password=\"my_super_secret_password\", # Optional\n)</code></pre>"},{"location":"guides/authentication/#oauth-for-web-applications","title":"OAuth for Web Applications","text":"<p>If you are building a Web Application and intend to have your users authenticate with Anaplan, you can use the <code>Oauth</code> or <code>AsyncOauth</code> classes. These classes provide the necessary utilities to handle the Oauth2 <code>authorization_code</code> grant, in which the authentication flow must occur outside the SDK for the user to log in.</p> <p>These Classes exist for convenience only, and you can use any other Library to handle the Oauth2 flow.</p> <p>A minimal, illustrative example for FastAPI is shown below, but you can use any other Web Framework. This will not run until you implement the TODOs in a suitable way for your purpose.</p> Requires Extra <p>If you want to use OAuth2 authentication, you need to install the <code>oauth</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[oauth]</code></pre> <pre><code>uv add anaplan-sdk[oauth]</code></pre> <pre><code>poetry add anaplan-sdk[oauth]</code></pre> <p>This will install OAuthLib to securely construct the authentication request.</p> <pre><code>import os\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, HTTPException, Request, Security\nfrom fastapi.responses import RedirectResponse\n\nfrom anaplan_sdk import AsyncClient, AsyncOauth, exceptions\n\n_oauth = AsyncOauth(\n    client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n    client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n    redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk/oauth/callback\",\n)\n\napp = FastAPI()\n\n\n@app.get(\"/login\")\nasync def login():\n    # TODO: Store the state for subsequent validation.\n    url, state = _oauth.authorization_url()\n    return RedirectResponse(url, status_code=302)\n\n\n@app.get(\"/oauth/callback\")\nasync def oauth_callback(req: Request):\n    # TODO: Validate the state and handle the token.\n    token = await _oauth.fetch_token(str(req.url))\n    return RedirectResponse(\"/home\", status_code=303)\n\n\nasync def _validate_session(\n        token: Annotated[dict[str, str], Security(...)],\n) -&gt; AsyncClient:\n    # TODO: Implement the Security scheme.\n    # TODO: Refresh the token if it is expired.\n    token = await _oauth.refresh_token(token[\"refresh_token\"])\n    await _oauth.validate_token(token[\"access_token\"])\n    return AsyncClient(token=token[\"access_token\"])\n\n\n@app.get(\"/profile\")\nasync def profile(anaplan: Annotated[AsyncClient, Security(_validate_session)]):\n    return await anaplan.audit.get_user(\"me\")\n\n\n@app.exception_handler(exceptions.InvalidCredentialsException)\nasync def invalid_credentials_exception_handler(_, __):\n    raise HTTPException(\n        status_code=401, detail=\"Invalid or expired Credentials.\"\n    )</code></pre> <p>Note that we're only passing the <code>access_token</code> to the <code>AsyncClient</code>. This is the recommended way to instantiate  short-lived instances such as in this example, since it has virtually no overhead. It will however not handle token  expiration or refresh, so you will need to handle that yourself. If you expect long-lived instances, you can pass an  instance of <code>AnaplanRefreshTokenAuth</code>. This will use the existing token to authenticate and will refresh the token when it expires.</p> SynchronousAsynchronous <pre><code>anaplan = Client(\n    auth=AnaplanRefreshTokenAuth(\n        token=token,\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n    )\n)</code></pre> <pre><code>anaplan = AsyncClient(\n    auth=AnaplanRefreshTokenAuth(\n        token=token,\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n    )\n)</code></pre>"},{"location":"guides/authentication/#oauth-for-local-applications","title":"OAuth for Local Applications","text":"<p>For local applications, you can use <code>AnaplanLocalOAuth</code> Class to handle the initial Oauth2 <code>authorization_code</code> flow  and the subsequent token refreshes.</p> Requires Extra <p>If you want to use OAuth2 authentication, you need to install the <code>oauth</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[oauth]</code></pre> <pre><code>uv add anaplan-sdk[oauth]</code></pre> <pre><code>poetry add anaplan-sdk[oauth]</code></pre> <p>This will install OAuthLib to securely construct the authentication request.</p> SynchronousAsynchronous <pre><code>anaplan = Client(\n    auth=AnaplanLocalOAuth(\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n    )\n)</code></pre> <pre><code>anaplan = AsyncClient(\n    auth=AnaplanLocalOAuth(\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n    )\n)</code></pre> <p>The SDK will prompt you to open the login URI in your browser. After you have logged in, you  will need to copy the entire redirect URI from your browser and paste it into the terminal.</p> Why do I need to copy the redirect URL? <p>Unfortunately, registering localhost redirect URIs is not supported by Anaplan. This means we cannot intercept the redirect URI and extract the <code>authorization_code</code> automatically. This is a limitation of Anaplan's OAuth2 implementation. See this Community Note.</p>"},{"location":"guides/authentication/#persisting-oauth-tokens","title":"Persisting OAuth Tokens","text":"<p>The SDK provides the ability to persist OAuth refresh tokens between sessions using the system's secure keyring for  local applications. This allows you to avoid having to re-authenticate every time you run your application while using  OAuth2. </p> Requires Extras <p>If you want to use persisting Tokens, you need to additionally install the <code>keyring</code> extra:</p> pipuvPoetry <pre><code>pip install anaplan-sdk[oauth,keyring]</code></pre> <pre><code>uv add anaplan-sdk[oauth,keyring]</code></pre> <pre><code>poetry add anaplan-sdk[oauth,keyring]</code></pre> <p>This will install Keyring to securely store refresh tokens.</p> <p>To enable token persistence, set the <code>persist_token=True</code> parameter when creating an <code>AnaplanLocalOAuth</code> instance:</p> SynchronousAsynchronous <pre><code>anaplan = Client(\n    auth=AnaplanLocalOAuth(\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n        persist_token=True,\n    )\n)</code></pre> <pre><code>anaplan = AsyncClient(\n    auth=AnaplanLocalOAuth(\n        client_id=os.environ[\"OAUTH_CLIENT_ID\"],\n        client_secret=os.environ[\"OAUTH_CLIENT_SECRET\"],\n        redirect_uri=\"https://vinzenzklass.github.io/anaplan-sdk\",\n        persist_token=True,\n    )\n)</code></pre> <p>When <code>persist_token</code> is set to True, the SDK will:</p> <ul> <li>Look for a stored refresh token in the system's keyring</li> <li>If found, use it to obtain a new access token. If also given, this will overwrite the passed <code>token</code> parameter.</li> <li>If not found or if the token is invalid, prompt the user for authentication</li> <li>After authentication, store the new refresh token in the keyring</li> </ul> Keyring Configuration <p>The keyring library may require additional configuration depending on your environment:</p> <ul> <li>In headless environments, you may need to explicitely configure a different keyring backend</li> <li>Some Linux distributions may require additional packages or configuration</li> </ul> <p>Configuring the keyring backend is your responsibility as it depends on your specific environment. </p> <p>For example, to use the libsecret file backend:</p> <pre><code>import keyring\nfrom keyring.backends import libsecret\n\nkeyring.set_keyring(libsecret.Keyring())</code></pre> <p>For more information, refer to the keyring documentation.</p>"},{"location":"guides/authentication/#oauth-token-ownership","title":"OAuth Token Ownership","text":"<p>Instances of both <code>AnaplanLocalOAuth</code> and <code>AnaplanRefreshTokenAuth</code> assert ownership of the token you pass to them  for their entire lifetime. This means that you should not use the token outside of these classes, as it may lead to  errors when attempting to use the same refresh token in multiple places. You can access the current token by using the <code>token</code> property, but you should not use anything other than the <code>access_token</code>. You can use this property to  reassert control of the OAuth token when the instance is nor longer needed. If you do need to use the token in several places simultaneously, you should use a custom scheme to do so and handle all  potential conflicts appropriately.</p>"},{"location":"guides/authentication/#custom-authentication-schemes","title":"Custom Authentication Schemes","text":"<p>If you need more control over the authentication process, you can provide your own Subclass of <code>httpx.Auth</code> to the  <code>auth</code> parameter of the <code>Client</code> or <code>AsyncClient</code>. This allows you to implement any custom authentication  strategy you need. If you do so, the entire Authentication process is your responsibility. You can read more about the <code>httpx.Auth</code> interface in the  httpx documentation.</p> <p>Below is an outline of the simplest variant of the <code>httpx.Auth</code> interface that will suffice for Anaplan's  authentication. Note the non-standard <code>AnaplanAuthToken</code> prefix in the <code>Authorization</code> header and the  <code>requires_response_body = True</code> class attribute.</p> <p><pre><code>import httpx\n\nclass MyCustomAuth(httpx.Auth):\n    requires_response_body = True\n\n    def __init__(self, token: str):\n        self._token: str = token\n\n    def auth_flow(self, request):\n        request.headers[\"Authorization\"] = f\"AnaplanAuthToken {self._token}\"\n        response = yield request\n        if response.status_code == 401:\n            auth_res = yield httpx.Request(...) # Your implementation\n            self._token = auth_res.json()[\"tokenInfo\"][\"tokenValue\"]\n            request.headers[\"Authorization\"] = f\"AnaplanAuthToken {self._token}\"\n            yield request</code></pre> If you believe that your custom authentication scheme may be generally useful, please consider contributing it to  the SDK or opening an issue to discuss it. </p>"},{"location":"guides/bulk/","title":"Bulk API","text":"<p>When using this SDK you would never know it, but the workflow of performing an import of data into or export from Anaplan is actually quite involved. To give you the full context and allow you to make informed choices, let's take a look at the individual steps, how to perform them individually and how one can put these together to use the Bulk API to the greatest efficiency.</p> Client Tuning <p>Anaplan SDK comes with a set of default options that are efficient for most use cases and general purpose. Mainly, it will compress all data before uploading and leverage Concurrency to accelerate up- and downloads, with a chunk size of 25MB. However, you can configure the client to better fit your needs. For more information, see Client Parameters.</p>"},{"location":"guides/bulk/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/bulk/#instantiate-a-client","title":"Instantiate a Client","text":"<p>Clients can be instantiated with just authentication information. This will give you access to all the  non-model-specific APIs. For the Bulk API, you also need to provide the <code>workspace_id</code> and <code>model_id</code>. Here, we're  using Certificate Authentication. You can read about other Authentication methods in the respective  Guide.</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)</code></pre>"},{"location":"guides/bulk/#listing-resources","title":"Listing Resources","text":"<p>You can list all the global resources available in the given users default tenant. You cannot list workspaces or  models that reside in a different tenant. You can still instantiate a client for a different workspace and model, but  you will need grab these IDs from the Anaplan UI or have them provided to you.</p> <p>You can list model specific resources like imports, exports, actions and processes on any model, but you will need to provide the workspace and model IDs.</p> SynchronousAsynchronous <pre><code># Globals, this will work on an instance with auth info only\nworkspaces = anaplan.get_workspaces()\nmodels = anaplan.get_models()\nmodels_in_current_ws = anaplan.get_models(True) # This requires a workspace_id\nmodels_in_other_ws = anaplan.get_models(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\")\n\n# These require an instance with workspace and model info\nimports = anaplan.get_imports()\nexports = anaplan.get_exports()\nactions = anaplan.get_actions()\nprocesses = anaplan.get_processes()</code></pre> <pre><code>workspaces, models, models_in_current_ws, models_in_other_ws = await gather(\n    anaplan.get_workspaces(), \n    anaplan.get_models(),\n    anaplan.get_models(True), # This requires a workspace_id in\n    anaplan.get_models(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\")\n) # Globals, this will work on an instance with auth info only\n\nimports, exports, actions, processes = await gather(\n    anaplan.get_imports(),\n    anaplan.get_exports(),\n    anaplan.get_actions(),\n    anaplan.get_processes(),\n) # These require an instance with workspace and model info</code></pre>"},{"location":"guides/bulk/#importing-data","title":"Importing data","text":"SynchronousAsynchronous <p><pre><code>anaplan.upload_and_import(113000000000, b\"Hello Anaplan\", 112000000000)</code></pre> Or, if you need more control i.e. to upload multiple files or run things in between: <pre><code>anaplan.upload_file(113000000000, b\"Hello Anaplan\")\n...\nanaplan.run_action(112000000000)</code></pre></p> <p><pre><code>await anaplan.upload_and_import(113000000000, b\"Hello Anaplan\", 112000000000)</code></pre> Or, if you need more control i.e. to upload multiple files or run things in between: <pre><code>await anaplan.upload_file(113000000000, b\"Hello Anaplan\")\n...\nawait anaplan.run_action(112000000000)</code></pre></p>"},{"location":"guides/bulk/#exporting-data","title":"Exporting data","text":"SynchronousAsynchronous <p><pre><code>content = anaplan.export_and_download(116000000000)</code></pre> Again, you can do this in multiple steps: <pre><code>anaplan.run_action(116000000000)\n...\ncontent = anaplan.get_file(116000000000)</code></pre></p> <p><pre><code>content = await anaplan.export_and_download(116000000000)</code></pre> Again, you can do this in multiple steps: <pre><code>await anaplan.run_action(116000000000)\n...\ncontent = await anaplan.get_file(116000000000)</code></pre></p>"},{"location":"guides/bulk/#optimizer-logs","title":"Optimizer Logs","text":"<p>You can download the Optimizer Logs from Anaplan. This will give you the Solution Logs produced by Gurobi, which can be very useful for debugging and understanding the performance of your Optimizer models.</p> SynchronousAsynchronous <pre><code>log = anaplan.get_optimizer_log(\n    117000000000, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n)</code></pre> <pre><code>log = await anaplan.get_optimizer_log(\n    117000000000, \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n)</code></pre>"},{"location":"guides/bulk/#applications","title":"Applications","text":""},{"location":"guides/bulk/#one-source-with-multiple-actions","title":"One source with multiple Actions","text":"<p>One of the most common patterns you'll find working with Anaplan is:</p> <ol> <li>Upload content</li> <li>Import into a list</li> <li>Import into a module</li> </ol> <p>The recommended way to do this is to have your model builder create two actions that reference the same file, one importing into the list and the other one importing into the module and then wrap them into a process. This would again just look like this:</p> Processes are not atomic <p>Please note that Anaplan Processes are not like Transactions in Databases, i.e. they are not atomic, and they will not roll back if one of the actions fails. This means that if you run a process that contains multiple actions, and one of them fails, all changes of all other actions that ran before the failure are permanently applied.</p> SynchronousAsynchronous <pre><code>anaplan.upload_and_import(\n    file_id=113000000000, content=b\"Hello World!\", action_id=118000000000\n)</code></pre> <pre><code>await anaplan.upload_and_import(\n    file_id=113000000000, content=b\"Hello World!\", action_id=118000000000\n)</code></pre> <p>This is logically equivalent to:</p> SynchronousAsynchronous <pre><code>anaplan.upload_file(113000000000, b\"Hello World!\")\nanaplan.run_action(112000000000)  # Import into the List\nanaplan.run_action(112000000001)  # Import into the Module</code></pre> <pre><code>await anaplan.upload_file(113000000000, b\"Hello World!\")\nawait anaplan.run_action(112000000000)  # Import into the List\nawait anaplan.run_action(112000000001)  # Import into the Module</code></pre> <p>This is by some margin the most efficient way to upload larger sets of data.</p>"},{"location":"guides/bulk/#multiple-sources-and-one-action","title":"Multiple sources and one Action","text":"<p>Conversely, some imports in Anaplan may need to read from several files. For this too, we can apply a very similar pattern:</p> SynchronousAsynchronous <pre><code>anaplan.upload_file(113000000000, b\"Hello World!\")\nanaplan.upload_file(113000000001, b\"Hello World!\")\nanaplan.run_action(118000000000)</code></pre> <pre><code>await asyncio.gather(\n    anaplan.upload_file(113000000000, b\"Hello World!\"),\n    anaplan.upload_file(113000000001, b\"Hello World!\"),\n)  # Concurrency is safe here, since the files are not overlapping\nawait anaplan.run_action(118000000000)</code></pre>"},{"location":"guides/bulk/#streaming-files-larger-than-ram","title":"Streaming Files (Larger than RAM)","text":"<p>If you have a file that is larger than your available RAM, or you are consuming chunks from a queue, you can use the  <code>upload_file_stream</code> method. You can pass a Generator that yields the chunks to this method, and it will handle the rest. The <code>upload_file_stream</code> method on the AsyncClient accepts both <code>AsyncIterator[bytes | str]</code> and <code>Iterator[str | bytes]</code>.</p> <p>Let's say you want to analyze the popular NYC Taxi dataset of ~170 million rows in Anaplan, you could use the following  code to stream the data to Anaplan. </p> SynchronousAsynchronous <pre><code>import polars as pl\n\n\ndef stream_file(chunk_size: int = 50_000):\n    url = \"s3://datasets-documentation/nyc-taxi/trips*.parquet\"\n    options = {\"aws_region\": \"eu-west-3\", \"skip_signature\": \"true\"}\n    df = pl.scan_parquet(url, storage_options=options)\n    for i in range(0, df.select(pl.len()).collect().item(), chunk_size):\n        chunk = df.slice(i, chunk_size).collect(engine=\"streaming\")\n        yield chunk.write_csv(include_header=i == 0)\n\n\nanaplan.upload_file_stream(113000000000, stream_file(), batch_size=3)</code></pre> <pre><code>import polars as pl\n\n\nasync def stream_file(chunk_size: int = 50_000):\n    url = \"s3://datasets-documentation/nyc-taxi/trips*.parquet\"\n    options = {\"aws_region\": \"eu-west-3\", \"skip_signature\": \"true\"}\n    df = pl.scan_parquet(url, storage_options=options)\n    for i in range(0, df.select(pl.len()).collect().item(), chunk_size):\n        # WARNING: `collect_async()` is experimental\n        chunk = await df.slice(i, chunk_size).collect_async(engine=\"streaming\")\n        yield chunk.write_csv(include_header=i == 0)\n\n\nawait anaplan.upload_file_stream(113000000000, stream_file(), batch_size=3)</code></pre> <p>This will allow you to upload files of arbitrary size without running into memory issues, as long as you keep the chunks and <code>batch_size</code> (= the number of chunks that are read and uploaded concurrently) small enough to fit into memory. It  will work equally well with any other source that can be read in chunks and especially well with sources that can be read lazily or return the results sets in chunks by default.</p> <p>You can in the same way use the <code>get_file_stream</code> method to download files in chunks.</p> SynchronousAsynchronous <pre><code>for chunk in anaplan.get_file_stream(113000000040):\n    ...  # do something with the chunk</code></pre> <pre><code>async for chunk in anaplan.get_file_stream(113000000040):\n    ...  # do something with the chunk</code></pre>"},{"location":"guides/bulk_vs_transactional/","title":"Bulk vs Transactional","text":"<p>TL;DR</p> <p>Use the Bulk APIs for larger (&gt;5k rows), efficient data ingress or egress, or if you're looking to automate some logic through for e.g. processes and other Anaplan mechanisms already in place. For everything else, have a look at the Transactional APIs first.</p> <p>This section focuses on explaining the different APIs and implications thereof. If you're looking for specific use cases and code snippets, consult the respective Guide.</p>"},{"location":"guides/bulk_vs_transactional/#the-bulk-api","title":"The Bulk API","text":"<p>The Bulk API is the \"traditional\" API of Anaplan. It closely reflects the way Anaplan handles data and related workflows. The upload a file, then call an import on it - or the reverse thereof for exports - workflow is essentially a step-wise automation of what a model builder would de when manually uploading new data to Anaplan.</p> <p>This Workflow may feel unintuitive to a developer at first and is perhaps unconventional, but it does have upsides over the Transactional API as well.</p>"},{"location":"guides/bulk_vs_transactional/#the-good","title":"The Good","text":"<ul> <li>Data can be CSV serialized and compressed for transfer, making it comparatively efficient.</li> <li>Data can be reused across several imports, avoiding redundant work.</li> <li>Import Actions are a very powerful abstraction over the Anaplan Internal Data Formats, abstracting away a lot of   potential work from developers:<ul> <li>Can build hierarchies out of flat data</li> <li>Can incur mapping of columns to dimensions in Anaplan, both on name and index</li> <li>Defaults to an Upsert-like behaviour, which can be very convenient</li> <li>Can convert types, parse dates and incur other transformation overhead</li> </ul> </li> </ul> <p>In essence, once you get used to this workflow and gain an understanding of how Actions work and what they can do, you can use them to great effect, and they can abstract away a lot of work from the developer.</p>"},{"location":"guides/bulk_vs_transactional/#the-bad","title":"The Bad","text":"<p>There are, however, also some noteworthy Footguns, first and foremost the fact that Anaplan does not acquire a lock when reading from a file, meaning that you can upload a file, start an Import that uses this file a source and then - while the import is reading from that file - overwrite that file with other content. The best you can hope for in this case is an import error. If the new data you overwrote the file with happens to be compatible with whatever data the import was expecting, can produce highly erroneous results without producing an error. There are easy ways to avoid this of course, but it is a massive Footgun nonetheless, especially because of the lack of documentation around this issue.</p> <p>Further, there can be cases when an import completes successfully but includes warnings. These warnings can be hard to understand and very tedious to resolve, especially because some of them are perfectly fine, while others are indeed cause for concern. It can be hard for a developer who does not have experience with Anaplan to make sense of these and decide on a resolution strategy, at which point a long and iterative process between the developer and model builder may ensue.</p>"},{"location":"guides/bulk_vs_transactional/#conclusion","title":"Conclusion","text":"<p>The Bulk API is the main way to import and export data to and from Anaplan, and it allows doing so fairly efficiently while providing powerful features and abstractions through Import Actions. The Problems that may manifest can be critical and hard to resolve, but are always solvable and with some experience, one can quickly develop a good intuition on how to best design workflows to exchange Data with Anaplan efficiently while avoiding pitfalls.</p>"},{"location":"guides/bulk_vs_transactional/#the-transactional-api","title":"The Transactional API","text":"<p>The Transactional API is a more standard, JSON oriented REST-API a developer may expect. It accepts and mostly returns JSON, allows targeting individual cells in a module (think of it as a table if you're not familiar), provides synchronous responses and enables invoking extended functionality on the Anaplan platform beyond shuffling data around.</p> <p>Since this API works and behaves much more like an API a developer may expect, there are fewer things to explain and point out, so we can skip to the conclusion directly:</p> <ul> <li>Great granularity of control</li> <li>Many features, can import and export data as well as retrieve a large number of information about data and structures   residing in Anaplan</li> <li>Less efficient for large transfers</li> <li>If used for larger transfers or overused, the Transactional API will prove a very reliable way to completely clutter   the Anaplan internal logs and make them massively painful to read and extract information from.</li> <li>Greater Developer convenience - even though this SDK largely closes this gap. This is great, but also a possible   Footgun, as it leads to this API being used, when the five minutes of effort to shift the work to the Bulk API would   definitely have been a good investment.</li> </ul>"},{"location":"guides/cloud_works/","title":"CloudWorks API","text":"<p>The CloudWorks API is a set of APIs that allow you to manage and interact with CloudWorks. It provides functionality for creating, updating, and deleting CloudWorks Connection and Integrations as well as managing their schedules and monitoring their status. For more details, see CloudWorks. It also supports Flows,  which are a sequence of integrations that are executed in a specific order.</p>"},{"location":"guides/cloud_works/#listing-resources","title":"Listing Resources","text":"<p>You can list all CloudWorks Connections, Integrations and Flows using the following methods:</p> SynchronousAsynchronous <pre><code>connections = anaplan.cw.get_connections()\nintegrations = anaplan.cw.get_integrations()\nflows = anaplan.cw.flows.get_flows()</code></pre> <pre><code>from asyncio import gather\n\nconnections, integrations, flows = await gather(\n    anaplan.cw.get_connections(),\n    anaplan.cw.get_integrations(),\n    anaplan.cw.flows.get_flows(),\n)</code></pre> <p>All the examples below are shown using the synchronous API. The syntax for the asynchronous API is identical.</p>"},{"location":"guides/cloud_works/#create-a-connection","title":"Create a Connection","text":"<p>You can use the pydantic models from <code>anaplan_sdk.models.cloud_works</code> to construct a connection Payload with  auto-completion, type checking and default values. This is most useful when manually constructing a connection payload, but you can also pass a plain dictionary instead, when you are for e.g. dynamically creating the payload at runtime  anyway.</p> PydanticDictionary Azure BlobAWS S3Google BigQuery <pre><code>from anaplan_sdk.models.cloud_works import (\n    AzureBlobConnectionInput, ConnectionInput\n)\n\ncon_id = anaplan.cw.create_connection(\n    ConnectionInput(\n        type=\"AzureBlob\",\n        body=AzureBlobConnectionInput(\n            name=\"Azure Blob Connection\",\n            storage_account_name=\"mystorageaccount\",\n            sas_token=\"sp=racwdl&amp;st=2025-09-19T09:02:45Z...\",\n            container_name=\"my-container\",\n        ),\n    )\n)   </code></pre> <pre><code>from anaplan_sdk.models.cloud_works import (\n    AmazonS3ConnectionInput, ConnectionInput\n)\n\ncon_id = anaplan.cw.create_connection(\n    ConnectionInput(\n        type=\"AmazonS3\",\n        body=AmazonS3ConnectionInput(\n            name=\"AWS S3 Connection\",\n            access_key_id=\"XXX\",\n            secret_access_key=\"XXX\",\n            bucket_name=\"my-bucket-name\",\n        ),\n    )\n)</code></pre> <pre><code>from anaplan_sdk.models.cloud_works import (\n    GoogleBigQueryConnectionInput, ConnectionInput\n)\n\ncon_id = anaplan.cw.create_connection(\n    ConnectionInput(\n        type=\"GoogleBigQuery\",\n        body=GoogleBigQueryConnectionInput(\n            name=\"Google BigQuery Connection\",\n            dataset=\"my_dataset\",\n            service_account_json={\"type\": \"service_account\", ...},\n        ),\n    )\n)</code></pre> Azure BlobAWS S3Google BigQuery <pre><code>con_id = anaplan.cw.create_connection(\n    {\n        \"type\": \"AzureBlob\",\n        \"body\": {\n            \"name\": \"Azure Blob Connection\",\n            \"storageAccountName\": \"mystorageaccount\",\n            \"containerName\": \"my-container\",\n            \"sasToken\": \"sp=racwdl&amp;st=2025-09-19T09:02:45Z...\",\n        },\n    }\n)</code></pre> <pre><code>con_id = anaplan.cw.create_connection(\n    {\n        \"type\": \"AmazonS3\",\n        \"body\": {\n            \"name\": \"AWS S3 Connection\",\n            \"bucketName\": \"my-bucket-name\",\n            \"accessKeyId\": \"XXX\",\n            \"secretAccessKey\": \"XXX\",\n        },\n    }\n)</code></pre> <pre><code>con_id = anaplan.cw.create_connection(\n    {\n        \"type\": \"GoogleBigQuery\",\n        \"body\": {\n            \"name\": \"Google BigQuery Connection\",\n            \"dataset\": \"my_dataset\",\n            \"serviceAccountKey\": {\"type\": \"service_account\", ...},\n        },\n    }\n)</code></pre> <p>If you pass a dictionary,the payload is still validated against the Pydantic Model. This way, you benefit from more concise error messages and can save on network calls. For example, if you accidentally pass  <code>storageAccount</code> instead of <code>storageAccountName</code> in the dictionary payload, you will get</p> <p>body.AzureBlobConnectionInput.storageAccountName Field required</p> <p>instead of</p> <p>{ \"code\": 400, \"message\": \"Invalid request body\" }</p> <p>and without sending a request to Anaplan at all.</p>"},{"location":"guides/cloud_works/#create-an-integration","title":"Create an Integration","text":"<p>Similarly, you can use the <code>create_integration</code> method to create an integration.</p> PydanticDictionary <pre><code>from anaplan_sdk.models.cloud_works import (\n    AnaplanTarget,\n    FileSource,\n    IntegrationInput,\n    IntegrationJobInput,\n)\n\nsource = FileSource(type=\"AzureBlob\", connection_id=\"5e...05\", file=\"dummy.csv\")\ntarget = AnaplanTarget(action_id=112000000001, file_id=113000000001)\njob = IntegrationJobInput(\n    type=\"AzureBlobToAnaplan\", sources=[source], targets=[target]\n)\nintegration_input = IntegrationInput(\n    name=\"Blob to Anaplan\",\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"22222222222222222222222222222222\",\n    jobs=[job],\n)\nintegration_id = anaplan.cw.create_integration(integration_input)</code></pre> <pre><code>anaplan.cw.create_integration(\n    {\n        \"name\": \"Blob to Anaplan\",\n        \"version\": \"2.0\",\n        \"workspaceId\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n        \"modelId\": \"22222222222222222222222222222222\",\n        \"nuxVisible\": False,\n        \"jobs\": [\n            {\n                \"type\": \"AzureBlobToAnaplan\",\n                \"sources\": [\n                    {\n                        \"connectionId\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                        \"type\": \"AzureBlob\",\n                        \"file\": \"dummy.csv\"\n                    }\n                ],\n                \"targets\": [\n                    {\n                        \"type\": \"Anaplan\",\n                        \"actionId\": \"112000000001\",\n                        \"fileId\": \"112000000001\"\n                    }\n                ]\n            }\n        ]\n    }\n)</code></pre> <p>To create a Process Integration, you can simply extend the above example to include the <code>process_id</code> in the <code>IntegrationInput</code> instance. You can then pass as number of <code>IntegrationJobInput</code> to <code>jobs</code>.</p> PydanticDictionary <pre><code>anaplan.cw.create_integration(\n    IntegrationInput(\n        name=\"Double Blob to Anaplan\",\n        workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n        model_id=\"22222222222222222222222222222222\",\n        process_id=118000000012,  # Add this line\n        jobs=[job, another_job, ...],\n    )</code></pre> <pre><code>anaplan.cw.create_integration(\n    {\n        \"name\": \"Double Blob to Anaplan\",\n        \"version\": \"2.0\",\n        \"workspaceId\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n        \"modelId\": \"22222222222222222222222222222222\",\n        \"processId\": \"118000000012\", # Add this line\n        \"nuxVisible\": false,\n        \"jobs\": [\n            {\n                \"type\": \"AzureBlobToAnaplan\",\n                \"sources\": [\n                    {\n                        \"connectionId\": \"5e...05\",\n                        \"type\": \"AzureBlob\",\n                        \"file\": \"dummy.csv\"\n                    }\n                ],\n                \"targets\": [\n                    {\n                        \"type\": \"Anaplan\",\n                        \"actionId\": \"112000000001\",\n                        \"fileId\": \"113000000001\"\n                    }\n                ]\n            },\n            {\n                \"type\": \"AzureBlobToAnaplan\",\n                \"sources\": [\n                    {\n                        \"connectionId\": \"5e...05\",\n                        \"type\": \"AzureBlob\",\n                        \"file\": \"dummy.csv\"\n                    }\n                ],\n                \"targets\": [\n                    {\n                        \"type\": \"Anaplan\",\n                        \"actionId\": \"112000000001\",\n                        \"fileId\": \"113000000001\"\n                    }\n                ]\n            }\n        ]\n    }\n)</code></pre> <p>Be careful to ensure that all ids specified in the job inputs match what is defined in your model and matches the process. If this is not the case, this will error, occasionally with a misleading error message, i.e. <code>XYZ is not defined in your model</code> even though it is, Anaplan just does not know what to do with it in the location you specified.</p> <p>You can also use CloudWorks to simply schedule a process in one of your models, or create an integration with only a process for any other reason. To do so, you can pass an <code>IntegrationProcessInput</code> instance to <code>create_integration</code> instead, or an accordingly shaped dictionary:</p> PydanticDictionary <pre><code>from anaplan_sdk.models.cloud_works import IntegrationProcessInput\n\nanaplan.cw.create_integration(\n    IntegrationProcessInput(\n        name=\"My Process\",\n        process_id=118000000012,\n        workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n        model_id=\"22222222222222222222222222222222\",\n    )\n)</code></pre> <pre><code>anaplan.cw.create_integration(\n    {\n        \"name\": \"My Process\",\n        \"version\": \"2.0\",\n        \"workspaceId\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n        \"modelId\": \"22222222222222222222222222222222\",\n        \"processId\": \"118000000012\"\n    }\n)</code></pre>"},{"location":"guides/cloud_works/#create-a-flow","title":"Create a Flow","text":"<p>A Flow or Integration Flow is a sequence of integrations that are executed in a specific order. You can create a Flow using the <code>create_flow</code> method. The flow can again be created passing either a dictionary or a Pydantic model. This SDK also comes with a set of defaults, allowing you to omit a lot of inputs compared to calling the API directly.</p> PydanticDictionary <pre><code>from anaplan_sdk.models.flows import FlowInput, FlowStepInput\n\nanaplan.cw.flows.create_flow(\n    FlowInput(\n        name=\"My Flow\",\n        steps=[\n            FlowStepInput(referrer=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"),\n            FlowStepInput(\n                referrer=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                depends_on=[\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"],\n            ),\n        ],\n    )\n)</code></pre> <pre><code>anaplan.cw.flows.create_flow(\n    {\n        \"name\": \"My Flow\",\n        \"version\": \"2.0\",\n        \"type\": \"IntegrationFlow\",\n        \"steps\": [\n            {\n                \"type\": \"Integration\",\n                \"referrer\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                \"isSkipped\": False,\n                \"exceptionBehavior\": [\n                    {\n                        \"type\": \"failure\",\n                        \"strategy\": \"stop\"\n                    },\n                    {\n                        \"type\": \"partial_success\",\n                        \"strategy\": \"continue\"\n                    }\n                ]\n            },\n            {\n                \"type\": \"Integration\",\n                \"referrer\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n                \"dependsOn\": [\n                    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n                ],\n                \"isSkipped\": False,\n                \"exceptionBehavior\": [\n                    {\n                        \"type\": \"failure\",\n                        \"strategy\": \"stop\"\n                    },\n                    {\n                        \"type\": \"partial_success\",\n                        \"strategy\": \"continue\"\n                    }\n                ]\n            }\n        ]\n    }\n)</code></pre>"},{"location":"guides/logging/","title":"Logging","text":"<p>If you need visibility of the internal behaviour of <code>anaplan_sdk</code>, you can use the built-in logging module. <code>anaplan_sdk</code> will log network errors, retries, as well as information about internal functionalities.</p> <p>Consider this example:</p> <pre><code>import logging\n\nlogging.basicConfig(\n    format=\"%(levelname)s\\t%(asctime)s  %(message)s\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n    encoding=\"utf-8\",\n    level=logging.INFO,\n)</code></pre> <p>This will output information to the console. If you have redirected <code>stdout</code>, it will be redirected accordingly.</p> <p>To configure the log level independently of the logging for your app, you can use the following line:</p> <pre><code>logging.getLogger(\"anaplan_sdk\").setLevel(logging.CRITICAL)</code></pre> <p>You can do the same using dictionary configuration for logging just as well.</p> <p>If you need Information about the actual HTTP Requests sent, you can set the log level for the underlying httpx library:</p> <pre><code>logging.getLogger(\"httpx\").setLevel(logging.INFO)</code></pre> <p>To get a more detailed view on the internal workings of <code>anaplan_sdk</code>, you can set the log level to <code>DEBUG</code>:</p> <pre><code>logging.getLogger(\"anaplan_sdk\").setLevel(logging.DEBUG)</code></pre>"},{"location":"guides/multiple_models/","title":"Multiple Models","text":"<p>If you find yourself working with several Models at the same time, you will want to reuse a Client Instance instead of creating an entirely new one. This is both syntactically nicer and more efficient by avoiding duplicate authentication  and sharing underlying resources that can safely be shared. For this Purpose, you can use the <code>with_model()</code> method.  You can optionally pass a new Workspace ID and Model ID to this method. If you omit the Workspace ID - the second  argument - the existing one will be used.</p> SynchronousAsynchronous <pre><code>anaplan = Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"22222222222222222222222222222222\",\n    certificate=getenv(\"ANAPLAN_CERT\"),\n    private_key=getenv(\"ANAPLAN_PK\"),\n)\nother = anaplan.with_model(\"22222222222222222222222222222222\")  # Updates the Model Id\nother_ws = anaplan.with_model(\n    \"22222222222222222222222222222222\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"\n)  # Updates the Model Id and the Workspace Id  </code></pre> <pre><code>anaplan = AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"22222222222222222222222222222222\",\n    certificate=getenv(\"ANAPLAN_CERT\"),\n    private_key=getenv(\"ANAPLAN_PK\"),\n)\nother = anaplan.with_model(\"22222222222222222222222222222222\")  # Updates the Model Id\nother_ws = anaplan.with_model(\n    \"22222222222222222222222222222222\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"\n)  # Updates the Model Id and the Workspace Id</code></pre>"},{"location":"guides/scim/","title":"SCIM API","text":"<p>The Anaplan SDK provides access to the SCIM (System for Cross-domain Identity Management) API for managing user identities within your Anaplan tenant. Despite its name, the Anaplan SCIM API is only partially RFC 7643 &amp; RFC 7644 compliant.</p>"},{"location":"guides/scim/#basic-usage","title":"Basic Usage","text":"SynchronousAsynchronous <pre><code>from anaplan_sdk import Client\n\nanaplan = Client(\n    certificate=getenv(\"ANAPLAN_CERT\"), private_key=getenv(\"ANAPLAN_PK\")\n)\n# See Available Features\nconfig = anaplan.scim.get_service_provider_config()\nresources = anaplan.scim.get_resource_types()  # See Available Resources\nschemas = anaplan.scim.get_resource_schemas()  # See Available Schemas\nusers = anaplan.scim.get_users()  # All internal users\nuser = anaplan.scim.get_user(\"123\")  # specific user</code></pre> <pre><code>from asyncio import gather\n\nfrom anaplan_sdk import AsyncClient\n\nanaplan = AsyncClient(\n    certificate=getenv(\"ANAPLAN_CERT\"), private_key=getenv(\"ANAPLAN_PK\")\n)\nconfig, resources, schemas, users, user = await gather(\n    anaplan.scim.get_service_provider_config(),  # See Available Features\n    anaplan.scim.get_resource_types(),  # See Available Resources\n    anaplan.scim.get_resource_schemas(),  # See Available Schemas\n    anaplan.scim.get_users(),  # All internal users\n    anaplan.scim.get_user(\"123\"),  # specific user\n)</code></pre>"},{"location":"guides/scim/#filtering-users","title":"Filtering Users","text":"<p>You can filter users based on specific attributes by passing a predicate string as per the RFC,  e.g. <code>active eq true</code>.</p> SynchronousAsynchronous <pre><code>users = await anaplan.scim.get_users(\"active eq true\")</code></pre> <pre><code>users = await anaplan.scim.get_users(\"active eq true\")</code></pre> <p>Anaplan supports filtering by the following attributes: </p> <p><code>id</code>, <code>externalId</code>, <code>userName</code>, <code>name.givenName</code>, <code>name.familyName</code>, <code>active</code></p> <p>and the following operators:</p> <p><code>eq</code>, <code>ne</code>, <code>gt</code>, <code>ge</code>, <code>lt</code>, <code>le</code> and <code>pr</code>. These can be combined with <code>and</code> and <code>or</code> logical operators and grouped  with parentheses <code>(</code> and <code>)</code>.</p> <p>As an alternative to manually constructing the filter predicate string, you can use the expression language provided by the SDK to build the filter expression programmatically. This approach can help avoid syntax errors and improve  readability, and make is easier to compose more complex expressions. The expression language is heavily inspired by the polars expression syntax.</p> <p>The expression langauge supports all operators implemented by Anaplan, is fully type-hinted, reducing the risk of referencing fields you cannot filter by. It also supports truthy / falsy values allowing you to avoid explicitly  spelling out <code>== True</code> comparisons.</p> <pre><code>from anaplan_sdk import field\n\n\npart = (\n    field(\"active\")  # \"active eq true\"\n    &amp; field(\"userName\")  # \"userName pr\"\n    &amp; (field(\"name.givenName\") &gt; \"Thomas\")\n)\npredicate = (field(\"userName\") == \"test.user@valantic.com\") | (\n    part | (~field(\"active\") &amp; (field(\"name.givenName\") != \"Thomas\"))\n)</code></pre> <p>Note that we need to wrap <code>(~field(\"active\")</code> in parentheses to ensure the correct operator precedence. Anaplan does  not support the <code>not</code> operator, </p> <p><code>~field(\"active\") &amp; (field(\"name.givenName\") != \"Thomas\")</code></p> <p>would thus be invalid, since we cannot negate the logical expression and the <code>&amp;</code> evaluates before the <code>~</code>. </p>"},{"location":"guides/scim/#updating-users","title":"Updating Users","text":"<p>You can update users by performing partial operations on specific attributes or by replacing the entire user object.  You can pass the provided Pydantic models, or a dictionary with the appropriate structure. If you pass a dictionary, it will be validated against the Pydantic models before being sent to Anaplan. This avoids unnecessary requests and  gives you more concise error messages.</p> SynchronousAsynchronous <pre><code>from anaplan_sdk.models.scim import Remove, Replace\n\nuser = anaplan.scim.update_user(\n    \"123\",\n    [Replace(path=\"active\", value=False), Remove(path=\"entitlements\")],\n)</code></pre> <pre><code>from anaplan_sdk.models.scim import Remove, Replace\n\nuser = await anaplan.scim.update_user(\n    \"123\",\n    [Replace(path=\"active\", value=False), Remove(path=\"entitlements\")],\n)</code></pre> <p>Both methods return an updated user object.</p> SynchronousAsynchronous <pre><code>from anaplan_sdk.models.scim import NameInput, ReplaceUserInput\n\nuser = anaplan.scim.replace_user(\n    \"123\",\n    ReplaceUserInput(\n        id=\"123\",\n        name=NameInput(given_name=\"Test\", family_name=\"User\"),\n        user_name=\"test.user@valantic.com\",\n    ),\n)</code></pre> <pre><code>from anaplan_sdk.models.scim import NameInput, ReplaceUserInput\n\nuser = await anaplan.scim.replace_user(\n    \"123\",\n    ReplaceUserInput(\n        id=\"123\",\n        name=NameInput(given_name=\"Test\", family_name=\"User\"),\n        user_name=\"test.user@valantic.com\",\n    ),\n)</code></pre>"},{"location":"guides/sorting/","title":"Sorting","text":"<p>Some endpoints support sorting results by a specified field in either ascending or descending order. The methods for these endpoints include a <code>sort_by</code> parameter to specify the field to sort on, and a <code>descending</code> boolean parameter to specify the sort order (default is ascending).  </p>"},{"location":"guides/sorting/#syntax","title":"Syntax","text":"<p>These Methods support sorting. The Type Literals for the <code>sort_by</code> will tell you which fields are supported for sorting.</p> <pre><code># Audit\nanaplan.audit.get_users(sort_by=\"email\")\n\n# Workspaces &amp; Models\nanaplan.get_workspaces(sort_by=\"size_allowance\", descending=True)\nanaplan.get_models(sort_by=\"active_state\")\n\n# Model Objects\nanaplan.get_files(sort_by=\"name\")\nanaplan.get_actions(sort_by=\"id\")\nanaplan.get_processes(sort_by=\"name\")\nanaplan.get_imports(sort_by=\"id\")\nanaplan.get_exports(sort_by=\"name\")\n\n# Transactional\nanaplan.tr.get_modules(sort_by=\"name\")\nanaplan.tr.get_views(sort_by=\"module_id\")\nanaplan.tr.get_lists(sort_by=\"id\")\n\n# ALM\nanaplan.alm.get_revisions(sort_by=\"created_on\")\n\n# CloudWorks\nanaplan.cw.get_integrations(sort_by_name=\"descending\")</code></pre>"},{"location":"guides/transactional/","title":"Transactional API","text":"<p>If you need to go beyond the standard flows of importing and exporting data to and from Anaplan, you likely will need some functionality of the Transactional APIs. The Transactional APIs can provide a lot of Information about the Model, the data that resides in the model, ongoing Tasks etc. You can also use them to insert data directly into Lists and Modules or read data from Lists and Modules.</p>"},{"location":"guides/transactional/#accessing-the-namespace","title":"Accessing the Namespace","text":"<p>All the methods for the Transactional APIs reside in a different namespace for better API navigability and comprehensiveness, but are accessible through the same client for convenience. For e.g., you can call the <code>.get_lists()</code> method like so:</p> SynchronousAsynchronous <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.Client(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)\nlists = anaplan.tr.get_lists()</code></pre> <pre><code>import anaplan_sdk\n\nanaplan = anaplan_sdk.AsyncClient(\n    workspace_id=\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\n    model_id=\"11111111111111111111111111111111\",\n    certificate=\"~/certs/anaplan.pem\",\n    private_key=\"~/keys/anaplan.pem\",\n)\nlists = await anaplan.tr.get_lists()</code></pre> Note <p>While you can instantiate a Client without the workspace or model parameters, trying to access the Transactional Client on an instance without the <code>model_id</code> will raise a <code>ValueError</code>.</p>"},{"location":"guides/transactional/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/transactional/#read-list-items","title":"Read List Items","text":"SynchronousAsynchronous <pre><code>products = anaplan.tr.get_list_items(101000000299)</code></pre> <pre><code>products = await anaplan.tr.get_list_items(101000000299)</code></pre>"},{"location":"guides/transactional/#insert-new-list-items","title":"Insert new List Items","text":"<p>These dicts must at least hold <code>code</code> or <code>id</code>and the name.</p> SynchronousAsynchronous <pre><code>anaplan.tr.insert_list_items(\n    101000000299,\n    [\n        {\"code\": \"A\", \"name\": \"A\"},\n        {\"code\": \"B\", \"name\": \"B\"},\n        {\"code\": \"C\", \"name\": \"C\"},\n        {\"code\": \"D\", \"name\": \"D\"},\n    ],\n)</code></pre> <pre><code>await anaplan.tr.insert_list_items(\n    101000000299,\n    [\n        {\"code\": \"A\", \"name\": \"A\"},\n        {\"code\": \"B\", \"name\": \"B\"},\n        {\"code\": \"C\", \"name\": \"C\"},\n        {\"code\": \"D\", \"name\": \"D\"},\n    ],\n)</code></pre>"},{"location":"guides/transactional/#update-module-data","title":"Update Module Data","text":"<p>You can manipulate individual cells in a module using the <code>update_module_data</code> method. This method takes a list of dictionaries, each specifying the \"coordinates\" as a combination of the module to write to, the line item to update and the list of dimensions. The combination of these three will uniquely identify the cell to be updated. The value to be written is specified in the <code>value</code> key of the dictionary. The Line Items and Dimensions can be specified by either their <code>id</code> or <code>name</code>. The <code>value</code> can be a string, number or boolean.</p> SynchronousAsynchronous <pre><code>anaplan.tr.update_module_data(\n    101000000299,\n    [\n        {\n            \"lineItemName\": \"Products\",\n            \"dimensions\": [\n                {\"dimensionName\": \"Product\", \"itemCode\": \"18\"},\n                {\"dimensionName\": \"Time\", \"itemName\": \"Jan 21\"},\n            ],\n            \"value\": 1000,\n        },\n        {\n            \"lineItemName\": \"Sales\",\n            \"dimensions\": [\n                {\"dimensionName\": \"Region\", \"itemName\": \"Uganda\"},\n                {\"dimensionName\": \"Time\", \"itemName\": \"Jan 21\"},\n            ],\n            \"value\": 1000,\n        },\n    ],\n)</code></pre> <pre><code>await anaplan.tr.update_module_data(\n    101000000299,\n    [\n        {\n            \"lineItemName\": \"Products\",\n            \"dimensions\": [\n                {\"dimensionName\": \"Product\", \"itemCode\": \"18\"},\n                {\"dimensionName\": \"Time\", \"itemName\": \"Jan 21\"},\n            ],\n            \"value\": 1000,\n        },\n        {\n            \"lineItemName\": \"Sales\",\n            \"dimensions\": [\n                {\"dimensionName\": \"Region\", \"itemName\": \"Uganda\"},\n                {\"dimensionName\": \"Time\", \"itemName\": \"Jan 21\"},\n            ],\n            \"value\": 1000,\n        },\n    ],\n)</code></pre>"},{"location":"guides/transactional/#applications","title":"Applications","text":""},{"location":"guides/transactional/#resetting-list-index-wo-data-loss","title":"Resetting List Index w/o data loss","text":"<p>Lists holding large sets of tr data that are frequently updated, will often produce a <code>List index limit</code> Warning. To automate this tedious task without losing any data, we can perform four simple steps:</p> <ol> <li>Export the list data and either hold it in memory or save it.</li> <li>Purge the list. This is necessary so the List Index can be reset. Attempting to reset the Index of a non-empty List    will result in an error.</li> <li>Reset the List Index.</li> <li>Reimport the Data from Step one.</li> </ol> SynchronousAsynchronous <pre><code>def reset_list_index(list_id: int) -&gt; None:\n    items = anaplan.tr.get_list_items(list_id, return_raw=True)\n    for item in items:\n        del item[\"id\"]  # Specifying both \"id\" and \"code\" will cause an error.\n    anaplan.tr.delete_list_items(list_id, items)\n    anaplan.tr.reset_list_index(list_id)\n    anaplan.tr.insert_list_items(list_id, items)\n</code></pre> <pre><code>async def reset_list_index(list_id: int) -&gt; None:\n    items = await anaplan.tr.get_list_items(list_id, return_raw=True)\n    for item in items:\n        del item[\"id\"]  # Specifying both \"id\" and \"code\" will cause an error.\n    await anaplan.tr.delete_list_items(list_id, items)\n    await anaplan.tr.reset_list_index(list_id)\n    await anaplan.tr.insert_list_items(list_id, items)</code></pre>"}]}